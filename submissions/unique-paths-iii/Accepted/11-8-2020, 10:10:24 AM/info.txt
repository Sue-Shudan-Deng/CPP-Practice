{"id":418154816,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1604859024,"status":10,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/418154816/","is_pending":"Not Pending","title":"Unique Paths III","memory":"14.1 MB","code":"class Solution:\n    def uniquePathsIII(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        method 1: backtrack\n        https://www.youtube.com/watch?v=dSXtmaGr4Fc\n        \"\"\"\n        row, col, cnt = len(grid), len(grid[0]), 1\n        for r in range(row):\n            for c in range(col):\n                if grid[r][c] == 1:\n                    start = (r, c)\n                elif grid[r][c] == 2:\n                    end = (r, c)\n                elif grid[r][c] == 0:\n                    cnt += 1\n        \n        def backtrack(r, c, n):\n            if r < 0 or r >= row or c < 0 or c >= col or grid[r][c] == -1:\n                return 0\n            if (r, c) == end:\n                return n == 0\n            # set\n            grid[r][c] = -1\n            # backtrack\n            paths = backtrack(r - 1, c, n - 1) + \\\n                    backtrack(r + 1, c, n - 1) + \\\n                    backtrack(r, c - 1, n - 1) + \\\n                    backtrack(r, c + 1, n - 1)\n            # reset\n            grid[r][c] = 0\n            return paths\n        \n        return backtrack(start[0], start[1], cnt)","compare_result":"111111111111111111111111111111111111111","title_slug":"unique-paths-iii","has_notes":false,"flag_type":1}