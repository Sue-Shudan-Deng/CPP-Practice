{"id":418627383,"lang":"cpp","lang_name":"C++","time":"2 years, 9 months","timestamp":1604968556,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/418627383/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"11.3 MB","code":"class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        // Step 1: search the smallest element \n        int l = 0, r = nums.size() - 1; \n        int m = 0;\n        while (l < r) {\n            m = l + (r - l) / 2;\n            if (nums[m] < nums[r]) {\n                r = m;\n            } else {\n                l = m + 1;\n            }\n        }\n        \n        // Step 2 : search target with shortened range\n        int smallest_idx = l;\n        l = 0, r = nums.size() - 1;\n        if (target < nums[r]) {\n            l = smallest_idx;\n        } else if (target > nums[r]) {\n            r = smallest_idx - 1;\n        } else {\n            return r;\n        }\n        \n        while (l < r) {\n            m = l + (r - l) / 2;\n            if (nums[m] >= target) {\n                r = m;\n            } else {\n                l = m + 1;\n            }\n        }\n        return nums[l] == target ? l : -1;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array","has_notes":false,"flag_type":1}