{"id":293415176,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578801618,"status":10,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/293415176/","is_pending":"Not Pending","title":"N-Queens","memory":"13.1 MB","code":"class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        row = [False for _ in range(n)]\n        diag1 = [False for _ in range(2*n-1)]\n        diag2 = [False for _ in range(2*n-1)]\n        queens = set()  # 只记录queens的位置即可，没必要记录整个棋盘\n        res = []\n        \n        def is_not_under_attack(x, y):\n            return not row[y] and not diag1[x+y] and not diag2[x-y+n-1]\n        \n        def update_status(x, y, isput):\n            row[y] = isput\n            diag1[x+y] = isput\n            diag2[x-y+n-1] = isput\n            queens.add((x, y)) if isput else queens.remove((x, y))\n        \n        def add_solution():\n            sol = []\n            for _, c in sorted(queens):\n                sol.append('.' * c + 'Q' + '.' * (n-c-1))\n            res.append(sol)\n        \n        def backtrack_nqueen(r):\n            for c in range(n):\n                # iterate through columns at the curent row.\n                if is_not_under_attack(r, c):\n                    # explore this partial candidate solution, and mark the attacking zone\n                    update_status(r, c, isput=True)\n                    if r+1 == n:\n                        # we reach the bottom, i.e. we find a solution!\n                        add_solution()\n                    else:\n                        # we move on to the next row\n                        backtrack_nqueen(r+1)\n                    # backtrack, i.e. remove the queen and remove the attacking zone.\n                    update_status(r, c, isput=False)\n\n        backtrack_nqueen(0)\n        return res\n        ","compare_result":"111111111","title_slug":"n-queens","has_notes":false,"flag_type":1}