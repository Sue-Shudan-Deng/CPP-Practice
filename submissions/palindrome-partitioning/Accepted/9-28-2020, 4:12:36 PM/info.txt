{"id":401994401,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1601334756,"status":10,"status_display":"Accepted","runtime":"68 ms","url":"/submissions/detail/401994401/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"14.5 MB","code":"class Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        def isPalindrome(s: str, l: int, r: int) -> bool:\n            while l < r:\n                if s[l] != s[r]:\n                    return False\n                l += 1\n                r -= 1\n            return True\n                \n        ans, n = [], len(s)\n        def dfs(cur: List[str], start: int, ans: List[List[str]]):\n            if start == n:\n                ans.append(cur[:])\n            for end in range(start, n):\n                if isPalindrome(s, start, end):\n                    # set\n                    cur.append(s[start:end + 1])\n                    dfs(cur, end + 1, ans)\n                    # clear\n                    cur.pop()\n        dfs([], 0, ans)\n        return ans","compare_result":"1111111111111111111111","title_slug":"palindrome-partitioning","has_notes":false,"flag_type":1}