{"id":399549049,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600840700,"status":10,"status_display":"Accepted","runtime":"176 ms","url":"/submissions/detail/399549049/","is_pending":"Not Pending","title":"Strobogrammatic Number II","memory":"20.1 MB","code":"class Solution:\n    def findStrobogrammatic(self, n: int) -> List[str]:\n        mapping = {\"0\":\"0\", \"1\":\"1\", \"6\":\"9\", \"8\":\"8\", \"9\":\"6\"}\n        numset = [0, 1, 6, 8, 9]\n        numset2 = [0, 1, 8]\n        length = n // 2\n        res = []\n        \n        def transform(r):\n            return \"\".join([mapping[i] for i in r][::-1])\n        \n        def mirror(res):\n            if n % 2 == 1:\n                return [r + str(i) + transform(r) for i in numset2 for r in res]\n            else:\n                return [r + transform(r) for r in res]\n        \n        def dfs(cur, res):\n            if len(cur) == length:\n                res.append(cur)\n                return\n            for n in numset:\n                if cur == \"\" and n == 0:\n                    continue\n                cur += str(n)\n                dfs(cur, res)\n                cur = cur[:-1]\n                \n        dfs(\"\", res)\n        return mirror(res)","compare_result":"1111111111111","title_slug":"strobogrammatic-number-ii","has_notes":false,"flag_type":1}