{"id":399543578,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600839937,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/399543578/","is_pending":"Not Pending","title":"Strobogrammatic Number II","memory":"N/A","code":"class Solution:\n    def findStrobogrammatic(self, n: int) -> List[str]:\n        mapping = {\"0\":\"0\", \"1\":\"1\", \"6\":\"9\", \"8\":\"8\", \"9\":\"6\"}\n        numset = [0, 1, 6, 8, 9]\n        length = (n + 1) // 2\n        res = []\n        \n        def mirror(res):\n            if length % 2 == 0:\n                return [r[:-1] + r[-1] + \"\".join([mapping[i] for i in r[:-1]]) for r in res]\n            else:\n                return [r + \"\".join([mapping[i] for i in r]) for r in res]\n        \n        def dfs(cur, res):\n            if len(cur) == length:\n                res.append(cur)\n                return\n            for n in numset:\n                if cur == \"\" and n == 0:\n                    continue\n                cur += str(n)\n                dfs(cur, res)\n                cur = cur[:-1]\n                \n        dfs(\"\", res)\n        return mirror(res)","compare_result":"1000000000000","title_slug":"strobogrammatic-number-ii","has_notes":false,"flag_type":1}