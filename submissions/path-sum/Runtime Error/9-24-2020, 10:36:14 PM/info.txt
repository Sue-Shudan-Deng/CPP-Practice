{"id":400434651,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1601012174,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/400434651/","is_pending":"Not Pending","title":"Path Sum","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nRecursion:\nclass Solution:\n    def hasPathSum(self, root: TreeNode, sum: int) -> bool:\n        if not root: \n            return False\n        \n        if not root.left and not root.right:\n            return sum == 0\n        \n        leftsum = self.hasPathSum(root.left, sum - root.val)\n        rightsum = self.hasPathSum(root.right, sum - root.val)\n        \n        return leftsum or rightsum\n\n# # Iteration:\n# from collections import deque\n# class Solution:\n#     def hasPathSum(self, root: TreeNode, summ: int) -> bool:\n#         if not root:\n#             return False\n#         queue = deque([(root, summ)])\n#         while queue:\n#             curr, summ = queue.popleft()\n#             summ -= curr.val\n#             if not curr.left and not curr.right and summ == 0:\n#                 return True\n#             if curr.left:\n#                 queue.append((curr.left, summ))\n#             if curr.right:\n#                 queue.append((curr.right, summ))\n#         return False","compare_result":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"path-sum","has_notes":false,"flag_type":1}