{"id":292802228,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578616807,"status":10,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/292802228/","is_pending":"Not Pending","title":"Min Stack","memory":"16.2 MB","code":"class MinStack:\n\n    def __init__(self):\n        \"\"\"\n        initialize your data structure here.\n        \"\"\"\n        self.minval = float(\"inf\")\n        self.stack = []\n\n    def push(self, x: int) -> None:\n        self.stack.append(x)\n        if x < self.minval:\n            self.minval = x\n\n    def updatemin(self):\n        newmin = float(\"inf\")\n        for item in self.stack:\n            if item < newmin:\n                newmin = item\n        self.minval = newmin\n        \n    def pop(self) -> None:\n        if self.stack:\n            item = self.stack.pop()\n            if item == self.minval:\n                self.updatemin()\n            return item \n\n    def top(self) -> int:\n        return self.stack[-1]\n        \n\n    def getMin(self) -> int:\n        return self.minval\n        \n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(x)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()","compare_result":"111111111111111111","title_slug":"min-stack","has_notes":false,"flag_type":1}