{"id":311666541,"lang":"python3","lang_name":"Python3","time":"3 years, 5 months","timestamp":1583977569,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/311666541/","is_pending":"Not Pending","title":"Boundary of Binary Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def boundaryOfBinaryTree(self, root: TreeNode) -> List[int]:\n        \"\"\"\n        三个dfs解决\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        def dfs_leftmost(node: TreeNode):\n            if not node or (not node.left and not node.right):\n                return\n            boundary.append(node.val)\n            if node.left:\n                dfs_leftmost(node.left)\n            else:\n                dfs_leftmost(node.right)\n                \n        def dfs_leaves(node: TreeNode):\n            if not node:\n                return \n            dfs_leaves(node.left)\n            if node != root and not node.left and not node.right:\n                boundary.append(node.val)\n            dfs_leaves(node.right)\n            \n        def dfs_rightmost(node: TreeNode):\n            if not node or (not node.left and not node.right):\n                return\n            if node.right:\n                dfs_leftmost(node.right)\n            else:\n                dfs_leftmost(node.left)\n            boundary.append(node.val)\n            \n        boundary = [root.val]\n        dfs_leftmost(root.left)\n        dfs_leaves(root)\n        dfs_rightmost(root.right)\n        return boundary","compare_result":"111111111111111111111111111111111111111111111111111111111111111011011010010000011111111011111111101010100010111000011","title_slug":"boundary-of-binary-tree","has_notes":false,"flag_type":1}