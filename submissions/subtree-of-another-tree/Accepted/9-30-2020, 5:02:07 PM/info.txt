{"id":402880221,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1601510527,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/402880221/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"29.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    \nprivate:\n    bool equal(TreeNode* t1, TreeNode* t2) {\n        if (!t1 && !t2) {\n            return true;\n        }\n        if (!t1 || !t2) {\n            return false;\n        }\n        bool l = equal(t1->left, t2->left);\n        bool r = equal(t1->right, t2->right);\n        return t1->val == t2->val && l && r;\n    }\n    \npublic:\n    bool isSubtree(TreeNode* s, TreeNode* t) {\n        if (!s) {\n            return false;\n        }\n        bool l = isSubtree(s->left, t);\n        bool r = isSubtree(s->right, t);\n        return l || r || equal(s, t);\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree","has_notes":false,"flag_type":1}