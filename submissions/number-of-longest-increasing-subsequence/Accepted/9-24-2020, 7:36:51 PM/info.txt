{"id":400372672,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1601001411,"status":10,"status_display":"Accepted","runtime":"852 ms","url":"/submissions/detail/400372672/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"14.2 MB","code":"class Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        \"\"\"\n        可以转换成300. Longest Increasing Subsequence + 纯粹的计数\n        需要特别理解[2,2,2,2,2]这个case\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        dp, count = [1 for _ in range(n)], [1 for _ in range(n)]\n        for i in range(1, n):\n            for j in range(i):\n                if nums[j] < nums[i]:\n                    \"\"\"\n                    这道题的难点在于下面这几行\n                    如何只在dp[i]最大的时候计数\n                    \"\"\"\n                    if dp[j] + 1 > dp[i]:\n                        dp[i] = dp[j] + 1\n                        count[i] = count[j]\n                    elif dp[j] + 1 == dp[i]: # 表示已经达到当前最大值了\n                        count[i] += count[j]\n        \n        longest = max(dp)\n        return sum([c for i, c in enumerate(count) if dp[i] == longest])\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-longest-increasing-subsequence","has_notes":false,"flag_type":1}