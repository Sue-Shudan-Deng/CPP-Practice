{"id":407089877,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1602369930,"status":10,"status_display":"Accepted","runtime":"1004 ms","url":"/submissions/detail/407089877/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"14.4 MB","code":"class Solution:\n    def findNumberOfLIS(self, nums: List[int]) -> int:\n        \"\"\"\n        可以转换成300. Longest Increasing Subsequence + 计数dp\n        需要特别理解[2,2,2,2,2]这个case\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [0 for _ in range(n)] # dp[i] 包含index i后能达到的最大长度为多少\n        count = [1 for _ in range(n)] # 包含index i的当前最大长度下，最多有多少个\n        for i in range(1, n):\n            for j in range(i):\n                if nums[j] < nums[i]:\n                    # 为了达到最大，不断更新\n                    # 一旦达到最大，开始累积\n                    if dp[j] + 1 > dp[i]:\n                        count[i] = count[j]\n                    elif dp[j] + 1 == dp[i]:\n                        count[i] += count[j]\n                    dp[i] = max(dp[i], dp[j] + 1)\n        longest = max(dp)\n        return sum([c for i, c in enumerate(count) if dp[i] == longest])","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-longest-increasing-subsequence","has_notes":false,"flag_type":1}