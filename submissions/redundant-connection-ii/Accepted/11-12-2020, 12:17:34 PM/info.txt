{"id":419650214,"lang":"python3","lang_name":"Python3","time":"2 years, 9 months","timestamp":1605212254,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/419650214/","is_pending":"Not Pending","title":"Redundant Connection II","memory":"14.3 MB","code":"class Solution:\n    def findRedundantDirectedConnection(self, edges: List[List[int]]) -> List[int]:\n        \"\"\"\n        https://www.youtube.com/watch?v=lnmJT5b4NlM&t=565s\n        \"\"\"\n        n = len(edges)\n        parent = [0 for i in range(n + 1)] # parent in graph\n        root = [i for i in range(n + 1)] # parent in union find set\n        \n        def find(node):\n            while node != root[node]:\n                root[node] = root[root[node]]\n                node = root[node]\n            return root[node]\n        \n        ans1, ans2 = [], []\n        \n        # Step 1: Get parents for each node\n        for edge in edges:\n            u, v = edge[0], edge[1]\n            if parent[v] > 0:\n                ans1 = [parent[v], v]\n                ans2 = edge\n            parent[v] = u\n                \n        for edge in edges:\n            if edge == ans2:\n                continue\n            u, v = edge[0], edge[1]\n            pu, pv = find(u), find(v)\n            if pu == pv:\n                # case 2.2 and case 1\n                return ans1 if len(ans1) > 0 else edge\n            root[pu] = pv\n            \n        return ans2 # case 2.1","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"redundant-connection-ii","has_notes":false,"flag_type":1}