{"id":292672504,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578580569,"status":10,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/292672504/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"12.9 MB","code":"class Node:\n    def __init__(self, value, nextNode=None):\n        self.value = value\n        self.next = nextNode\n        \nclass MyCircularQueue:\n\n    def __init__(self, k: int):\n        \"\"\"\n        Initialize your data structure here. Set the size of the queue to be k.\n        \"\"\"\n        self.capacity = k\n        self.head = None\n        self.tail = None\n        self.count = 0\n\n    def enQueue(self, value: int) -> bool:\n        \"\"\"\n        Insert an element into the circular queue. Return true if the operation is successful.\n        \"\"\"\n        if self.count == self.capacity:\n            return False\n        elm = Node(value)\n        if self.count == 0:\n            self.tail = elm\n            self.head = self.tail\n        else:\n            self.tail.next = elm\n            self.tail = self.tail.next\n        self.count += 1\n        return True\n\n    def deQueue(self) -> bool:\n        \"\"\"\n        Delete an element from the circular queue. Return true if the operation is successful.\n        \"\"\"\n        if self.count == 0:\n            return False\n        self.head = self.head.next\n        self.count -=1\n        return True\n        \n\n    def Front(self) -> int:\n        \"\"\"\n        Get the front item from the queue.\n        \"\"\"\n        if self.count == 0:\n            return -1\n        return self.head.value\n        \n\n    def Rear(self) -> int:\n        \"\"\"\n        Get the last item from the queue.\n        \"\"\"\n        if self.count == 0:\n            return -1\n        return self.tail.value\n        \n\n    def isEmpty(self) -> bool:\n        \"\"\"\n        Checks whether the circular queue is empty or not.\n        \"\"\"\n        return self.count == 0\n        \n\n    def isFull(self) -> bool:\n        \"\"\"\n        Checks whether the circular queue is full or not.\n        \"\"\"\n        return self.count == self.capacity\n\n\n# Your MyCircularQueue object will be instantiated and called as such:\n# obj = MyCircularQueue(k)\n# param_1 = obj.enQueue(value)\n# param_2 = obj.deQueue()\n# param_3 = obj.Front()\n# param_4 = obj.Rear()\n# param_5 = obj.isEmpty()\n# param_6 = obj.isFull()","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"design-circular-queue","has_notes":false,"flag_type":1}