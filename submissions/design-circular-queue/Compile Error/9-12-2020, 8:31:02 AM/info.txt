{"id":394638759,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1599924662,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/394638759/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"N/A","code":"private:\n    vector<int> data;\n    int head;\n    int tail;\n    int size;\npublic:\n    /** Initialize your data structure here. Set the size of the queue to be k. */\n    MyCircularQueue(int k) {\n        data.resize(k);\n        head = -1;\n        tail = -1;\n        size = k;\n    }\n    \n    /** Insert an element into the circular queue. Return true if the operation is successful. */\n    bool enQueue(int value) {\n        if (isFull()) {\n            return false;\n        }\n        if (isEmpty()) {\n            head = 0;\n        }\n        tail = (tail + 1) % size;\n        data[tail] = value;\n        return true;\n    }\n    \n    /** Delete an element from the circular queue. Return true if the operation is successful. */\n    bool deQueue() {\n        if (isEmpty()) {\n            return false;\n        }\n        if (head == tail) {\n            head = -1;\n            tail = -1;\n            return true;\n        }\n        head = (head + 1) % size;\n        return true;\n    }\n    \n    /** Get the front item from the queue. */\n    int Front() {\n        if (isEmpty()) {\n            return -1;\n        }\n        return data[head];\n    }\n    \n    /** Get the last item from the queue. */\n    int Rear() {\n        if (isEmpty()) {\n            return -1;\n        }\n        return data[tail];\n    }\n    \n    /** Checks whether the circular queue is empty or not. */\n    bool isEmpty() {\n        return head == -1;\n    }\n    \n    /** Checks whether the circular queue is full or not. */\n    bool isFull() {\n        return ((tail + 1) % size) == head;\n    }\n};\n\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue* obj = new MyCircularQueue(k);\n * bool param_1 = obj->enQueue(value);\n * bool param_2 = obj->deQueue();\n * int param_3 = obj->Front();\n * int param_4 = obj->Rear();\n * bool param_5 = obj->isEmpty();\n * bool param_6 = obj->isFull();\n */\n","compare_result":null,"title_slug":"design-circular-queue","has_notes":false,"flag_type":1}