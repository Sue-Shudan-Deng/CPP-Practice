{"id":399829344,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600896160,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/399829344/","is_pending":"Not Pending","title":"Maximum Product Subarray","memory":"N/A","code":"class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        n = len(nums)\n        dp = [[1 for _ in range(n + 1)] for _ in range(2)]\n        dp[0][0] = 1\n        dp[0][1] = 1\n        for i in range(1, n + 1):\n            # dp[0][i] = max(nums[i - 1], nums[i - 1] * dp[i - 1])\n            # dp[1][i] = min(nums[i - 1], nums[i])\n            if nums[i-1] >= 0:\n                dp[0][i] = max(nums[i-1], dp[0][i-1] * nums[i-1])\n                if dp[1][i-1] != 1:\n                    dp[1][i] = dp[1][i-1] * nums[i-1]\n            else:\n                if dp[1][i-1] != 1:\n                    dp[0][i] = dp[1][i-1] * nums[i-1]\n                dp[1][i] = min(nums[i-1], dp[0][i-1] * nums[i-1])\n                \n        ans = dp[0][1:]\n        while ans[0] == 1:\n            ans.pop(0)\n            \n        return max(ans)","compare_result":"1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"maximum-product-subarray","has_notes":false,"flag_type":1}