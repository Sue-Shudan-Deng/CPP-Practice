{"id":399831307,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600896540,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/399831307/","is_pending":"Not Pending","title":"Maximum Product Subarray","memory":"N/A","code":"class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        n = len(nums)\n        dp = [[1 for _ in range(n + 1)] for _ in range(2)]\n        dp[0][0] = 1\n        dp[0][1] = 1\n        for i in range(1, n + 1):\n            # dp[0][i] = max(nums[i - 1], nums[i - 1] * dp[i - 1])\n            # dp[1][i] = min(nums[i - 1], nums[i])\n            if nums[i-1] >= 0:\n                dp[0][i] = max(nums[i-1], dp[0][i-1] * nums[i-1])\n                if dp[1][i-1] != 1:\n                    dp[1][i] = dp[1][i-1] * nums[i-1]\n            else:\n                if dp[1][i-1] != 1:\n                    dp[0][i] = dp[1][i-1] * nums[i-1]\n                dp[1][i] = min(nums[i-1], dp[0][i-1] * nums[i-1])\n                \n        # print(dp)\n        part1 = dp[0][1:]\n        while part1 and part1[0] == 1:\n            part1.pop(0)\n        part2 = dp[1][1:]\n        while part2 and part2[0] == 1:\n            part2.pop(0)\n        return max(part1 + part2)","compare_result":"1111111011111111111111111101101111111111101110101111111111111111111110111110110111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"maximum-product-subarray","has_notes":false,"flag_type":1}