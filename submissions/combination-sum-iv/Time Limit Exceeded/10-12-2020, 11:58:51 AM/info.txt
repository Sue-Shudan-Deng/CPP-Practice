{"id":407900395,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1602529131,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/407900395/","is_pending":"Not Pending","title":"Combination Sum IV","memory":"N/A","code":"class Solution:\n    def combinationSum4(self, nums: List[int], target: int) -> int:\n        \"\"\"\n        My method: Unbounded knapsack + intentionally added combination duplicates, TLE\n        \"\"\"\n        if not nums or min(nums) > target:\n            return 0\n        nums.sort()\n        prev_num, flag1, flag2 = [], 0, 0\n        dp = [[] for _ in range(target + 1)]\n        for num in nums:\n            if flag1:\n                for n in prev_num:\n                    if num % n == 0:\n                        flag2 = 1\n                        break\n            if flag2:\n                continue\n            for i in range(num, target + 1):\n                if i == num:\n                    dp[num].append(collections.Counter([num]))\n                else:\n                    for c in dp[i - num]:\n                        p = copy.deepcopy(c)\n                        p[num] += 1\n                        dp[i].append(p)\n            flag = 1\n            prev_num.append(num)\n        res = dp[target]\n        def perturbation(x: dict) -> int:\n            p = math.factorial(sum(x.values()))\n            for i in x.values():\n                p /= math.factorial(i)\n            return p\n        return int(sum([perturbation(i) for i in res])) ","compare_result":"11111111111100000","title_slug":"combination-sum-iv","has_notes":false,"flag_type":1}