{"id":287615862,"lang":"python","lang_name":"Python","time":"3 years, 8 months","timestamp":1576972254,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/287615862/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"class LRUCache(object):\n\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        self.cache = [0] * capacity\n        self.LRU = [0] * capacity\n        self.mapping = dict()\n        \n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        index = self.mapping[key]\n        self.LRU[index] += 1\n        return self.cache[index]\n        \n\n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: None\n        \"\"\"\n        index = min(self.LRU)\n        self.LRU[index] += 1\n        print(index)\n        self.mapping[key] = index\n        self.cache[index] = value\n        \n        \n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)","compare_result":"000000000000000000","title_slug":"lru-cache","has_notes":false,"flag_type":1}