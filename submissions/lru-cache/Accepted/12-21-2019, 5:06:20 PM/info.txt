{"id":287627831,"lang":"python","lang_name":"Python","time":"3 years, 8 months","timestamp":1576976780,"status":10,"status_display":"Accepted","runtime":"984 ms","url":"/submissions/detail/287627831/","is_pending":"Not Pending","title":"LRU Cache","memory":"30.2 MB","code":"import numpy as np\nimport time\n\nclass LRUCache(object):\n\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        self.cache = [0] * capacity\n        self.LRU = [0] * capacity\n        self.mapping = [None] * capacity\n        \n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        try:\n            idx = self.mapping.index(key)\n            self.LRU[idx] = time.time()\n            return self.cache[idx]\n        except:\n            return -1\n        \n\n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: None\n        \"\"\"\n        try: \n            idx = self.mapping.index(key)\n        except:\n            idx = np.argmin(self.LRU)\n        self.LRU[idx] = time.time()\n        self.mapping[idx] = key\n        self.cache[idx] = value\n        \n        \n# Your LRUCache object will be instantiated and called as such:\n# obj = LRUCache(capacity)\n# param_1 = obj.get(key)\n# obj.put(key,value)","compare_result":"111111111111111111","title_slug":"lru-cache","has_notes":false,"flag_type":1}