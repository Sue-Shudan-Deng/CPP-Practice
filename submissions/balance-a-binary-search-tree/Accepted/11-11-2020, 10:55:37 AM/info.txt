{"id":419268190,"lang":"python3","lang_name":"Python3","time":"2 years, 9 months","timestamp":1605120937,"status":10,"status_display":"Accepted","runtime":"356 ms","url":"/submissions/detail/419268190/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"20.5 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def balanceBST(self, root: TreeNode) -> TreeNode:\n        # step 1: build inorder sorted array\n        nums = [] \n        def inorder(root):\n            if not root:\n                return \n            inorder(root.left)\n            nums.append(root.val)\n            inorder(root.right)\n        \n        def build_BBST(l, r):\n            if l > r:\n                return None\n            m = l + (r - l) // 2\n            root = TreeNode(nums[m])\n            root.left = build_BBST(l, m - 1)\n            root.right = build_BBST(m + 1, r)\n            return root\n            \n        inorder(root)\n        return build_BBST(0, len(nums) - 1)","compare_result":"1111111111111111","title_slug":"balance-a-binary-search-tree","has_notes":false,"flag_type":1}