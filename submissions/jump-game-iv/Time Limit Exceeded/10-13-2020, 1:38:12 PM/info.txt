{"id":408360854,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1602621492,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/408360854/","is_pending":"Not Pending","title":"Jump Game IV","memory":"N/A","code":"class Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        \"\"\"\n        method 1: DFS, O(n), TLE\n        \"\"\"\n#         n, graph = len(arr), collections.defaultdict(set)\n#         for k, v in enumerate(arr):\n#             graph[v].add(k)\n#         dp = [0 for _ in range(n)]\n        \n#         def dfs(i, step, visited):\n#             if i == n - 1:\n#                 return step\n#             tmp = float(\"inf\")\n#             visited.add(i)\n#             # add 1\n#             if i + 1 < n and not i + 1 in visited:\n#                 tmp = min(tmp, dfs(i + 1, step + 1, visited))\n#             # minus 1\n#             if i - 1 >= 0 and not i - 1 in visited:\n#                 tmp = min(tmp, dfs(i - 1, step + 1, visited))\n#             # go to graph\n#             for j in graph[arr[i]]:\n#                 if j != i + 1 and j != i - 1 and not j in visited:\n#                     tmp = min(tmp, dfs(j, step + 1, visited))\n#             visited.remove(i)\n#             return tmp\n        \n#         return dfs(0, 0, set())\n        \"\"\"\n        method 2: BFS，而且更令人吃惊的是，这里甚至不需要对每个branch单独存visited\n        \"\"\"\n        n, graph = len(arr), collections.defaultdict(set)\n        for k, v in enumerate(arr):\n            graph[v].add(k)\n            \n        queue, ans = collections.deque(), 0\n        queue.append((0, 0))\n        visited = [0 for _ in range(n)]\n        \n        while queue:\n            i, step = queue.popleft()\n            if i == n - 1:\n                return step\n            # add 1\n            if i + 1 < n and not visited[i + 1]:\n                queue.append((i + 1, step + 1))\n                visited[i + 1] = 1\n            # minus 1\n            if i - 1 >= 0 and not visited[i - 1]:\n                queue.append((i - 1, step + 1))\n                visited[i - 1] = 1\n            # go to graph\n            for j in graph[arr[i]]:\n                if j != i + 1 and j != i - 1 and not visited[j]:\n                    queue.append((j, step + 1))\n                    visited[j] = 1\n        \n        return -1","compare_result":"1111111111111111111111111000","title_slug":"jump-game-iv","has_notes":false,"flag_type":1}