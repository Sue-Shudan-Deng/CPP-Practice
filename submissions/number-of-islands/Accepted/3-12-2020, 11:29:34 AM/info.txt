{"id":311859387,"lang":"python","lang_name":"Python","time":"3 years, 5 months","timestamp":1584037774,"status":10,"status_display":"Accepted","runtime":"148 ms","url":"/submissions/detail/311859387/","is_pending":"Not Pending","title":"Number of Islands","memory":"20.8 MB","code":"class Solution(object):\n    def numIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        if not grid:\n            return 0\n        row = len(grid)\n        col = len(grid[0])\n        \n        def neighbors(r, c):\n            for nr, nc in ((r + 1, c), (r, c + 1), (r - 1, c), (r, c - 1)):\n                if 0 <= nr < row and 0 <= nc < col and grid[nr][nc] == \"1\":\n                    yield nr, nc\n        \n        seen = set()\n        def dfs(r, c):\n            if (r, c) in seen:\n                return\n            else:\n                seen.add((r, c))\n                for nr, nc in neighbors(r, c):\n                    if (nr, nc) not in seen:\n                        dfs(nr, nc)\n        \n        cnt = 0\n        for r in range(row):\n            for c in range(col):\n                if grid[r][c] == \"1\" and (r, c) not in seen:\n                    dfs(r, c)\n                    cnt += 1\n        return cnt","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"number-of-islands","has_notes":false,"flag_type":1}