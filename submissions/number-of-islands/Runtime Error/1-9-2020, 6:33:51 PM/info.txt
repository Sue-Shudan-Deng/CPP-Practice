{"id":292829290,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578623631,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/292829290/","is_pending":"Not Pending","title":"Number of Islands","memory":"N/A","code":"# from collections import deque\n# class Solution:\n#     def numIslands(self, grid: List[List[str]]) -> int:\n#         if grid == []:\n#             return 0\n#         row = len(grid)\n#         column = len(grid[0])\n#         queue = deque()\n#         directions = [(0,1), (0,-1), (1,0), (-1,0)]\n#         count = 0\n        \n#         for r in range(row):\n#             for c in range(column):\n#                 if grid[r][c] == \"1\":\n#                     grid[r][c] = \"0\"\n#                     count += 1   \n#                     queue = deque([(r,c)])\n#                     while queue:\n#                         r_base, c_base = queue.popleft()\n#                         for d in range(len(directions)):\n#                             new_r = r_base + directions[d][0]\n#                             new_c = c_base + directions[d][1] \n#                             if not (new_r < 0 or new_r >= row or new_c < 0 or new_c >= column \\\n#                             or grid[new_r][new_c] == \"0\"):\n#                                 grid[new_r][new_c] = \"0\"\n#                                 queue.append((new_r, new_c))\n#         return count\n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        row = len(grid)\n        col = len(grid[0])\n        res = 0\n\n        def dfs(r: int, c: int):\n            grid[r][c] = \"0\"\n            for d in range(len(directions)):\n                new_r = r + directions[d][0]\n                new_c = c + directions[d][1]\n                if new_r < 0 or new_r >= row or new_c < 0 or new_c >= col or grid[new_r][new_c] == \"0\":\n                    continue\n                dfs(new_r, new_c)\n                \n        for r in range(row):\n            for c in range(col):\n                if grid[r][c] == \"1\":\n                    res += 1\n                    dfs(r, c)\n        \n        return res","compare_result":"11000000000000000000000000000000000000000000000","title_slug":"number-of-islands","has_notes":false,"flag_type":1}