{"id":307243757,"lang":"python","lang_name":"Python","time":"3Â years, 6Â months","timestamp":1582768982,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/307243757/","is_pending":"Not Pending","title":"Number of Islands","memory":"N/A","code":"class Solution(object):\n    def numIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n        # method 1: BFS\n        if not grid:\n            return 0\n        row = len(grid)\n        col = len(grid[0])\n        directs = [(0, 1), (1, 0), (0, -1), (-1, 0)] \n        cnt = 0\n        for i in range(row):\n            for j in range(col):\n                if grid[i][j] == '1':\n                    cnt += 1\n                    queue = collections.deque([(i, j)])\n                    while queue:\n                        r, c = queue.popleft()\n                        grid[r][c] = '0'\n                        for d in directs:\n                            new_r, new_c = r + d[0], c + d[1]\n                            if new_r >= 0 and new_r <= row - 1 and new_c >= 0 and new_c <= col - 1 and grid[new_r][new_c] == '1':\n                                queue.append((new_r, new_c))\n        return cnt\n    \n","compare_result":"11111111111111111111111111111111111111000000000","title_slug":"number-of-islands","has_notes":false,"flag_type":1}