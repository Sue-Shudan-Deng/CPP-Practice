{"id":407061763,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1602364203,"status":10,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/407061763/","is_pending":"Not Pending","title":"House Robber III","memory":"15.9 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def rob(self, root: TreeNode) -> int:\n        \"\"\"\n        https://leetcode.com/problems/house-robber-iii/discuss/376297/Python3-Dynamic-Programming-%2B-Depth-First-Search\n        [i, j]: i表示这个节点要用，j表示这个节点不用\n        \"\"\"\n        def dfs(root: TreeNode) -> List[int]:\n            if not root:\n                return [0, 0]\n            left = dfs(root.left)\n            right = dfs(root.right)\n            #             用root.val                       不用root.val\n            x = [root.val + left[1] + right[1], max(left[0], left[1]) + max(right[0], right[1])]\n            return x\n        \n        return max(dfs(root))","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber-iii","has_notes":false,"flag_type":1}