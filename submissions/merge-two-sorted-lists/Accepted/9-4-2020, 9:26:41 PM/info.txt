{"id":391180128,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1599280001,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/391180128/","is_pending":"Not Pending","title":"Merge Two Sorted Lists","memory":"15.1 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n\n// //recursion\n// class Solution {\n// public:\n//     ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n//         if (!l1 || !l2) return l1 ? l1 : l2;\n//         if (l1->val < l2->val) {\n//             l1->next = mergeTwoLists(l1->next, l2); \n//             return l1;\n//         } else {\n//             l2->next = mergeTwoLists(l1, l2->next); \n//             return l2;\n//         }\n//     }\n// };\n\n//iteration\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode* sentinel = new ListNode(-1);\n        ListNode* cur = sentinel;\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                cur->next = new ListNode(l1->val);\n                l1 = l1->next;\n                cur = cur->next;\n            } else {\n                cur->next = new ListNode(l2->val);\n                l2 = l2->next; \n                cur = cur->next;\n            }\n        }\n        if (l1) cur->next = l1;\n        if (l2) cur->next = l2;\n        return sentinel->next;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-two-sorted-lists","has_notes":false,"flag_type":1}