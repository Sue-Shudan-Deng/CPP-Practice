{"id":305800414,"lang":"python","lang_name":"Python","time":"3 years, 6 months","timestamp":1582397300,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/305800414/","is_pending":"Not Pending","title":"Merge Two Sorted Lists","memory":"11.8 MB","code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n# Recursion Version\nclass Solution(object):\n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        sentinel = ListNode(0)\n        head = sentinel\n        while l1 and l2:\n            if l1.val <= l2.val:\n                head.next = ListNode(l1.val)\n                l1 = l1.next\n                head = head.next\n            else:\n                head.next = ListNode(l2.val)\n                l2 = l2.next\n                head = head.next\n        head.next = l1 if l1 else l2\n        return sentinel.next\n    \n# Iterative Version and In-Place\nclass Solution(object):\n    def mergeTwoLists(self, l1, l2):\n        if not l1:\n            return l2\n        if not l2:\n            return l1\n        if l1.val <= l2.val:\n            l1.next = self.mergeTwoLists(l1.next, l2)\n            return l1\n        else:\n            l2.next = self.mergeTwoLists(l1, l2.next)\n            return l2","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-two-sorted-lists","has_notes":false,"flag_type":1}