{"id":407519564,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1602454923,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/407519564/","is_pending":"Not Pending","title":"Maximal Square","memory":"N/A","code":"class Solution:\n    def maximalSquare(self, matrix: List[List[str]]) -> int:\n        \"\"\"\n        method 1: brute-force with dp, https://www.youtube.com/watch?v=vkFUB--OYy0\n        \"\"\"\n        # Step1: use dp to memorize the intergral image\n        row, col = len(matrix), len(matrix[0])\n        if row == 0 or col == 0:\n            return 0\n        dp = [[0 for _ in range(col + 1)] for _ in range(row + 1)]\n        for r in range(1, row + 1):\n            for c in range(1, col + 1):\n                dp[r][c] = dp[r-1][c] + dp[r][c-1] - dp[r-1][c-1] + int(matrix[r-1][c-1])\n        # Step2: check if the current area is such a square\n        ans = 0\n        for r in range(1, row + 1):\n            for c in range(1, col + 1):\n                # for all possible sizes\n                for k in range(min(row - r, col - c), 1, -1):\n                    acc = dp[r+k][c+k] - dp[r][c+k] - dp[r+k][c] + dp[r][c]\n                    if acc == k ** 2:\n                        ans = max(ans, acc)\n                        break\n        return ans","compare_result":"1000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"maximal-square","has_notes":false,"flag_type":1}