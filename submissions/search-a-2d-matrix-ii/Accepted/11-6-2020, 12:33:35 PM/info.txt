{"id":417516949,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1604694815,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/417516949/","is_pending":"Not Pending","title":"Search a 2D Matrix II","memory":"18.8 MB","code":"class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        \"\"\"\n        首先是最显然的做法: 把整个矩阵看作势能场，那么就从山腰处开始搜索\n        之所以从山腰是因为两个方向分别是上下，不像山顶或山底一定是下/上\n        答案选用的是左下，那么这里选择右上的点实现\n        比如要找25，那么搜索的路线是:15->19->22->24->30->26->23->下出界\n        \"\"\"\n        if not matrix:\n            return False \n        row, col = len(matrix), len(matrix[0])\n        r, c = 0, col - 1\n        \n        while r < row and c >= 0: \n            if matrix[r][c] < target:\n                r += 1\n            elif matrix[r][c] > target:\n                c -= 1\n            else:\n                return True\n        return False","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix-ii","has_notes":false,"flag_type":1}