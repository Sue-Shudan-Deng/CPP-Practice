{"id":418867776,"lang":"python","lang_name":"Python","time":"2 years, 9 months","timestamp":1605026381,"status":10,"status_display":"Accepted","runtime":"184 ms","url":"/submissions/detail/418867776/","is_pending":"Not Pending","title":"Largest 1-Bordered Square","memory":"14.6 MB","code":"class Solution(object):\n    def largest1BorderedSquare(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        if not grid or not grid[0]:\n            return 0\n        row, col = len(grid), len(grid[0])\n        dp = [[[0] * 2 for _ in range(col + 1)] for _ in range(row + 1)]\n        # dp[i][j][0]: concecutive 1 from down to top\n        # dp[i][j][1]: \n        \n        for r in range(1, row + 1):\n            for c in range(1, col + 1):\n                if grid[r-1][c-1]:\n                    dp[r][c][0] = dp[r-1][c][0] + 1\n                    dp[r][c][1] = dp[r][c-1][1] + 1\n                    \n        ans = 0\n        for r in range(1, row + 1):\n            for c in range(1, col + 1):\n                if grid[r-1][c-1]:\n                    p1 = min(dp[r][c])\n                    for k in range(p1, 0, -1):\n                        p2 = min(dp[r-k+1][c][1], dp[r][c-k+1][0])\n                        if p2 >= k:\n                            ans = max(ans, k * k)\n                            break\n                        \n        return ans","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-1-bordered-square","has_notes":false,"flag_type":1}