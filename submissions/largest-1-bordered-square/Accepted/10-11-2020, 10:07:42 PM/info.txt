{"id":407646856,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1602479262,"status":10,"status_display":"Accepted","runtime":"228 ms","url":"/submissions/detail/407646856/","is_pending":"Not Pending","title":"Largest 1-Bordered Square","memory":"15.1 MB","code":"class Solution:\n    def largest1BorderedSquare(self, grid: List[List[int]]) -> int:\n        \"\"\"\n        https://www.youtube.com/watch?v=7IkOZOwc-Mc&t=58s, \n        其实类似于matrix square的method 1, 属于brute force + dp, O(n^3)\n        \"\"\"\n        if not grid or len(grid) == 0:\n            return 0\n        row, col = len(grid), len(grid[0])\n        dp = [[[0 for _ in range(2)] for _ in range(col+1)] for _ in range(row+1)]\n        # dp[i][j][0]: number of consecutive 1 from i,j to left\n        # dp[i][j][1]: number of consecutive 1 from i,j to top\n        for r in range(1, row + 1):\n            for c in range(1, col + 1):\n                if grid[r-1][c-1]:\n                    dp[r][c][0] = dp[r][c-1][0] + 1\n                    dp[r][c][1] = dp[r-1][c][1] + 1\n        ans = 0\n        for r in range(1, row + 1):\n            for c in range(1, col + 1):\n                if grid[r-1][c-1]:\n                    size = min(dp[r][c][0], dp[r][c][1])\n                    for k in range(size, 0, -1):\n                        p = min(dp[r-k+1][c][0], dp[r][c-k+1][1])\n                        if p >= k:\n                            ans = max(ans, k ** 2)\n                            break\n        return ans","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-1-bordered-square","has_notes":false,"flag_type":1}