{"id":390976606,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1599236834,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/390976606/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"27 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    \nprivate:\n    map<int, int> m;\n    int size = 0;\n    TreeNode* buildNode(int left, int right, deque<int>& preorder) {\n        if (left > right) return nullptr;\n        int cur = preorder.front();\n        preorder.pop_front();\n        int root_index = m.at(cur);\n        TreeNode* root = new TreeNode(cur);\n        \n        root->left = buildNode(left, root_index-1, preorder);\n        root->right = buildNode(root_index+1, right, preorder);\n        return root;\n    }\n    \npublic:\n    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {\n        size = inorder.size();\n        for (int i=0; i < size; ++i) {\n            m.emplace(inorder.at(i), i);\n        }\n        deque<int> q(preorder.begin(), preorder.end());\n        return buildNode(0, size-1, q);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}