{"id":398600909,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600663562,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/398600909/","is_pending":"Not Pending","title":"Trapping Rain Water II","memory":"N/A","code":"class Solution:\n    def trapRainWater(self, heightMap: List[List[int]]) -> int:\n        priority_queue = []\n        row, col = len(heightMap), len(heightMap[0])\n        dirs = [(0,1), (1,0), (0,-1), (-1,0)]\n        visited = set()\n        ans = 0\n        if row <= 2 or col <= 2:\n            return 0\n        \n        for i in range(col):\n            priority_queue.append((heightMap[0][i], 0, i))\n            priority_queue.append((heightMap[row-1][i], row-1, i))\n        for j in range(1, row-1):\n            priority_queue.append((heightMap[j][0], j, 0))\n            priority_queue.append((heightMap[j][col-1], j, col-1))\n            \n        heapq.heapify(priority_queue)\n        while priority_queue:\n            val, r, c = heapq.heappop(priority_queue)\n            visited.add((r, c))\n            for dr, dc in dirs:\n                if r+dr >= 0 and r+dr < row and c+dc > 0 and c+dc < col and not (r+dr, c+dc) in visited:\n                    ans += max(0, heightMap[r][c] - heightMap[r+dr][c+dc])\n                    heightMap[r+dr][c+dc] = max(heightMap[r][c], heightMap[r+dr][c+dc])\n                    heapq.heappush(priority_queue, (heightMap[r+dr][c+dc], r+dr, c+dc))\n                    \n        return ans\n                    \n                    ","compare_result":"111111111111111111111111111111111111000","title_slug":"trapping-rain-water-ii","has_notes":false,"flag_type":1}