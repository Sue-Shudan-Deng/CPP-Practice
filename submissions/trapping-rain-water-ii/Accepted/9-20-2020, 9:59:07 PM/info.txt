{"id":398605788,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600664347,"status":10,"status_display":"Accepted","runtime":"184 ms","url":"/submissions/detail/398605788/","is_pending":"Not Pending","title":"Trapping Rain Water II","memory":"15.1 MB","code":"class Solution:\n    def trapRainWater(self, heightMap: List[List[int]]) -> int:\n        priority_queue = []\n        row, col = len(heightMap), len(heightMap[0])\n        dirs = [(0,1), (1,0), (0,-1), (-1,0)]\n        visited = [[0 for _ in range(col)] for _ in range(row)]\n        ans = 0\n        if row <= 2 or col <= 2:\n            return 0\n        \n        for i in range(row):\n            for j in range(col):\n                if i == 0 or i == row-1 or j == 0 or j == col-1:\n                    priority_queue.append((heightMap[i][j], i, j))\n                    visited[i][j] = 1\n            \n        heapq.heapify(priority_queue)\n        while priority_queue:\n            val, r, c = heapq.heappop(priority_queue)\n            for dr, dc in dirs:\n                new_r, new_c = r + dr, c + dc\n                if 0 <= new_r < row and 0 <= new_c < col and not visited[new_r][new_c]:\n                    ans += max(0, heightMap[r][c] - heightMap[new_r][new_c])\n                    heightMap[new_r][new_c] = max(heightMap[r][c], heightMap[new_r][new_c])\n                    heapq.heappush(priority_queue, (heightMap[new_r][new_c], new_r, new_c))\n                    visited[new_r][new_c] = 1\n        return ans\n                    \n                    ","compare_result":"111111111111111111111111111111111111111","title_slug":"trapping-rain-water-ii","has_notes":false,"flag_type":1}