{"id":287606769,"lang":"python","lang_name":"Python","time":"3 years, 8 months","timestamp":1576968929,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/287606769/","is_pending":"Not Pending","title":"Trapping Rain Water II","memory":"N/A","code":"import copy\n\nclass Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        up_left = copy.deepcopy(heightMap)\n        up_right = copy.deepcopy(heightMap)\n        bot_right = copy.deepcopy(heightMap)\n        bot_left = copy.deepcopy(heightMap)\n\n        for r in range(1, len(heightMap)):\n            for c in range(1, len(heightMap[0])):\n                up_left[r][c] = max(up_left[r][c], min(up_left[r-1][c],up_left[r][c-1]))\n                \n        for r in range(len(heightMap)-2, -1, -1):\n            for c in range(1, len(heightMap[0])):                \n                bot_left[r][c] = max(bot_left[r][c], min(bot_left[r+1][c],bot_left[r][c-1]))                \n                \n        for r in range(1, len(heightMap)):\n            for c in range(len(heightMap[0])-2, -1, -1):\n                up_right[r][c] = max(up_right[r][c], min(up_right[r-1][c],up_right[r][c+1]))\n        \n        for r in range(len(heightMap)-2, -1, -1):\n            for c in range(len(heightMap[0])-2, -1, -1):\n                bot_right[r][c] = max(bot_right[r][c], min(bot_right[r+1][c],bot_right[r][c+1]))\n\n        ans = 0\n\n        for r in range(len(heightMap)):\n            for c in range(len(heightMap[0])):\n                ans += min(up_left[r][c], bot_right[r][c], bot_left[r][c], up_right[r][c]) - heightMap[r][c]\n\n        return ans","compare_result":"1111111111111111111111111110000000000001","title_slug":"trapping-rain-water-ii","has_notes":false,"flag_type":1}