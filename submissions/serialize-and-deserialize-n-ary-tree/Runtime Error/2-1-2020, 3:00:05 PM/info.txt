{"id":299363922,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1580598005,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/299363922/","is_pending":"Not Pending","title":"Serialize and Deserialize N-ary Tree","memory":"N/A","code":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\nclass Codec:\n\n    def serialize(self, root: 'Node') -> str:\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: Node\n        :rtype: str\n        \"\"\"\n        if not root:\n            return \"\"\n        stack, output = [root], []\n        while stack:\n            root = stack.pop()\n            length = 0\n            for _ in root.children:\n                length += 1\n            value = str(length) + \" \" + str(root.val) + \" \"\n            output.append(value)\n            for i in range(length-1, -1, -1):\n                stack.append(root.children[i])\n        return \"\".join(output)\n        \n\n    def deserialize(self, data: str) -> 'Node':\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: Node\n        \"\"\"\n        return Node(\"1\")\n        \n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.deserialize(codec.serialize(root))","compare_result":"0000000000000000000000000000000000000","title_slug":"serialize-and-deserialize-n-ary-tree","has_notes":false,"flag_type":1}