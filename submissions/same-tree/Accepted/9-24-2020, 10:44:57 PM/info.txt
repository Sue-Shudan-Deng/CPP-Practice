{"id":400437698,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1601012697,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/400437698/","is_pending":"Not Pending","title":"Same Tree","memory":"13.8 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        \n        if not p and not q:\n            return True\n        if not p or not q:\n            return False\n        l = self.isSameTree(p.left, q.left)\n        r = self.isSameTree(p.right, q.right)\n        return p.val == q.val and l and r\n#         \"\"\"\n#         Stack\n#         \"\"\"\n#         def check(p, q):\n#             # if both are None\n#             if not p and not q:\n#                 return True\n#             # one of p and q is None\n#             if not q or not p:\n#                 return False\n#             if p.val != q.val:\n#                 return False\n#             return True\n        \n#         stack = [(p, q)]\n#         while stack:\n#             p, q = stack.pop()\n#             if not check(p, q):\n#                 return False\n#             if p and q:\n#                 stack.append((p.right, q.right))\n#                 stack.append((p.left, q.left))\n#         return True","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"same-tree","has_notes":false,"flag_type":1}