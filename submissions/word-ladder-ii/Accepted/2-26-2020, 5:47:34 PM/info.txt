{"id":307239809,"lang":"python3","lang_name":"Python3","time":"3 years, 6 months","timestamp":1582768054,"status":10,"status_display":"Accepted","runtime":"148 ms","url":"/submissions/detail/307239809/","is_pending":"Not Pending","title":"Word Ladder II","memory":"18.4 MB","code":"class Solution:\n    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:\n        if not beginWord or not endWord or not wordList or not endWord in wordList:\n            return []\n        L = len(beginWord)\n        all_combo = collections.defaultdict(list)\n        for word in wordList:\n            for i in range(L):\n                all_combo[word[:i] + \"*\" + word[i+1:]].append(word)\n        layer = dict()\n        layer[beginWord] = [[beginWord]]\n        wordSet = set(wordList)\n        while layer:\n            # 每次都重新创建一个\n            newlayer = collections.defaultdict(list)\n            for word in layer.keys():\n                if word == endWord:\n                    return layer[word]\n                for i in range(L):\n                    newwords = all_combo[word[:i] + \"*\" + word[i+1:]]\n                    for newword in newwords:\n                        if newword in wordSet:\n                            newlayer[newword] += [j + [newword] for j in layer[word]]\n            wordSet -= set(newlayer.keys())\n            layer = newlayer\n        return []","compare_result":"111111111111111111111111111111111111111","title_slug":"word-ladder-ii","has_notes":false,"flag_type":1}