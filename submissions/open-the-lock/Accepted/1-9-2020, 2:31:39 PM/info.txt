{"id":292774115,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578609099,"status":10,"status_display":"Accepted","runtime":"1496 ms","url":"/submissions/detail/292774115/","is_pending":"Not Pending","title":"Open the Lock","memory":"14 MB","code":"from collections import deque\nclass Solution:\n    def openLock(self, deadends: List[str], target: str) -> int:\n        # 生成一个generator\n        def neighbors(node: str):\n            for i in range(4):\n                for d in (-1, 1):\n                    x = (int(node[i]) + d) % 10\n                    yield node[:i] + str(x) + node[i+1:]\n        \n        queue = deque([(\"0000\", 0)])\n        visited = {\"0000\"}\n        while queue:\n            node, depth = queue.popleft()\n            if node == target:\n                return depth\n            if node in deadends:\n                continue\n            for n in neighbors(node):\n                if n not in visited:\n                    visited.add(n)\n                    queue.append((n, depth+1))\n        return -1","compare_result":"1111111111111111111111111111111111111111111","title_slug":"open-the-lock","has_notes":false,"flag_type":1}