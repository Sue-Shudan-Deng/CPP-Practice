{"id":292993592,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578678014,"status":10,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/292993592/","is_pending":"Not Pending","title":"Keys and Rooms","memory":"13.1 MB","code":"class Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        seen = [False] * len(rooms)\n        seen[0] = True\n        stack = [0]\n        #At the beginning, we have a todo list \"stack\" of keys to use.\n        #'seen' represents at some point we have entered this room.\n        while stack:  #While we have keys...\n            node = stack.pop() # get the next key 'node'\n            for nei in rooms[node]: # For every key in room # 'node'...\n                if not seen[nei]: # ... that hasn't been used yet\n                    seen[nei] = True # mark that we've entered the room\n                    stack.append(nei) # add the key to the todo list\n        return all(seen) # Return true iff we've visited every room","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"keys-and-rooms","has_notes":false,"flag_type":1}