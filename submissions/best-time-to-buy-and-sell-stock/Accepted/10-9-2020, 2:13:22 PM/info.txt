{"id":406690264,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1602278002,"status":10,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/406690264/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock","memory":"14.9 MB","code":"class Solution:\n    # \"\"\"\n    # method 1: one pass\n    # \"\"\"\n    # def maxProfit(self, prices: List[int]) -> int:\n    #     minprice = float(\"inf\")\n    #     maxprofit = 0\n    #     for price in prices:\n    #         if price <= minprice:\n    #             minprice = price\n    #             continue\n    #         if price - minprice >= maxprofit:\n    #             maxprofit = price - minprice\n    #     return maxprofit\n    \n    # \"\"\"\n    # method 2: DP. 参考https://www.youtube.com/watch?v=8pVhUpF1INw method2\n    # \"\"\"\n    # def maxProfit(self, prices: List[int]) -> int:\n    #     n = len(prices)\n    #     minprice = float(\"inf\")\n    #     dp = [0 for _ in range(n + 1)]\n    #     for i in range(1, n + 1):\n    #         minprice = min(minprice, prices[i-1])\n    #         dp[i] = max(dp[i-1], prices[i-1] - minprice)\n    #     return dp[-1]\n    \n#     \"\"\"\n#     method 3: DP. 参考https://www.youtube.com/watch?v=8pVhUpF1INw method3\n#     \"\"\"\n#     def maxProfit(self, prices: List[int]) -> int:\n#         if not prices:\n#             return 0\n#         n = len(prices)\n#         gain = [0] + [prices[i] - prices[i-1] for i in range(1, n)]\n#         dp = [0 for _ in range(n+1)]\n#         for i in range(1, n+1):\n#             dp[i] = max(dp[i-1] + gain[i-1], gain[i-1])\n#         return max(dp[1:])\n    \n    \"\"\"\n    method 4. DP. 本人认为最直接的DP，但需要依赖一点数学，跟method 2等价\n    \"\"\"\n    def maxProfit(self, prices: List[int]) -> int:\n        # dp表示截止到i为止，最大的profit是多少，那么就可以包含num[i]或者不包含num[i]\n        # dp[i] = max(dp[i-1], max(prices[i] - prices[j] for j in range(i-1)))\n        #       = max(dp[i-1], prices[i] + max(-prices[j]))\n        # 由于i > j，那么可以用一个变量tmp来专门迭代max(-prices[j])\n        n = len(prices)\n        dp = [0 for _ in range(n+1)]\n        tmp = float(\"-inf\")\n        for i in range(1, n+1):\n            dp[i] = max(dp[i-1], prices[i-1] + tmp)\n            tmp = max(tmp, -prices[i-1])\n        return dp[-1]","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"best-time-to-buy-and-sell-stock","has_notes":false,"flag_type":1}