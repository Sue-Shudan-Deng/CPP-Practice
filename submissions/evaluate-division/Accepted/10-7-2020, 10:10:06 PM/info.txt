{"id":406007410,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1602133806,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/406007410/","is_pending":"Not Pending","title":"Evaluate Division","memory":"8.1 MB","code":"class Solution {\n    \nprivate:\n    pair<string, double>& find(string node, map<string, pair<string, double>>& parent) {\n        if (node != parent[node].first) {\n            auto& p = find(parent[node].first, parent);\n            parent[node].first = p.first;\n            parent[node].second *= p.second;\n        }\n        return parent[node];\n    }\n    \npublic:\n    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {\n        map<string, pair<string, double>> parent;\n        for (auto i = 0; i < equations.size(); ++i) {\n            auto e = equations[i];\n            const string& u = e[0]; \n            const string& v = e[1];\n            const double k = values[i];\n            if (!parent.count(u) && !parent.count(v)) {\n                // second node as parent\n                parent[u] = {v, k};\n                parent[v] = {v, 1.0};\n            } else if (!parent.count(u)) {\n                // second node as parent\n                parent[u] = {v, k};\n            } else if (!parent.count(v)) {\n                // first node as parent\n                parent[v] = {u, 1 / k};\n            } else {\n                auto& pu = find(u, parent);\n                auto& pv = find(v, parent);\n                parent[pu.first] = {pv.first, values[i] / pu.second * pv.second};\n            }\n        }\n        \n        vector<double> ans;\n        for (const auto& pair : queries) {\n            const string& X = pair[0];\n            const string& Y = pair[1];\n            if (!parent.count(X) || !parent.count(Y)) {\n                ans.push_back(-1.0);\n                continue;\n            }\n            auto& rX = find(X, parent); // {rX, X / rX}\n            auto& rY = find(Y, parent); // {rY, Y / rY}\n            if (rX.first != rY.first)\n                ans.push_back(-1.0);\n            else // X / Y = (X / rX / (Y / rY))\n                ans.push_back(rX.second / rY.second);\n        }\n        return ans;\n    }\n};","compare_result":"1111111111111111111111","title_slug":"evaluate-division","has_notes":false,"flag_type":1}