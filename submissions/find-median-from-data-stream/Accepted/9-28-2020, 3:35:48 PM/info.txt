{"id":401983928,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1601332548,"status":10,"status_display":"Accepted","runtime":"196 ms","url":"/submissions/detail/401983928/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"25.4 MB","code":"class MedianFinder:\n    \"\"\"\n    这个解法太巧妙了\n    \"\"\"\n    def __init__(self):\n        self.small = []  # the smaller half of the list, max heap (invert min-heap)\n        self.large = []  # the larger half of the list, min heap\n\n    def addNum(self, num):\n        if len(self.small) == len(self.large):\n            heapq.heappush(self.small, -num)\n            largest_in_small = -heapq.heappop(self.small)\n            heapq.heappush(self.large, largest_in_small)\n        else:\n            heapq.heappush(self.large, num)\n            smallest_in_large = heapq.heappop(self.large)\n            heapq.heappush(self.small, -smallest_in_large)\n\n    def findMedian(self):\n        if len(self.small) == len(self.large):\n            return float(self.large[0] - self.small[0]) / 2.0\n        else:\n            return float(self.large[0])\n\n# Your MedianFinder object will be instantiated and called as such:\n# obj = MedianFinder()\n# obj.addNum(num)\n# param_2 = obj.findMedian()","compare_result":"111111111111111111","title_slug":"find-median-from-data-stream","has_notes":false,"flag_type":1}