{"id":400389226,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1601004326,"status":10,"status_display":"Accepted","runtime":"592 ms","url":"/submissions/detail/400389226/","is_pending":"Not Pending","title":"Largest Sum of Averages","memory":"14.1 MB","code":"class Solution:\n    def largestSumOfAverages(self, A: List[int], K: int) -> float:\n        \"\"\"\n        由于这里是at most k parts, 因此神奇的可以直接用1维dp而无须K维dp\n        但为了清晰还是用K维dp做\n        dp[k][i] = dp[k-1][j] + average(j, i)\n        \"\"\"\n        n = len(A)\n        if n == 0:\n            return 0.0\n        prefix_sum = [0]\n        for i in range(n):\n            prefix_sum.append(prefix_sum[-1] + A[i])\n        \n        def average(i, j):\n            if j == i:\n                return 0\n            else:\n                return (prefix_sum[j] - prefix_sum[i]) / (j - i)\n            \n        dp = [[0 for _ in range(n + 1)] for _ in range(K)]\n        # 初始值：分成1个part，即不分\n        dp[0] = [average(0, i) for i in range(n + 1)]\n        \n        for k in range(1, K):\n            for i in range(1, n + 1):\n                for j in range(1, i):\n                    dp[k][i] = max(dp[k][i], dp[k-1][j] + average(j, i))\n                    \n        return dp[-1][-1]","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"largest-sum-of-averages","has_notes":false,"flag_type":1}