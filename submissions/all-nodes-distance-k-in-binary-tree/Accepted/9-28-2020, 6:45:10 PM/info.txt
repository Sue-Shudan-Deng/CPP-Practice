{"id":402039545,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1601343910,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/402039545/","is_pending":"Not Pending","title":"All Nodes Distance K in Binary Tree","memory":"14.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def distanceK(self, root: TreeNode, target: TreeNode, K: int) -> List[int]:\n        # step 1: build graph with pre-order\n        graph = collections.defaultdict(set)\n        def dfs(parent, child):\n            if parent and child:\n                graph[parent.val].add(child.val)\n                graph[child.val].add(parent.val)\n            if child.left:\n                dfs(child, child.left)\n            if child.right:\n                dfs(child, child.right)\n            \n        dfs(None, root)\n        # step 2: bfs\n        queue, res, visited = collections.deque(), [], set()\n        queue.append((target.val, 0))\n        while queue:\n            cur, step = queue.popleft()\n            if cur in visited:\n                continue\n            if step == K:\n                res.append(cur)\n                continue\n            visited.add(cur)\n            for nxt in graph[cur]:\n                queue.append((nxt, step + 1))\n    \n        return res","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"all-nodes-distance-k-in-binary-tree","has_notes":false,"flag_type":1}