{"id":406289204,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1602189897,"status":10,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/406289204/","is_pending":"Not Pending","title":"Word Search II","memory":"28.3 MB","code":"class Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        \n        trie = {}\n        # Step 1: build a trie with words\n        for w in words:\n            node = trie\n            for c in w:\n                if not c in node:\n                    node[c] = {}\n                node = node[c]\n            # 这一步有点牛逼\n            node['#'] = w\n            \n        # Step 2: backtracking with trie\n        matched_words = []\n        row, col = len(board), len(board[0])\n        \n        def backtrack(r, c, parent):\n            letter = board[r][c]\n            currNode = parent[letter]\n            # 这步需要重点理解，非常巧妙\n            word_match = currNode.pop('#', False)\n            if word_match:\n                matched_words.append(word_match)\n            board[r][c] = '#'\n            for new_r, new_c in ((r, c + 1), (r + 1, c), (r, c - 1), (r - 1, c)):\n                if 0 <= new_r < row and 0 <= new_c < col and board[new_r][new_c] in currNode:\n                    backtrack(new_r, new_c, currNode)\n            board[r][c] = letter\n            \n        for r in range(row):\n            for c in range(col):\n                if board[r][c] in trie:\n                    backtrack(r, c, trie)\n                    \n        return matched_words","compare_result":"111111111111111111111111111111111111","title_slug":"word-search-ii","has_notes":false,"flag_type":1}