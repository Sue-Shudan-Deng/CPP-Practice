{"id":307301393,"lang":"python3","lang_name":"Python3","time":"3 years, 6 months","timestamp":1582780968,"status":10,"status_display":"Accepted","runtime":"220 ms","url":"/submissions/detail/307301393/","is_pending":"Not Pending","title":"Word Search II","memory":"26.9 MB","code":"class Solution:\n    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:\n        WORD_KEY = '$'\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for letter in word:\n                # retrieve the next node; If not found, create a empty node.\n                node = node.setdefault(letter, {})\n            # mark the existence of a word in trie node\n            node[WORD_KEY] = word\n        \n        rowNum = len(board)\n        colNum = len(board[0])\n        \n        matchedWords = []\n        \n        def backtracking(row, col, parent):    \n            \n            letter = board[row][col]\n            currNode = parent[letter]\n            \n            # check if we find a match of word\n            word_match = currNode.pop(WORD_KEY, False)\n            if word_match:\n                # also we removed the matched word to avoid duplicates,\n                #   as well as avoiding using set() for results.\n                matchedWords.append(word_match)\n            \n            # Before the EXPLORATION, mark the cell as visited \n            board[row][col] = '#'\n            \n            # Explore the neighbors in 4 directions, i.e. up, right, down, left\n            for (rowOffset, colOffset) in [(-1, 0), (0, 1), (1, 0), (0, -1)]:\n                newRow, newCol = row + rowOffset, col + colOffset     \n                if newRow < 0 or newRow >= rowNum or newCol < 0 or newCol >= colNum:\n                    continue\n                if not board[newRow][newCol] in currNode:\n                    continue\n                backtracking(newRow, newCol, currNode)\n        \n            # End of EXPLORATION, we restore the cell\n            board[row][col] = letter\n        \n            # Optimization: incrementally remove the matched leaf node in Trie.\n            if not currNode:\n                parent.pop(letter)\n\n        for row in range(rowNum):\n            for col in range(colNum):\n                # starting from each of the cells\n                if board[row][col] in trie:\n                    backtracking(row, col, trie)\n        \n        return matchedWords ","compare_result":"111111111111111111111111111111111111","title_slug":"word-search-ii","has_notes":false,"flag_type":1}