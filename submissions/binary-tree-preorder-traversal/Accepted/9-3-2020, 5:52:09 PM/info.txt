{"id":390700945,"lang":"cpp","lang_name":"C++","time":"3 years","timestamp":1599180729,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/390700945/","is_pending":"Not Pending","title":"Binary Tree Preorder Traversal","memory":"8.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\n// Recursion 最好的写法\n\n// class Solution {\n//     private:\n//         void preorderTraversal(TreeNode* root, vector<int> &ret) {\n//             if (!root) return;\n//             ret.push_back(root->val);\n//             preorderTraversal(root->left, ret);\n//             preorderTraversal(root->right, ret);        \n//         }\n\n//     public:\n//         vector<int> preorderTraversal(TreeNode* root) {\n//             vector<int> ret;\n//             preorderTraversal(root, ret);\n//             return ret;\n//         }\n// };\n\n// Recursion 常规的写法\n    \n// class Solution {\n    \n// public:\n//     vector<int> preorderTraversal(TreeNode* root) {\n//         vector<int> ret;\n//         if (root) {\n//             return ret;\n//         } else {\n//             ret.push_back(root->val);\n//             vector<int> v1 = preorderTraversal(root->left);\n//             vector<int> v2 = preorderTraversal(root->right);\n//             ret.insert(ret.end(), v1.begin(), v1.end());\n//             ret.insert(ret.end(), v2.begin(), v2.end());\n//             return ret;\n//         }\n//     }\n// };\n\n// Interation 常规写法\n\nclass Solution {\npublic:\n    vector<int> preorderTraversal(TreeNode* root) {\n        vector<int> ret;\n        if (!root) {\n            return ret;\n        } else {\n            std::stack<TreeNode*> s;\n            s.push(root);\n            TreeNode* cur;\n            while (!s.empty()) {\n                cur = s.top();\n                s.pop();\n                ret.push_back(cur->val);\n                if (cur->right) s.push(cur->right);\n                if (cur->left) s.push(cur->left);\n            }\n            return ret;\n        }\n    }\n};\n\n\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-preorder-traversal","has_notes":false,"flag_type":1}