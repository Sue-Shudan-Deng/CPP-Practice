{"id":292508069,"lang":"python3","lang_name":"Python3","time":"3 years, 8 months","timestamp":1578533096,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/292508069/","is_pending":"Not Pending","title":"Binary Tree Preorder Traversal","memory":"12.7 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n# class Solution:\n#     def preorderTraversal(self, root: TreeNode) -> List[int]:\n#         if root == None:\n#             return []\n#         elif root.left == None and root.right == None:\n#             return [root.val]\n#         else:\n#             rootnode = [root.val]\n#             leftnode = self.preorderTraversal(root.left)\n#             rightnode = self.preorderTraversal(root.right)\n#             return rootnode + leftnode + rightnode \n\n# https://www.cnblogs.com/bjwu/p/9284534.html\n# class Solution:\n#     def preorderTraversal(self, root: TreeNode) -> List[int]:\n#         if root == None:\n#             return []\n#         else:\n#             stack = [root]\n#             res = []\n#             while stack:\n#                 rootnode = stack.pop()\n#                 if rootnode != None:\n#                     res.append(rootnode.val)\n#                     # 注意这里因为pop的出栈顺序是从右到左，\n#                     # 所以右结点先进栈，可以后被访问\n#                     if rootnode.right != None:\n#                         stack.append(rootnode.right)\n#                     if rootnode.left != None:\n#                         stack.append(rootnode.left)\n#             return res\n\nclass Solution:\n    def preorderTraversal(self, root: TreeNode) -> List[int]:\n        if root is None:\n            return []\n        else:\n            stack = []\n            res = []\n            curr = root\n            while stack or curr:\n                if curr:\n                    res.append(curr.val)\n                    stack.append(curr.right)\n                    curr = curr.left\n                else:\n                    curr = stack.pop()\n        return res","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-preorder-traversal","has_notes":false,"flag_type":1}