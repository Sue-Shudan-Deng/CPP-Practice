{"id":390673364,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1599174994,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/390673364/","is_pending":"Not Pending","title":"Binary Tree Preorder Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> preorderTraversal(TreeNode* root) {\n        if (root == nullptr) {\n            vector<int> ret;\n            return ret;\n        }\n        if (root->left == nullptr && root->right == nullptr) {\n            vector<int> ret{root->val};\n            return ret;\n        }\n        \n        vector<int> ret{root->val};\n        vector<int> v1 = preorderTraversal(root->right);\n        vector<int> v2 = preorderTraversal(root->left);\n        ret.insert(ret.end(), v1.begin(), v1.end());\n        ret.insert(ret.end(), v2.begin(), v2.end());\n        return ret;\n    }\n};","compare_result":"11111101111001001011011110001000001001000001001001011001001011011100","title_slug":"binary-tree-preorder-traversal","has_notes":false,"flag_type":1}