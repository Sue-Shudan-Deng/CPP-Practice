{"id":292484124,"lang":"python3","lang_name":"Python3","time":"3 years, 8 months","timestamp":1578526926,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/292484124/","is_pending":"Not Pending","title":"Binary Tree Preorder Traversal","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n# class Solution:\n#     def preorderTraversal(self, root: TreeNode) -> List[int]:\n#         if root == None:\n#             return []\n#         elif root.left == None and root.right == None:\n#             return [root.val]\n#         else:\n#             rootnode = [root.val]\n#             leftnode = self.preorderTraversal(root.left)\n#             rightnode = self.preorderTraversal(root.right)\n#             return rootnode + leftnode + rightnode \n\nclass Solution:\n    def preorderTraversal(self, root: TreeNode) -> List[int]:\n        if root == None:\n            return []\n        else:\n            stack = [root]\n            res = []\n            while stack:\n                rootnode = stack.pop()\n                res.append(rootnode.val)\n                if rootnode.left != None:\n                    stack.append(rootnode.left)\n                if rootnode.right != None:\n                    stack.append(rootnode.right)\n            return res","compare_result":"11111101111001001011011110001000001001000001001001011001001011011100","title_slug":"binary-tree-preorder-traversal","has_notes":false,"flag_type":1}