{"id":306236857,"lang":"python3","lang_name":"Python3","time":"3 years, 6 months","timestamp":1582500061,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/306236857/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"N/A","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nfrom queue import PriorityQueue\n\nclass Node:\n    def __init__(self, val, node):\n        self.val = val\n        self.node = node\n    def __lt__(self, other):\n        return self.val < other.val\n\n# method 1: priority queue\nclass Solution:\n    def mergeKLists(self, lists: List[ListNode]) -> ListNode:\n        \"\"\"\n        注：python3和python里面关于priority queue的实现不同\n        并且python3里面\"<\"需要自行重载\n        \"\"\"\n        head = point = ListNode(0)\n        q = PriorityQueue()\n        for l in lists:\n            if l:\n                q.put(Node(l.val, l))\n        while not q.empty():\n            node = q.get()\n            node = node.node\n            point.next = ListNode(node.val)\n            point = point.next\n            node = node.next\n            if node:\n                q.put(Node(node.val, node))\n        return head.next\n    \n# method 2: divide & conquer + merge 2 sorted list\nclass Solution:\n    def merge2Lists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        \"\"\"\n        in-place\n        \"\"\"\n        if not l2:\n            return l1\n        if not l1:\n            return l2\n        if l1.val < l2.val:\n            l1.next = self.merge2Lists(l1.next, l2)\n        else:\n            l2.next = self.merge2Lists(l1, l2.next)\n        return l1 if l1.val < l2.val else l2\n    \n    def mergeKLists(self, lists: List[ListNode]) -> ListNode:\n        amount = len(lists)\n        interval = 1\n        while interval < amount:\n            for i in range(0, amount - interval, interval * 2):\n                lists[i] = self.merge2Lists(lists[i], lists[i + interval])\n            interval *= 2\n        return lists[0] if amount > 0 else lists","compare_result":"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"merge-k-sorted-lists","has_notes":false,"flag_type":1}