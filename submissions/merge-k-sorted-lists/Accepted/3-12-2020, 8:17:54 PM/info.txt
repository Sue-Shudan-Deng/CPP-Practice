{"id":311966642,"lang":"python3","lang_name":"Python3","time":"3 years, 5 months","timestamp":1584069474,"status":10,"status_display":"Accepted","runtime":"144 ms","url":"/submissions/detail/311966642/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"22.7 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def merge2Lists(self, l1: ListNode, l2: ListNode) -> ListNode:\n        \"\"\"\n        in-place\n        \"\"\"\n        if not l2:\n            return l1\n        if not l1:\n            return l2\n        if l1.val < l2.val:\n            l1.next = self.merge2Lists(l1.next, l2)\n        else:\n            l2.next = self.merge2Lists(l1, l2.next)\n        return l1 if l1.val < l2.val else l2\n    \n    def mergeKLists(self, lists: List[ListNode]) -> ListNode:\n        amount = len(lists)\n        interval = 1\n        while interval < amount:\n            for i in range(0, amount - interval, interval * 2):\n                lists[i] = self.merge2Lists(lists[i], lists[i + interval])\n            interval *= 2\n        return lists[0] if amount > 0 else None","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false,"flag_type":1}