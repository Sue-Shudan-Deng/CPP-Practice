{"id":402086325,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1601351650,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/402086325/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"13.7 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\n    \nprivate:\n    ListNode* merge2Lists(ListNode* list1, ListNode* list2) {\n        if (!list1) {\n            return list2;\n        }\n        if (!list2) {\n            return list1;\n        }\n        if (list1->val < list2->val) {\n            list1->next = merge2Lists(list1->next, list2);\n            return list1;\n        } else {\n            list2->next = merge2Lists(list1, list2->next);\n            return list2;\n        }\n    }\n    \npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        int interval = 1, n = lists.size();\n        while (interval < n) {\n            for (int i = 0; i < n - interval; i += interval * 2) {\n                lists[i] = merge2Lists(lists[i], lists[i + interval]); \n            }\n            interval *= 2;\n        }\n        return lists.empty() ? nullptr : lists[0];\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false,"flag_type":1}