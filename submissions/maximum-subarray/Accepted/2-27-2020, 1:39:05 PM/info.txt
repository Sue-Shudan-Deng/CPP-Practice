{"id":307493275,"lang":"python3","lang_name":"Python3","time":"3 years, 6 months","timestamp":1582839545,"status":10,"status_display":"Accepted","runtime":"168 ms","url":"/submissions/detail/307493275/","is_pending":"Not Pending","title":"Maximum Subarray","memory":"13.6 MB","code":"class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        def crossSum(left, right, p):\n            if left == right:\n                return nums[left]\n            leftsum, currsum = float(\"-inf\"), 0\n            for i in range(p, left - 1, -1):\n                currsum += nums[i]\n                leftsum = max(leftsum, currsum)\n            rightsum, currsum = float(\"-inf\"), 0\n            for i in range(p + 1, right + 1, 1):\n                currsum += nums[i]\n                rightsum = max(rightsum, currsum)\n            return leftsum + rightsum\n        def helper(left, right):\n            if left == right:\n                return nums[left]\n            p = (left + right) // 2\n            leftsum = helper(left, p)\n            rightsum = helper(p + 1, right)\n            crosssum = crossSum(left, right, p)\n            return max(leftsum, rightsum, crosssum)\n        return helper(0, len(nums) - 1)","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-subarray","has_notes":false,"flag_type":1}