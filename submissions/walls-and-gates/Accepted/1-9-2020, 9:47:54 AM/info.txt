{"id":292709300,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578592074,"status":10,"status_display":"Accepted","runtime":"288 ms","url":"/submissions/detail/292709300/","is_pending":"Not Pending","title":"Walls and Gates","memory":"15.4 MB","code":"from collections import deque\nclass Solution:\n    def wallsAndGates(self, rooms: List[List[int]]) -> None:\n        \"\"\"\n        Do not return anything, modify rooms in-place instead.\n        \"\"\"\n        if rooms == []:\n            return\n        gate = 0\n        wall = -1\n        inf = 2147483647\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        queue = deque()\n        row = len(rooms)\n        column = len(rooms[0])\n        \n        for r in range(row):\n            for c in range(column):\n                if rooms[r][c] == gate:\n                    queue.append((r, c))\n        \n        while queue:\n            r, c = queue.popleft()\n            for d in range(len(directions)):\n                new_r = r + directions[d][0]\n                new_c = c + directions[d][1]\n                if new_r < 0 or new_r >= row or new_c < 0 or new_c >= column \\\n                or rooms[new_r][new_c] != inf:\n                    continue\n                queue.append((new_r, new_c))\n                rooms[new_r][new_c] = rooms[r][c] + 1\n        ","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"walls-and-gates","has_notes":false,"flag_type":1}