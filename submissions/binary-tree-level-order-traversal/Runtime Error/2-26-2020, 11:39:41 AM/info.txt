{"id":307156251,"lang":"python","lang_name":"Python","time":"3 years, 6 months","timestamp":1582745981,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/307156251/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        res = []\n        def helper(root, level = 0):\n            if root:\n                if len(res) < level + 1:\n                    res.append([])\n                res[level].append(root.val)\n                helper(root.left, level + 1)\n                helper(root.right, level + 1)\n            return res\n        return helper(root)\n    \nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        res, level = [], 0\n        queue = collections.deque([root])\n        while queue:\n            if len(res) < level + 1:\n                res.append([])\n            for _ in range(len(queue)):\n                root = queue.popleft()\n                res[level].append(root.val)\n                if root.left:\n                    queue.append(root.left)\n                if root.right:\n                    queue.append(root.right)\n            level += 1\n        return res","compare_result":"1000000000000000000000000000000000","title_slug":"binary-tree-level-order-traversal","has_notes":false,"flag_type":1}