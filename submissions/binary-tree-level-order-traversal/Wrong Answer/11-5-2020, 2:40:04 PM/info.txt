{"id":417208123,"lang":"cpp","lang_name":"C++","time":"2 years, 10 months","timestamp":1604616004,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/417208123/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    \n// private:\n//     void dfs(TreeNode* root, int depth, vector<vector<int>>& ans) {\n//         if (!root) {\n//             return;\n//         }\n//         while (ans.size() <= depth) {\n//             ans.push_back({});\n//         }\n//         ans[depth].push_back(root->val);\n//         dfs(root->left, depth + 1, ans);\n//         dfs(root->right, depth + 1, ans);\n//     }\n    \n// public:\n//     // dfs\n//     vector<vector<int>> levelOrder(TreeNode* root) {\n//         vector<vector<int>> ans;\n//         dfs(root, 0, ans);\n//         return ans;\n//     }\n    \n//     bfs\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        vector<vector<int>> ans = {{}};\n        if (!root) {\n            return ans; \n        }\n        int level = 0;\n        deque<TreeNode*> q;\n        q.push_back(root);\n        while (!q.empty()) {\n            int size = q.size();\n            if (ans.size() < level + 1) {\n                ans.push_back({});\n            }\n            for (auto i = 0; i < size; ++i) {\n                TreeNode* root = q.front();\n                q.pop_front();\n                ans[level].push_back(root->val);\n                if (root->left) {\n                    q.push_back(root->left);\n                }\n                if (root->right) {\n                    q.push_back(root->right);   \n                }\n            }\n            ++level;\n        }\n        return ans;\n    }\n};","compare_result":"1011111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal","has_notes":false,"flag_type":1}