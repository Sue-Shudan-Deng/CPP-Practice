{"id":292520118,"lang":"python3","lang_name":"Python3","time":"3 years, 8 months","timestamp":1578535907,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/292520118/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"13.5 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n# Recursion:\nclass Solution:\n    def levelOrder(self, root: TreeNode) -> List[List[int]]:\n        res = []\n        def helper(node: TreeNode, level: int):\n            if node:\n                if len(res) == level:\n                    res.append([])\n                res[level].append(node.val)\n                helper(node.left, level+1)\n                helper(node.right, level+1)\n        helper(root, 0)\n        return res\n\n# Interative:\n# from collections import deque\n# class Solution:\n#     def levelOrder(self, root: TreeNode) -> List[List[int]]:\n#         if not root:\n#             return []\n#         else:\n#             curr = root\n#             res = [[]]\n#             queue = [root]\n#             while queue:\n#                 curr = queue.pop(0)\n#                 res.append(curr.val)\n#                 if curr.left:\n#                     queue.append(curr.left)\n#                 if curr.right:\n#                     queue.append(curr.right)\n#             return res\n            ","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal","has_notes":false,"flag_type":1}