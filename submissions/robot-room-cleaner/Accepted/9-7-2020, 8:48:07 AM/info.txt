{"id":392342402,"lang":"cpp","lang_name":"C++","time":"2 years, 12 months","timestamp":1599493687,"status":10,"status_display":"Accepted","runtime":"420 ms","url":"/submissions/detail/392342402/","is_pending":"Not Pending","title":"Robot Room Cleaner","memory":"8.5 MB","code":"/**\n * // This is the robot's control interface.\n * // You should not implement it, or speculate about its implementation\n * class Robot {\n *   public:\n *     // Returns true if the cell in front is open and robot moves into the cell.\n *     // Returns false if the cell in front is blocked and robot stays in the current cell.\n *     bool move();\n *\n *     // Robot will stay in the same cell after calling turnLeft/turnRight.\n *     // Each turn will be 90 degrees.\n *     void turnLeft();\n *     void turnRight();\n *\n *     // Clean the current cell.\n *     void clean();\n * };\n */\n\nclass Solution {\n    \nprivate:\n    vector<pair<int, int>> ds;\n    void goback(Robot& robot) {\n        robot.turnLeft();\n        robot.turnLeft();\n        robot.move();\n        robot.turnLeft();\n        robot.turnLeft();\n    }   \n    \n    void backtrack(Robot& robot, pair<int, int> cur_cell, int cur_dir, \n                   set<pair<int, int>>& visited) {\n        \n        if (find(visited.begin(), visited.end(), cur_cell) != visited.end()) return;\n        robot.clean();\n        visited.insert(cur_cell);\n        for (int i = 0; i < 4; ++i) {\n            // set\n            bool available = robot.move();\n            if (available) {\n                // Then backtrack(and clear)\n                int new_dir = (cur_dir + i) % 4;\n                pair<int, int> new_cell{cur_cell.first + ds[new_dir].first, \n                                        cur_cell.second + ds[new_dir].second};\n                backtrack(robot, new_cell, new_dir, visited);\n                // clear\n                goback(robot);\n            }\n            robot.turnLeft();\n        }\n    }\n    \npublic:\n    void cleanRoom(Robot& robot) {\n        ds = vector<pair<int, int>>{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        set<pair<int, int>> visited;\n        backtrack(robot, pair<int, int>{0, 0}, 0, visited);\n    }\n};","compare_result":"11111111111111111111111111111","title_slug":"robot-room-cleaner","has_notes":false,"flag_type":1}