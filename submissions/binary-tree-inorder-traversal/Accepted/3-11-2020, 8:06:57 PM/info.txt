{"id":311685841,"lang":"python3","lang_name":"Python3","time":"3 years, 5 months","timestamp":1583982417,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/311685841/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"12.7 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n# class Solution:\n#     def inorderTraversal(self, root: TreeNode) -> List[int]:\n#         if root is None:\n#             return []\n#         elif root.left is None and root.right is None:\n#             return [root.val]\n#         else:\n#             rootnode = [root.val]\n#             leftpart = self.inorderTraversal(root.left)\n#             rightpart = self.inorderTraversal(root.right)\n#             return leftpart + rootnode + rightpart\n\n# https://www.cnblogs.com/bjwu/p/9284534.html\n# 感觉是给根结点添加了两个为None的左右子结点\n# 当左子树的所有结点访问完之后，保存根结点，并且访问右结点\nclass Solution:\n    def inorderTraversal(self, root: TreeNode) -> List[int]:\n        if not root:\n            return []\n        res = []\n        stack = []\n        while stack or root:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        return res","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal","has_notes":false,"flag_type":1}