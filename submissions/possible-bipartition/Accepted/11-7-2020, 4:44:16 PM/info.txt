{"id":417887337,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1604796256,"status":10,"status_display":"Accepted","runtime":"728 ms","url":"/submissions/detail/417887337/","is_pending":"Not Pending","title":"Possible Bipartition","memory":"19.4 MB","code":"class Solution:\n    def possibleBipartition(self, N: int, dislikes: List[List[int]]) -> bool:\n        colors = collections.defaultdict(int)\n        graph = collections.defaultdict(list)\n        for u, v in dislikes:\n            graph[u].append(v)\n            graph[v].append(u)\n\n        for i in range(1, N + 1):\n            if i in colors:\n                continue\n            queue = collections.deque()\n            queue.append((i, 0))\n            while queue:\n                n, color = queue.popleft()\n                if n in colors:\n                    if colors[n] != color:\n                        return False\n                    continue\n                colors[n] = color\n                for nei in graph[n]:\n                    queue.append((nei, abs(color - 1)))\n            \n        return True","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"possible-bipartition","has_notes":false,"flag_type":1}