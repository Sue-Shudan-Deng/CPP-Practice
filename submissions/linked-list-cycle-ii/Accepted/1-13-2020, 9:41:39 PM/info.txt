{"id":294042431,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578980499,"status":10,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/294042431/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"16 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: ListNode) -> ListNode:\n        \"\"\"\n        龟兔双指针\n        \"\"\"\n        # phase one: intersection\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                break\n        \n        if not (fast and fast.next):\n            return None\n        # phase two: entrance\n        first, second = head, slow\n        while first != second:\n            first = first.next\n            second = second.next\n        return first","compare_result":"1111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false,"flag_type":1}