{"id":419288681,"lang":"python3","lang_name":"Python3","time":"2Â years, 9Â months","timestamp":1605125290,"status":10,"status_display":"Accepted","runtime":"452 ms","url":"/submissions/detail/419288681/","is_pending":"Not Pending","title":"Palindrome Partitioning II","memory":"38.7 MB","code":"class Solution:\n    def minCut(self, s: str) -> int:\n        n = len(s)\n        dp_pal = [[0 for _ in range(n)] for _ in range(n)]\n        dp_cut = [-1 for _ in range(n + 1)]\n        def dfs(start: int, ans: int) -> int:\n            if start == n:\n                return -1\n            tmp = float(\"inf\")\n            for idx in range(start, n):\n                if s[start]==s[idx] and (idx-start<=2 or dp_pal[start+1][idx-1]):\n                    dp_pal[start][idx] = True\n                    if dp_cut[idx + 1] == -1:\n                        tmp = min(tmp, dfs(idx + 1, ans + 1) + 1)\n                    else:\n                        tmp = min(tmp, dp_cut[idx + 1] + 1)\n            dp_cut[start] = tmp\n            return dp_cut[start]\n                        \n        dfs(0, 0)\n        return dp_cut[0]","compare_result":"11111111111111111111111111111","title_slug":"palindrome-partitioning-ii","has_notes":false,"flag_type":1}