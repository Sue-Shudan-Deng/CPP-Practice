{"id":417315487,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1604641319,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/417315487/","is_pending":"Not Pending","title":"Most Frequent Subtree Sum","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def findFrequentTreeSum(self, root: TreeNode) -> List[int]:\n        res = collections.defaultdict(int)\n        def TreeSum(root):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                res[root.val] += 1\n                return root.val\n            l = TreeSum(root.left)\n            r = TreeSum(root.right)\n            summ = l + r + root.val\n            res[summ] += 1\n            return summ\n        TreeSum(root)\n        maxfreq = max(res.values())\n        return [k for k, v in res.items() if v == maxfreq]\n        \n            \n            \n            \n            \n            \n            ","compare_result":"1111000000000000000000000000000000000000000000000000000000000","title_slug":"most-frequent-subtree-sum","has_notes":false,"flag_type":1}