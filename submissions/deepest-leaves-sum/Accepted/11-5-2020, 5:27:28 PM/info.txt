{"id":417244798,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1604626048,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/417244798/","is_pending":"Not Pending","title":"Deepest Leaves Sum","memory":"17.6 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def deepestLeavesSum(self, root: TreeNode) -> int:\n        # preorder(dfs)\n        stack = [(root, 0)]\n        maxdepth, res = 0, 0\n        while stack:\n            root, depth = stack.pop()\n            if not root:\n                continue\n            if maxdepth < depth:\n                maxdepth = depth\n                res = root.val\n            elif maxdepth == depth:\n                res += root.val\n            stack.append((root.left, depth + 1))\n            stack.append((root.right, depth + 1))\n        return res   ","compare_result":"111111111111111","title_slug":"deepest-leaves-sum","has_notes":false,"flag_type":1}