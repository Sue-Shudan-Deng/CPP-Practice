{"id":408078930,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1602562253,"status":10,"status_display":"Accepted","runtime":"572 ms","url":"/submissions/detail/408078930/","is_pending":"Not Pending","title":"Stone Game","memory":"125.5 MB","code":"from functools import lru_cache\nclass Solution:\n    def stoneGame(self, piles: List[int]) -> bool:\n        n = len(piles)\n        \n        @lru_cache(None)\n        def dfs(i, j):\n            if i > j:\n                return 0\n            parity = (j - i - n) % 2\n            if parity == 1:\n                return max(piles[i] + dfs(i + 1, j), piles[j] + dfs(i, j - 1))\n            else:\n                return min(-piles[i] + dfs(i + 1, j), -piles[j] + dfs(i, j - 1))\n            \n        return dfs(0, n - 1) > 0","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"stone-game","has_notes":false,"flag_type":1}