{"id":400360250,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600998998,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/400360250/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"N/A","code":"class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        \"\"\"\n        method 1: DP: O(n^2)\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        dp = [0 for _ in range(n)]\n        dp[0] = 1\n        for i in range(1, n):\n            for j in range(i):\n                if nums[j] < nums[i]:\n                    dp[i] = max(dp[j] + 1, dp[i])\n        return max(dp)","compare_result":"011111101110111111110111","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}