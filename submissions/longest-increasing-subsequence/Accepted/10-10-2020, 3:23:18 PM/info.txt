{"id":407083429,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1602368598,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/407083429/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"14.6 MB","code":"class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        # \"\"\"\n        # method 1: DP: O(n^2)\n        # \"\"\"\n        # n = len(nums)\n        # if n == 0:\n        #     return 0\n        # dp = [1 for _ in range(n)]\n        # for i in range(1, n):\n        #     for j in range(i):\n        #         if nums[j] < nums[i]:\n        #             dp[i] = max(dp[i], dp[j] + 1)\n        # return max(dp)\n    \n        \"\"\"\n        method 2: DP + Binary Search: O(nlog(n))\n        https://leetcode.com/problems/longest-increasing-subsequence/discuss/74824/JavaPython-Binary-search-O(nlogn)-time-with-explanation\n        \"\"\"\n        tails = [0] * len(nums)\n        size = 0\n        for num in nums:\n            l, r = 0, size\n            while l < r:\n                m = l + (r - l) // 2\n                if tails[m] >= num:\n                    r = m\n                else:\n                    l = m + 1\n            tails[l] = num\n            size = max(l + 1, size)\n        return size","compare_result":"111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}