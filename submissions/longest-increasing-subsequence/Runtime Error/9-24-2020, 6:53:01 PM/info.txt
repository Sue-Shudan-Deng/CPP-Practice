{"id":400359129,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600998781,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/400359129/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"N/A","code":"class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        \"\"\"\n        method 1: DP: O(n^2)\n        \"\"\"\n        n = len(nums)\n        dp = [0 for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, i):\n                if nums[j-1] < nums[i-1]:\n                    dp[i] = max(dp[j], dp[i])\n            dp[i] += 1\n        return max(dp[1:])","compare_result":"100000000000000000000000","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}