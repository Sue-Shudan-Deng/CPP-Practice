{"id":407083005,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1602368506,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/407083005/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"N/A","code":"class Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        # \"\"\"\n        # method 1: DP: O(n^2)\n        # \"\"\"\n        # n = len(nums)\n        # if n == 0:\n        #     return 0\n        # dp = [1 for _ in range(n)]\n        # for i in range(1, n):\n        #     for j in range(i):\n        #         if nums[j] < nums[i]:\n        #             dp[i] = max(dp[i], dp[j] + 1)\n        # return max(dp)\n    \n        \"\"\"\n        method 2: DP + Binary Search: O(nlog(n))\n        https://leetcode.com/problems/longest-increasing-subsequence/discuss/74824/JavaPython-Binary-search-O(nlogn)-time-with-explanation\n        \"\"\"\n        tails = [0] * len(nums)\n        size = 0\n        for x in nums:\n            i, j = 0, size\n            while i != j:\n                m = (i + j) / 2\n                if tails[m] < x:\n                    i = m + 1\n                else:\n                    j = m\n            tails[i] = x\n            size = max(i + 1, size)","compare_result":"000000000000000000000000","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}