{"id":395245136,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600029542,"status":10,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/395245136/","is_pending":"Not Pending","title":"Insert into a Sorted Circular Linked List","memory":"14.5 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, next=None):\n        self.val = val\n        self.next = next\n\"\"\"\n\nclass Solution:\n    def insert(self, head: 'Node', insertVal: int) -> 'Node':\n\n        if head == None:\n            newNode = Node(insertVal, None)\n            newNode.next = newNode\n            return newNode\n        \n        prev, curr = head, head.next\n        toInsert = False\n\n        while True:\n            if prev.val <= insertVal <= curr.val:\n                # Case #1.\n                toInsert = True\n            elif prev.val > curr.val:\n                # Case #2. where we locate the tail element\n                # 'prev' points to the tail, i.e. the largest element!\n                if insertVal >= prev.val or insertVal <= curr.val:\n                    toInsert = True\n\n            if toInsert:\n                prev.next = Node(insertVal, curr)\n                # mission accomplished\n                return head\n\n            prev, curr = curr, curr.next\n            # loop condition\n            if prev == head:\n                break\n        # Case #3.\n        # did not insert the node in the loop\n        prev.next = Node(insertVal, curr)\n        return head\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"insert-into-a-sorted-circular-linked-list","has_notes":false,"flag_type":1}