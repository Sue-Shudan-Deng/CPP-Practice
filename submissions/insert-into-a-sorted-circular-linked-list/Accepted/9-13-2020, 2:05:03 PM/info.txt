{"id":395255131,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600031103,"status":10,"status_display":"Accepted","runtime":"88 ms","url":"/submissions/detail/395255131/","is_pending":"Not Pending","title":"Insert into a Sorted Circular Linked List","memory":"14.3 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, next=None):\n        self.val = val\n        self.next = next\n\"\"\"\n\nclass Solution:\n    def insert(self, head: 'Node', insertVal: int) -> 'Node':\n        \n        def toInsert(pre: 'Node', cur: 'Node', insertVal: int) -> bool:\n            # case 1\n            flag1 = pre.val <= insertVal and insertVal <= cur.val\n            flag2 = pre.val > cur.val and (insertVal >= pre.val or insertVal <= cur.val)\n            return flag1 or flag2\n\n        if not head:\n            newNode = Node(insertVal, None)\n            newNode.next = newNode\n            return newNode\n        \n        pre, cur = head, head.next\n        flag3 = False\n        while True:\n            if toInsert(pre, cur, insertVal):\n                newNode = Node(insertVal, None)\n                newNode.next = cur\n                pre.next = newNode\n                break\n            flag3 |= pre.val == cur.val\n            pre = cur\n            cur = cur.next\n            if pre == head:\n                if flag3:\n                    newNode = Node(insertVal, None)\n                    newNode.next = cur\n                    pre.next = newNode\n                break\n        return head\n            \n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"insert-into-a-sorted-circular-linked-list","has_notes":false,"flag_type":1}