{"id":311840850,"lang":"python3","lang_name":"Python3","time":"3 years, 5 months","timestamp":1584032433,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/311840850/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node","memory":"14.2 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n        self.val = val\n        self.left = left\n        self.right = right\n        self.next = next\n\"\"\"\n\n# # Recursive:\n# # Space complexity: O(log(n))\n# class Solution:\n#     def connect(self, root: 'Node') -> 'Node':\n#         \"\"\"\n#         用前序遍历，因为我们希望每访问一个root node就给其左右结点添加一条边\n#         \"\"\"\n#         if not root or not root.left:\n#             return root\n#         # 当且仅当root及其左右结点完整时才进行操作\n#         root.left.next = root.right\n#         if root.next:\n#             root.right.next = root.next.left\n#         self.connect(root.left)\n#         self.connect(root.right)\n#         return root\n        \n# Iterative:\n# Space complexity: O(1):\nclass Solution:\n    def connect(self, root: 'Node') -> 'Node':\n        old_root = root\n        # 这里是两个while循环\n        while root:\n            sentinel = Node(0)\n            curr = sentinel\n            while root:\n                if root.left:\n                    curr.next = root.left\n                    curr = curr.next\n                if root.right:\n                    curr.next = root.right\n                    curr = curr.next\n                root = root.next\n            root = sentinel.next\n        return old_root\n            ","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node","has_notes":false,"flag_type":1}