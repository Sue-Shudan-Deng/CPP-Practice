{"id":417594682,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1604717612,"status":10,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/417594682/","is_pending":"Not Pending","title":"Permutations","memory":"14.2 MB","code":"class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        ans, visited = [], collections.defaultdict(int)\n        def backtrack(cur = []):\n            if len(cur) == len(nums):\n                ans.append(cur[:])\n                return \n            for idx in range(len(nums)):\n                if not visited[idx]:\n                    visited[idx] = 1\n                    backtrack(cur + [nums[idx]])\n                    visited[idx] = 0\n                \n        backtrack()\n        return ans","compare_result":"1111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1}