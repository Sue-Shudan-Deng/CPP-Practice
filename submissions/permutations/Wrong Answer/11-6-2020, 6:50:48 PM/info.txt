{"id":417594086,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1604717448,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/417594086/","is_pending":"Not Pending","title":"Permutations","memory":"N/A","code":"class Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        ans, visited = [], [0 for _ in range(len(nums))]\n        def backtrack(start = 1, cur = []):\n            if len(cur) == len(nums):\n                ans.append(cur[:])\n                return \n            for idx in range(len(nums)):\n                if not visited[idx]:\n                    visited[idx] = 1\n                    backtrack(idx + 1, cur + [idx + 1])\n                    visited[idx] = 0\n                \n        backtrack()\n        return ans","compare_result":"1101000000000010000000000","title_slug":"permutations","has_notes":false,"flag_type":1}