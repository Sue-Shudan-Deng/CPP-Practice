{"id":311646902,"lang":"python3","lang_name":"Python3","time":"3 years, 5 months","timestamp":1583972247,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/311646902/","is_pending":"Not Pending","title":"Path With Maximum Minimum Value","memory":"N/A","code":"from heapq import *\nclass Solution:\n    def maximumMinimumPath(self, A: List[List[int]]) -> int:\n        row = len(A)\n        col = len(A[0])\n\n        def neighbors(r, c):\n            for nr, nc in ((r+1, c), (r, c+1), (r-1, c), (r, c-1)):\n                if 0 <= nr < row and 0 <= nc < col:\n                    yield nr, nc\n                    \n        maxHeap = [(-A[0][0], 0, 0)]\n        seen = set()\n        while maxHeap:\n            val, r, c = heappop(maxHeap)\n            if r == row - 1 and c == col - 1:\n                return -val\n            for nr, nc in neighbors(r, c):\n                if not (nr, nc) in seen:\n                    seen.add((nr, nc))\n                    heappush(maxHeap, (max(val, A[nr, nc]), nr, nc))\n        return -1","compare_result":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"path-with-maximum-minimum-value","has_notes":false,"flag_type":1}