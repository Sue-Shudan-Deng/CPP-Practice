{"id":398373309,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600621115,"status":10,"status_display":"Accepted","runtime":"1040 ms","url":"/submissions/detail/398373309/","is_pending":"Not Pending","title":"3Sum","memory":"17.1 MB","code":"class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n-2):\n            if nums[i] + nums[i+1] + nums[i+2] > 0:\n                break\n            if nums[i] + nums[-1] + nums[-2] < 0:\n                continue\n            # 因为i-1已经被看过了，并且i所包含的集合一定是i-1所包含的集合的子集\n            # 所以出于duplicate的考虑，不需要考虑i\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            # 之后，固定nums[i]，剩下的变成一个 2sum 问题\n            l, r = i + 1, n - 1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    # 因为nums[i]是unique的，那么去除nums[l]和nums[r]的重复元素\n                    while l + 1 < r and nums[l] == nums[l+1]:\n                        l += 1\n                    while r - 1 > l and nums[r] == nums[r-1]:\n                        r -= 1\n                    # 此时nums[new_l] == nums[l], nums[new_r] == nums[r]\n                    # 所以需要继续前进or后退一格\n                    l += 1\n                    r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"3sum","has_notes":false,"flag_type":1}