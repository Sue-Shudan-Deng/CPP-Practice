{"id":293693441,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578882217,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/293693441/","is_pending":"Not Pending","title":"Spiral Matrix","memory":"12.8 MB","code":"class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        if not matrix:\n            return matrix\n        all_digits = []\n        for i in matrix:\n            all_digits += i\n        up, down = 0, len(matrix) - 1\n        left, right = 0, len(matrix[0]) - 1\n        rounds = down // 2 + 1\n        res = []\n        \n        def go_around(res, up, down, left, right):\n            row, col = up, left\n            while col != right:\n                res.append(matrix[row][col])\n                col += 1\n            if up == down:\n                res.append(matrix[row][col])\n                return res\n            while row != down:\n                res.append(matrix[row][col])\n                row += 1\n            if col == left:\n                res.append(matrix[row][col])\n                return res\n            while col != left:\n                res.append(matrix[row][col])\n                col -= 1\n            while right != left and row != up:\n                res.append(matrix[row][col])\n                row -= 1\n            return res\n            \n        while set(res) != set(all_digits):\n            res = go_around(res, up, down, left, right)\n            if not left == right:\n                left, right = left + 1, right - 1\n            up, down = up + 1, down - 1\n        return res\n        ","compare_result":"1111111111111111111111","title_slug":"spiral-matrix","has_notes":false,"flag_type":1}