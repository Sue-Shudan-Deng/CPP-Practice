{"id":293689390,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578881315,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/293689390/","is_pending":"Not Pending","title":"Spiral Matrix","memory":"N/A","code":"class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        if not matrix:\n            return matrix\n        up, down = 0, len(matrix) - 1\n        left, right = 0, len(matrix[0]) - 1\n        rounds = down // 2 + 1\n        res = []\n        \n        def go_around(res, up, down, left, right):\n            row, col = up, left\n            print(res)\n            while col != right:\n                res.append(matrix[row][col])\n                col += 1\n            print(res)\n            if up == down and col == right:\n                res.append(matrix[row][col])\n                return res\n            while row != down:\n                res.append(matrix[row][col])\n                row += 1\n            if col == left:\n                res.append(matrix[row][col])\n                return res\n            print(res)\n            while col != left:\n                res.append(matrix[row][col])\n                col -= 1\n            print(res)\n            while right != left and row != up:\n                res.append(matrix[row][col])\n                row -= 1\n            print(res)\n            return res\n            \n        for i in range(rounds):\n            res = go_around(res, up, down, left, right)\n            up, down, left, right = up + 1, down - 1, left + 1, right - 1\n        return res\n        ","compare_result":"1111111000000000000000","title_slug":"spiral-matrix","has_notes":false,"flag_type":1}