{"id":408332978,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1602615998,"status":10,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/408332978/","is_pending":"Not Pending","title":"Jump Game","memory":"16 MB","code":"class Solution:\n    \"\"\"\n    method 1: move backward, DP, TLE, O(n^2)\n    \"\"\"\n    # def canJump(self, nums: List[int]) -> bool:\n    #     n = len(nums)\n    #     dp = [False for _ in range(n)]\n    #     dp[-1] = True\n    #     for i in range(n-2, -1, -1):\n    #         for j in range(i+1, i+nums[i]+1):\n    #             if j >= n or dp[j]:\n    #                 dp[i] = True\n    #                 break\n    #     return dp[0]\n    \"\"\"\n    method 2: move backward, Greedy, O(n)\n    we only need to keep track of the furthest achievable element\n    \"\"\"\n    # def canJump(self, nums: List[int]) -> bool:\n    #     n = len(nums)\n    #     lastpoint = n-1\n    #     for i in range(n-2, -1, -1):\n    #         if i + nums[i] >= lastpoint:\n    #             lastpoint = i\n    #     return lastpoint == 0\n    \n    \"\"\"\n    method 3: move forward, Greedy, O(n)\n    https://www.youtube.com/watch?v=J04GagAZ5io\n    核心思想是每步都更新右边界，看最远能到达哪里\n    \"\"\"\n    def canJump(self, nums: List[int]) -> bool:\n        n, farthest = len(nums), 0\n        for i in range(n):\n            if i > farthest:\n                return False\n            farthest = max(farthest, i + nums[i])\n        return True","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"jump-game","has_notes":false,"flag_type":1}