{"id":396266066,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1600204343,"status":10,"status_display":"Accepted","runtime":"160 ms","url":"/submissions/detail/396266066/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"49.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    \nprivate:\n    vector<TreeNode*> ans;\n    map<string, int> m;\n    string serialize(TreeNode* root) {\n        if (!root) {\n            return \"#\";\n        }\n        string key = to_string(root->val) + \" \" + serialize(root->left) + \" \" + serialize(root->right);\n        if (m.count(key) == 0) {\n            m[key] = 0;\n        }\n        ++m[key];\n        if (m[key] == 2) {\n            ans.push_back(root);\n        }\n        return key;\n    }\n    \npublic:\n    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {\n        string s = serialize(root);\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-duplicate-subtrees","has_notes":false,"flag_type":1}