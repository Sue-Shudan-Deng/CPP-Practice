{"id":311287752,"lang":"python3","lang_name":"Python3","time":"3 years, 5 months","timestamp":1583871535,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/311287752/","is_pending":"Not Pending","title":"Critical Connections in a Network","memory":"N/A","code":"class Solution:\n    def criticalConnections(self, n: int, connections: List[List[int]]) -> List[List[int]]:\n        \n        g = collections.defaultdict(set)\n        for u, v in connections:\n            g[u].add(v)\n            g[v].add(u)\n        \n        jump = [-1] * n\n        \n        def dfs(v: int, par: int, lvl: int, res: list, jump: list, g) -> int:\n            \n            jump[v] = lvl + 1\n            for child in g[v]:\n                if child == par:\n                    pass\n                elif jump[v] == -1:\n                    jump[v] = min(jump[v], dfs(child, v, res, jump, g))\n                else:\n                    jump[v] = min(jump[v], jump[child])\n            if jump[v] == lvl + 1 and v != 0:\n                res.append([par, v])\n            return jump[v]\n        \n        res = []\n        dfs(0, -1, 0, res, jump, g)\n        return res","compare_result":"000000000000","title_slug":"critical-connections-in-a-network","has_notes":false,"flag_type":1}