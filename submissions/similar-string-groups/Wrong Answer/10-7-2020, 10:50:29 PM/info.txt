{"id":406022354,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1602136229,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/406022354/","is_pending":"Not Pending","title":"Similar String Groups","memory":"N/A","code":"class Solution:\n    def numSimilarGroups(self, A: List[str]) -> int:\n        parent = {a:a for a in A}\n        size = {a: 0 for a in A}\n        n, cnt = len(A), len(A)\n        \n        def find(x):\n            if x != parent[x]:\n                parent[x] = find(parent[x])\n            return parent[x]\n        \n        def union(u, v):\n            nonlocal cnt\n            pu, pv = find(u), find(v)\n            if pu == pv:\n                return\n            if size[pu] > size[pv]:\n                pu, pv = pv, pu\n            parent[pu] = pv\n            size[pv] += size[pu]\n            cnt -= 1\n            \n        def is_similar(word1, word2):\n            diff, c1, c2 = 0, set(), set()\n            for i in range(len(word1)):\n                if word1[i] != word2[i]:\n                    diff += 1\n                    c1.add(word1[i])\n                    c2.add(word2[i])\n                if diff > 2: return False\n            return True if c1 == c2 else False\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                if is_similar(A[i], A[j]):\n                    union(A[i], A[j])\n        return cnt\n        \n        \n            ","compare_result":"111111011111111111111111111111100000000000000000000000000000000","title_slug":"similar-string-groups","has_notes":false,"flag_type":1}