{"id":406023903,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1602136491,"status":10,"status_display":"Accepted","runtime":"3544 ms","url":"/submissions/detail/406023903/","is_pending":"Not Pending","title":"Similar String Groups","memory":"17.2 MB","code":"class Solution:\n    def numSimilarGroups(self, A: List[str]) -> int:\n        A = list(set(A))\n        parent = {a:a for a in A}\n        size = {a: 0 for a in A}\n        n = len(A)\n        \n        def find(x):\n            if x != parent[x]:\n                parent[x] = find(parent[x])\n            return parent[x]\n        \n        def union(u, v):\n            pu, pv = find(u), find(v)\n            if pu == pv:\n                return\n            if size[pu] > size[pv]:\n                pu, pv = pv, pu\n            parent[pu] = pv\n            size[pv] += size[pu]\n            \n        def is_similar(word1, word2):\n            diff, c1, c2 = 0, set(), set()\n            for i in range(len(word1)):\n                if word1[i] != word2[i]:\n                    diff += 1\n                    c1.add(word1[i])\n                    c2.add(word2[i])\n                if diff > 2: return False\n            return True if c1 == c2 else False\n        \n        def similar_words(word):\n            s_words = set()\n            for i in range(len(word)):\n                for j in range(i + 1, len(word)):\n                    s_words.add(word[:i] + word[j] + word[i+1:j] + word[i] + word[j+1:])\n            return s_words\n        \n        if len(A) > len(A[0]):\n            # O(N * K^2)\n            cache = set(A)\n            for a in A:\n                for s_word in similar_words(a):\n                    if s_word in cache:\n                        union(a, s_word)        \n        else:\n            # O(N^2 * K)\n            for i, a in enumerate(A):\n                for j in range(i + 1, len(A)):\n                    if is_similar(A[i], A[j]):\n                        union(A[i], A[j])\n                            \n        groups = collections.defaultdict(int)\n        for word in parent:\n            groups[find(word)] += 1\n        return len(groups)","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"similar-string-groups","has_notes":false,"flag_type":1}