{"id":406268456,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1602185898,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/406268456/","is_pending":"Not Pending","title":"Map Sum Pairs","memory":"10 MB","code":"class MapSum {\n    \nprivate:\n    struct TrieNode {\n        TrieNode(): children(128, nullptr) {}\n        ~TrieNode() {\n            for (auto child : children) {\n                if (child) {\n                    delete child;\n                }\n            }\n            children.clear();\n        }\n        vector<TrieNode*> children;\n        int sum = 0;\n    };\n\n    std::unique_ptr<TrieNode> root;\n    unordered_map<string, int> vals;\n    \npublic:\n    /** Initialize your data structure here. */\n    MapSum() : root(new TrieNode()) {}\n    \n    void insert(string key, int val) {\n        int inc = val;\n        if (vals.count(key)) {\n            inc -= vals[key];\n        }\n        vals[key] = val;\n        TrieNode *p = root.get(); \n        for (auto c : key) {\n            if (!p->children[c]) {\n                p->children[c] = new TrieNode();\n            }\n            p = p->children[c];\n            p->sum += inc;\n        }\n    }\n    \n    int sum(string prefix) {\n        TrieNode *p = root.get();\n        for (auto c : prefix) {\n            if (!p->children[c]) {\n                return 0;\n            }\n            p = p->children[c];\n        }\n        return p->sum;\n    }\n};\n\n/**\n * Your MapSum object will be instantiated and called as such:\n * MapSum* obj = new MapSum();\n * obj->insert(key,val);\n * int param_2 = obj->sum(prefix);\n */","compare_result":"111111111111111111111111111111","title_slug":"map-sum-pairs","has_notes":false,"flag_type":1}