{"id":395797309,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1600124109,"status":10,"status_display":"Accepted","runtime":"104 ms","url":"/submissions/detail/395797309/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"27.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\n    \nprivate:\n    vector<int> _elems;\n    vector<int>::iterator itr;\n    vector<int> inorder(TreeNode* root) {\n        vector<int> ans;\n        stack<TreeNode*> s;\n        while (root || !s.empty()) {\n            while (root) {\n                s.push(root);\n                root = root->left;\n            }\n            root = s.top();\n            s.pop();\n            ans.push_back(root->val);\n            root = root->right;\n        }\n        return ans;\n    }\n    \npublic:\n    BSTIterator(TreeNode* root) {\n        _elems = inorder(root);\n        itr = _elems.begin();\n    }\n    \n    /** @return the next smallest number */\n    int next() {\n        return (*itr++);\n    }\n    \n    /** @return whether we have a next smallest number */\n    bool hasNext() {\n        return (itr + 1) <= _elems.end();\n    }\n};\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator","has_notes":false,"flag_type":1}