{"id":395881933,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600139194,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/395881933/","is_pending":"Not Pending","title":"Kth Largest Element in a Stream","memory":"N/A","code":"class Node:\n    def __init__(self, val: int, cnt: int):\n        self.val = val\n        self.cnt = cnt\n        self.left = None\n        self.right = None\n        \ndef insertNode(root: Node, num: int):\n    if not root:\n        return Node(num, 1)\n    if num < root.val:\n        root.left = insertNode(root.left, num)\n    else:\n        root.right = insertNode(root.right, num)\n    root.cnt += 1\n    return root\n        \ndef searchKth(root: Node, k: int):\n    m = 0 if not root.right else root.right.cnt\n    if k == m+1:\n        return root.val\n    elif k <= m:\n        # 可以在右边搜\n        return searchKth(root.right, k)\n    else:\n        # 只能在左边搜\n        return searchKth(root.left, k-m-1)\n\nclass KthLargest:\n\n    def __init__(self, k: int, nums: List[int]):\n        self.root = None\n        for n in nums:\n            self.root = insertNode(self.root, n)\n        self.size = k\n\n    def add(self, val: int) -> int:\n        self.root = insertNode(self.root, val)\n        return searchKth(self.root, self.size)\n\n# Your KthLargest object will be instantiated and called as such:\n# obj = KthLargest(k, nums)\n# param_1 = obj.add(val)","compare_result":"1111111111","title_slug":"kth-largest-element-in-a-stream","has_notes":false,"flag_type":1}