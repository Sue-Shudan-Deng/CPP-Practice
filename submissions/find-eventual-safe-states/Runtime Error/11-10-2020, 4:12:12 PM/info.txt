{"id":418985561,"lang":"python","lang_name":"Python","time":"2 years, 9 months","timestamp":1605053532,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/418985561/","is_pending":"Not Pending","title":"Find Eventual Safe States","memory":"N/A","code":"class Solution(object):\n    def eventualSafeNodes(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        WHITE, GRAY, BLACK = 0, 1, 2\n        color = collections.defaultdict(int)\n\n        def dfs(node):\n            if color[node] != white:\n                return color[node] == BLACK\n\n            color[node] = GRAY\n            for nei in graph[node]:\n                if color[nei] == BLACK:\n                    continue\n                if color[nei] == GRAY or not dfs(nei):\n                    return False\n            color[node] = BLACK\n            return True\n\n        return filter(dfs, range(len(graph)))","compare_result":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"find-eventual-safe-states","has_notes":false,"flag_type":1}