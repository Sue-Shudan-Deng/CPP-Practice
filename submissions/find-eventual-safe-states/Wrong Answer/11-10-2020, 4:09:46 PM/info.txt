{"id":418984990,"lang":"python3","lang_name":"Python3","time":"2 years, 9 months","timestamp":1605053386,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/418984990/","is_pending":"Not Pending","title":"Find Eventual Safe States","memory":"N/A","code":"class Solution:\n    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:\n        n = len(graph)\n        visiting, visited = set(), set()\n        unsafe = []\n        \n        def dfs(node, cur):\n            if node in visited:\n                return []\n            if node in visiting:\n                unsafe = cur[:]\n                return unsafe\n            \n            visiting.add(node)\n            for nei in graph[node]:\n                res = dfs(nei, cur + [nei])\n                if res:\n                    return res\n            visiting.remove(node)\n            visited.add(node)\n            return []\n            \n        res = []\n        for i in range(n):\n            unsafe = dfs(i, [i])\n            for i in unsafe:\n                visited.add(i)\n            res += unsafe\n                \n        return [i for i in range(n) if not i in res]","compare_result":"101001010111000101110110000100000001100010000001000010010000000000000000001010000100000010110100010000000100000","title_slug":"find-eventual-safe-states","has_notes":false,"flag_type":1}