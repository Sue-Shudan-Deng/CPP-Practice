{"id":399287738,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600795785,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/399287738/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"N/A","code":"class Solution:\n    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:\n        if not matrix:\n            return 0\n        row, col, heap = len(matrix), len(matrix[0]), []\n        dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        for r in range(row):\n            for c in range(col):\n                heapq.heappush(heap, (matrix[r][c], r, c))\n                \n        def dfs(r, c, step, visited):\n            tmp = step\n            visited.add((r, c))\n            for dr, dc in dirs:\n                new_r = r + dr\n                new_c = c + dc\n                if 0 <= new_r < row and 0 <= new_c < col and matrix[new_r][new_c] > matrix[r][c]:\n                    new_step = dfs(new_r, new_c, step + 1, visited)\n                    tmp = max(tmp, new_step)\n            return tmp\n                \n        visited, ans = set(), 0\n        while heap:\n            val, r, c = heapq.heappop(heap)\n            if (r, c) in visited:\n                continue\n            ans = max(ans, dfs(r, c, 1, visited))\n        return ans","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000","title_slug":"longest-increasing-path-in-a-matrix","has_notes":false,"flag_type":1}