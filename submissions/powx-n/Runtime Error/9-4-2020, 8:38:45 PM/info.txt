{"id":391166802,"lang":"python3","lang_name":"Python3","time":"3 years","timestamp":1599277125,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/391166802/","is_pending":"Not Pending","title":"Pow(x, n)","memory":"N/A","code":"class Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if n == 0: \n            return 1\n        ret = 1\n        if n % 2:\n            ret = x if n > 0 else 1/x\n        half = self.myPow(x, n//2)\n        ret *= (half * half)\n        return ret\n    \n# class Solution:\n#     def myPow(self, x: float, n: int) -> float:\n#         \"\"\"\n#         分治法，iteration版本\n#         \"\"\"\n#         def fastPow(x: float, n: int):\n#             if n == 0:\n#                 return 1\n#             ans = 1\n#             curr = x\n#             powrange = []\n#             while n:\n#                 powrange.append(n)\n#                 n //= 2\n            \n#             # 这里面的运算比较巧妙\n#             for i in powrange:\n#                 if i % 2:\n#                     ans *= curr\n#                 curr = curr * curr\n#             return ans\n                \n#         if n < 0:\n#             x, n = 1 / x, -n\n#         return fastPow(x, n)","compare_result":"1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"powx-n","has_notes":false,"flag_type":1}