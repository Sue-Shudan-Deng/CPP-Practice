{"id":406421433,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1602217235,"status":10,"status_display":"Accepted","runtime":"2400 ms","url":"/submissions/detail/406421433/","is_pending":"Not Pending","title":"Race Car","memory":"141.2 MB","code":"class Solution(object):\n    def racecar(self, target):\n        \"\"\"\n        method 1: BFS\n        \"\"\"\n        queue = collections.deque([(0, 1, 0)])\n        visited = set()\n        visited.add(\"0_1\")\n        visited.add(\"0_-1\")\n        \n        while queue:\n            pos, speed, step = queue.popleft()\n            # case 1:\n            pos1 = pos + speed\n            speed1 = speed * 2\n            if pos1 == target:\n                return step + 1\n            key1 = str(pos1) + \"_\" + str(speed1)\n            if pos1 < 2 * target and speed1 < 2 * target and not key1 in visited:\n                visited.add(key1)\n                queue.append((pos1, speed1, step + 1))\n            \n            # case 2:\n            pos2 = pos\n            speed2 = -1 if speed > 0 else 1\n            key2 = str(pos2) + \"_\" + str(speed2)\n            if not key2 in visited:\n                visited.add(key2)\n                queue.append((pos2, speed2, step + 1))\n                \n        return 0\n                ","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"race-car","has_notes":false,"flag_type":1}