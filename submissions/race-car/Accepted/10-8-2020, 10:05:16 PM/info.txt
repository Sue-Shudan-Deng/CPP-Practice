{"id":406436750,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1602219916,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/406436750/","is_pending":"Not Pending","title":"Race Car","memory":"14.1 MB","code":"class Solution(object):\n    def racecar(self, target):\n#         \"\"\"\n#         method 1: BFS https://www.youtube.com/watch?v=HzlEkUt2TYs&t=133s\n#         \"\"\"\n#         queue = collections.deque([(0, 1, 0)])\n#         visited = set()\n#         visited.add(\"0_1\")\n#         visited.add(\"0_-1\")\n        \n#         while queue:\n#             pos, speed, step = queue.popleft()\n#             # case 1: A\n#             pos1 = pos + speed\n#             speed1 = speed * 2\n#             if pos1 == target:\n#                 return step + 1\n#             key1 = str(pos1) + \"_\" + str(speed1)\n#             if pos1 < 2 * target and speed1 < 2 * target and not key1 in visited:\n#                 visited.add(key1)\n#                 queue.append((pos1, speed1, step + 1))\n            \n#             # case 2: R\n#             pos2 = pos\n#             speed2 = -1 if speed > 0 else 1\n#             key2 = str(pos2) + \"_\" + str(speed2)\n#             if not key2 in visited:\n#                 visited.add(key2)\n#                 queue.append((pos2, speed2, step + 1))\n                \n#         return 0\n    \n        \"\"\"\n        method 2: Recursion with mem https://www.youtube.com/watch?v=HzlEkUt2TYs&t=133s\n        \"\"\"\n        dp = [0 for _ in range(target + 1)]\n        def dfs(target):\n            if dp[target]:\n                return dp[target]\n            n = target.bit_length()\n            if 2 ** n - 1 == target:\n                dp[target] = n\n                return dp[target]\n            # case 1\n            dp[target] = n + 1 + dfs(2 ** n -1 - target)\n            # case 2\n            for m in range(n - 1):\n                dp[target] = min(dp[target], n + m + 1 + dfs(target - (2 ** (n - 1) - 1 - (2 ** m - 1))))\n            return dp[target]\n            \n        return dfs(target)","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"race-car","has_notes":false,"flag_type":1}