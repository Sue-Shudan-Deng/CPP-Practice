{"id":311407827,"lang":"python3","lang_name":"Python3","time":"3 years, 5 months","timestamp":1583900894,"status":10,"status_display":"Accepted","runtime":"152 ms","url":"/submissions/detail/311407827/","is_pending":"Not Pending","title":"Word Break II","memory":"12.8 MB","code":"class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        \"\"\"\n        The first step here is to check whether s is breakable\n        If not, then we should not waste any time doing that\n        \"\"\"\n        dp = [False for _ in range(len(s) + 1)]\n        dp[0] = True\n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True      \n        if dp[len(s)] == False:\n            return []\n        \"\"\"\n        这里的DP变成了记录当前break point下所有可能的组合\n        \"\"\"\n        dp = [[] for _ in range(len(s) + 1)]\n        dp[0] = [\"\"]\n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if len(dp[j]) > 0 and s[j:i] in wordDict:\n                    for p in dp[j]:\n                        dp[i].append(p + (\"\" if p == \"\" else \" \") + s[j:i])\n        return dp[len(s)]","compare_result":"111111111111111111111111111111111111111","title_slug":"word-break-ii","has_notes":false,"flag_type":1}