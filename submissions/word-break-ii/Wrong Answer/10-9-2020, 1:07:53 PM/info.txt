{"id":406672972,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1602274073,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/406672972/","is_pending":"Not Pending","title":"Word Break II","memory":"N/A","code":"class Solution:\n    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:\n        \"\"\"\n        The first step here is to check whether s is breakable\n        If not, then we should not waste any time doing that\n        \"\"\"\n        dp = [False for _ in range(len(s) + 1)]\n        dp[0] = True\n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True      \n        if dp[len(s)] == False:\n            return []\n        \"\"\"\n        这里的dp变成了记录当前break point下所有可能的组合\n        \"\"\"\n        dp = [[] for _ in range(len(s) + 1)]\n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if s[j:i] in wordDict:\n                    if len(dp[j]) == 0:\n                        dp[i].append(s[j:i])\n                    else:\n                        for p in dp[j]:\n                            dp[i].append(p + \" \" + s[j:i])\n        return dp[-1]","compare_result":"111111111110110111111111111011111110","title_slug":"word-break-ii","has_notes":false,"flag_type":1}