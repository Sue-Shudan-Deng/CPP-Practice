{"id":417327356,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1604643672,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/417327356/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def minCameraCover(self, root: TreeNode) -> int:\n        # [i, j]: i表示这个点用，j表示这个点不用\n        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        def dfs(root):\n            if not root:\n                return [0, 0]\n            l = dfs(root.left)\n            r = dfs(root.right)\n            #                用root.val                    不用root.val\n            return [1 + min(l[0], l[1]) + min(r[0], r[1]), l[0] + r[0]]\n        \n        return min(dfs(root))","compare_result":"11111111111111111111111111111111111111111111111111111111111111111110010100000001111111101001100100110000000011001011001100000100101100000010000100100000000000000000000000","title_slug":"binary-tree-cameras","has_notes":false,"flag_type":1}