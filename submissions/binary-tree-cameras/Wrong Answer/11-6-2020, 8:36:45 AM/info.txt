{"id":417457415,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1604680605,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/417457415/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def minCameraCover(self, root: TreeNode) -> int:\n        # [i, j1, j2]: i表示这个点要用，j1表示这个点不用并且这个点被下面的点cover到了，j2表示这个点不用并且没有被下面的点cover到\n        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        def dfs(root):\n            if not root:\n                return [float(\"inf\"), 0, 0]\n            l = dfs(root.left)\n            r = dfs(root.right)\n            return [1 + min(l) + min(r),\n                    min(l[0] + min(r[:1]), r[0] + min(l[:1])),\n                    l[1] + r[1]]\n        \n        return min(dfs(root)[:-1])","compare_result":"00111001000000011110000000000000000000001001111001000000000000000010010000000000000000000100000100000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"binary-tree-cameras","has_notes":false,"flag_type":1}