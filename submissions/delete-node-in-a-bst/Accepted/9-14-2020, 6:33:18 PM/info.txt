{"id":395846177,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1600133598,"status":10,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/395846177/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"32.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    \nprivate:\n    TreeNode* successor(TreeNode* root) {\n        root = root->right;\n        while (root->left) {\n            root = root->left;\n        }\n        return root;\n    }\n    \npublic:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        // base case 1: root = nullptr\n        if (!root) {\n            return nullptr;\n        }\n        \n        // base case 2: root->val = key, but one of the subtree is empty\n        if (root->val == key) {\n            if (!root->left) {\n                return root->right;\n            }\n            if (!root->right) {\n                return root->left;\n            }\n            \n            // base case 3: none of the subtrees are empty\n            TreeNode * suc = successor(root);\n            root->val = suc->val;\n            root->right = deleteNode(root->right, suc->val);\n            return root;\n        }\n        \n        if (key < root->val) {\n            root->left = deleteNode(root->left, key);\n        } else {\n            root->right = deleteNode(root->right, key);\n        }\n        return root;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-node-in-a-bst","has_notes":false,"flag_type":1}