{"id":395822594,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1600129299,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/395822594/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    TreeNode* hot;\n    pair<TreeNode*, TreeNode*> successor(TreeNode* cur) {\n        hot = cur;\n        cur = cur->right;\n        while (cur && cur->left) {\n            hot = cur;\n            cur = cur->left;\n        }\n        return pair<TreeNode*, TreeNode*>{hot, cur};\n    }\npublic:\n    TreeNode* deleteNode(TreeNode* root, int key) {\n        hot = nullptr;\n        TreeNode* oldroot(root);\n        stack<TreeNode*> s;\n        bool found = false;\n        while (root || !s.empty()) {\n            while (root) {\n                s.push(root);\n                root = root->left;\n            }\n            root = s.top();\n            s.pop();\n            if (root->val == key) {\n                found = true;\n                break;\n            }\n            hot = root;\n            root = root->right;\n        }\n        if (found) {\n            if (root->left && root->right) {\n                auto [hot, nxt] = successor(root);\n                swap(nxt->val, root->val);\n                hot->left == nxt ? hot->left = nullptr : hot->right = nullptr;\n            } else {\n                if (root->left) {\n                    root->val = root->left->val;\n                    root->left = nullptr;\n                } else if (root->right) {\n                    root->val = root->right->val;\n                    root->right = nullptr;\n                } else {\n                    if (hot) {\n                        hot->left = nullptr;\n                        hot->right = nullptr;\n                    } else {\n                        return hot;\n                    }\n                }\n            }\n        }\n        return oldroot;\n    }\n};","compare_result":"1111101101111101001101110011000101011110100101010011100100010101000110010101010110010110101","title_slug":"delete-node-in-a-bst","has_notes":false,"flag_type":1}