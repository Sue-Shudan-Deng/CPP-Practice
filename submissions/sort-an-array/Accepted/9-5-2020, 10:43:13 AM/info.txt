{"id":391431926,"lang":"cpp","lang_name":"C++","time":"2 years, 12 months","timestamp":1599327793,"status":10,"status_display":"Accepted","runtime":"132 ms","url":"/submissions/detail/391431926/","is_pending":"Not Pending","title":"Sort an Array","memory":"31.5 MB","code":"class Solution {\npublic:\n    // ///////////////////\n    // // Counting sort //\n    // ///////////////////\n    // vector<int> sortArray(vector<int>& nums) {\n    //     // step1: build the counter\n    //     map<int, int> counter;\n    //     for (auto i : nums) counter[i]++;\n    //     int k = 0;\n    //     for (auto i: counter) {\n    //         auto [val, freq] = i;\n    //         for (int i=0; i<freq; ++i) {\n    //             nums[k++] = val;\n    //         }\n    //     }\n    //     return nums;\n    // }\n    \n    /////////////////////////////\n    // merge sort(top to down) //\n    /////////////////////////////\n    \n    vector<int> sortArray(vector<int>& nums) {\n        // step1: define merge function \n        auto merge = [] (vector<int>& nums, int start, int middle, int end) -> void {\n            auto p = start;\n            auto q = middle;\n            vector<int> sorted_nums;\n            while (p < middle && q < end) {\n                if (nums[p] < nums[q]) {\n                    sorted_nums.push_back(nums[p]); p++;\n                } else {\n                    sorted_nums.push_back(nums[q]); q++;\n                }\n            }\n            while (p < middle) {\n                sorted_nums.push_back(nums[p]); p++;\n            }\n            while (q < end) {\n                sorted_nums.push_back(nums[q]); q++;\n            }\n            copy(sorted_nums.begin(), sorted_nums.end(), nums.begin()+start);\n        };\n        \n        int step_size = 2;\n        int start, middle, end = 0;\n        while (step_size < nums.size() * 2) {\n            for (int i = 0; i < nums.size(); i += step_size) {\n                start = i; \n                middle = start + step_size/2;\n                end = (start + step_size) < nums.size() ? (start + step_size) : nums.size();\n                merge(nums, start, middle, end);\n                // cout << start << \" \" << middle << \" \" << end << endl;\n            }\n            step_size *= 2;\n        }\n        return nums;\n    }\n};","compare_result":"11111111111","title_slug":"sort-an-array","has_notes":false,"flag_type":1}