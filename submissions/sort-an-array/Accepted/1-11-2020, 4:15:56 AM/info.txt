{"id":293193453,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578744956,"status":10,"status_display":"Accepted","runtime":"396 ms","url":"/submissions/detail/293193453/","is_pending":"Not Pending","title":"Sort an Array","memory":"18.7 MB","code":"class Solution:\n    # def sortArray(self, nums: List[int]) -> List[int]:\n    #     \"\"\"\n    #     Count sort，赖皮\n    #     \"\"\"\n    #     C, m, M, S = collections.Counter(nums), min(nums), max(nums), []\n    #     for n in range(m, M+1):\n    #         S.extend([n]*C[n])\n    #     return S\n    \n    def sortArray(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Bottom-up mergesort\n        \"\"\"\n        def merge(l1: List[int], l2: List[int]) -> List[int]:\n            res = []\n            left_cursor = 0\n            right_cursor = 0\n            while left_cursor < len(l1) and right_cursor < len(l2):\n                if l1[left_cursor] < l2[right_cursor]:\n                    res.append(l1[left_cursor])\n                    left_cursor += 1\n                else:\n                    res.append(l2[right_cursor])\n                    right_cursor += 1\n            res.extend(l1[left_cursor:])\n            res.extend(l2[right_cursor:])\n            return res\n            \n        size = 1\n        while size < len(nums):\n            size += size\n            for pos in range(0, len(nums), size):  # 这一步的想法是关键\n                start = pos\n                mid = pos + size // 2\n                end = pos + size\n                nums[start:end] = merge(nums[start:mid], nums[mid:end])\n        return nums\n                ","compare_result":"1111111111","title_slug":"sort-an-array","has_notes":false,"flag_type":1}