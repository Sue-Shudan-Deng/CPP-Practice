{"id":300896932,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1581033368,"status":10,"status_display":"Accepted","runtime":"388 ms","url":"/submissions/detail/300896932/","is_pending":"Not Pending","title":"Sort an Array","memory":"18.6 MB","code":"class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Counting sort，赖皮\n        \"\"\"\n        C, m, M, S = collections.Counter(nums), min(nums), max(nums), []\n        for n in range(m, M+1):\n            S.extend([n]*C[n])\n        return S\n    \nclass Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        \"\"\"\n        Bottom-up mergesort\n        \"\"\"\n        def merge(l1: List[int], l2: List[int]) -> List[int]:\n            res = []\n            left_cursor = 0\n            right_cursor = 0\n            while left_cursor < len(l1) and right_cursor < len(l2):\n                if l1[left_cursor] < l2[right_cursor]:\n                    res.append(l1[left_cursor])\n                    left_cursor += 1\n                else:\n                    res.append(l2[right_cursor])\n                    right_cursor += 1\n            res.extend(l1[left_cursor:])\n            res.extend(l2[right_cursor:])\n            return res\n            \n        size = 1\n        while size < len(nums):\n            size += size\n            for pos in range(0, len(nums), size):  # 这一步的想法是关键\n                start = pos\n                mid = pos + size // 2\n                end = pos + size\n                nums[start:end] = merge(nums[start:mid], nums[mid:end])\n        return nums\n              \n# class Solution:        \n#     def sortArray(self, nums: List[int]) -> List[int]:\n#         \"\"\"\n#         quick sort\n#         \"\"\"\n#         n = len(nums)\n#         self.qsort(nums, 0, n - 1) # 一定要注意，python是按引用传递的，不是按值传递，因此nums的值会修改\n#         return nums\n\n#     def qsort(self, lst, lo, hi):\n#         \"\"\"\n#         Helper\n#         :param lst: the list to sort\n#         :param lo:  the index of the first element in the list\n#         :param hi:  the index of the last element in the list\n#         :return: the sorted list\n#         \"\"\"\n#         if lo < hi:\n#             p = self.partition(lst, lo, hi)\n#             # print(lst, hi, p)\n#             self.qsort(lst, lo, p - 1)\n#             # print(lst, hi)\n#             self.qsort(lst, p + 1, hi)\n    \n#     def partition(self, lst, lo, hi):\n#         \"\"\"\n#         简单双向版本，pivot取lo\n#         实践证明面试一定不要尝试三数取中法，edge case太麻烦\n#         \"\"\"\n#         pivot = lo\n#         lo += 1\n\n#         while True:\n#             while lo <= hi and lst[hi] >= lst[pivot]:\n#                 hi -= 1\n#             while lo <= hi and lst[lo] <= lst[pivot]:\n#                 lo += 1\n#             if lo <= hi:\n#                 lst[lo], lst[hi] = lst[hi], lst[lo]\n#             else:\n#                 break\n#         lst[pivot], lst[hi] = lst[hi], lst[pivot]\n#         return hi","compare_result":"1111111111","title_slug":"sort-an-array","has_notes":false,"flag_type":1}