{"id":391445683,"lang":"cpp","lang_name":"C++","time":"2 years, 12 months","timestamp":1599329951,"status":10,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/391445683/","is_pending":"Not Pending","title":"Sort an Array","memory":"15.9 MB","code":"// class Solution {\n// public:\n    // ///////////////////\n    // // Counting sort //\n    // ///////////////////\n    // vector<int> sortArray(vector<int>& nums) {\n    //     // step1: build the counter\n    //     map<int, int> counter;\n    //     for (auto i : nums) counter[i]++;\n    //     int k = 0;\n    //     for (auto i: counter) {\n    //         auto [val, freq] = i;\n    //         for (int i=0; i<freq; ++i) {\n    //             nums[k++] = val;\n    //         }\n    //     }\n    //     return nums;\n    // }\n    \n    // ///////////////////////////\n    // // merge sort(botton up) //\n    // ///////////////////////////\n    \n//     vector<int> sortArray(vector<int>& nums) {\n//         // step1: define merge function \n//         auto merge = [] (vector<int>& nums, int start, int middle, int end) -> void {\n//             auto p = start;\n//             auto q = middle;\n//             vector<int> sorted_nums;\n//             while (p < middle && q < end) {\n//                 if (nums[p] < nums[q]) {\n//                     sorted_nums.push_back(nums[p]); p++;\n//                 } else {\n//                     sorted_nums.push_back(nums[q]); q++;\n//                 }\n//             }\n//             while (p < middle) {\n//                 sorted_nums.push_back(nums[p]); p++;\n//             }\n//             while (q < end) {\n//                 sorted_nums.push_back(nums[q]); q++;\n//             }\n//             copy(sorted_nums.begin(), sorted_nums.end(), nums.begin()+start);\n//         };\n        \n//         int step_size = 2;\n//         int start, middle, end = 0;\n//         while (step_size < nums.size() * 2) {\n//             for (int i = 0; i < nums.size(); i += step_size) {\n//                 start = i; \n//                 middle = start + step_size/2;\n//                 end = (start + step_size) < nums.size() ? (start + step_size) : nums.size();\n//                 merge(nums, start, middle, end);\n//                 // cout << start << \" \" << middle << \" \" << end << endl;\n//             }\n//             step_size *= 2;\n//         }\n//         return nums;\n//     }\n// };\nclass Solution {\n    ////////////////\n    // quick sort //\n    ////////////////\nprivate:\n    int partition(vector<int>& nums, int lo, int hi) {\n        int pivot = lo;\n        lo++;\n        while (true) {\n            while (lo <= hi && nums[lo] <= nums[pivot]) lo++;\n            while (lo <= hi && nums[hi] >= nums[pivot]) hi--;\n            if (lo <= hi) {\n                swap(nums[lo], nums[hi]); // 说明两边都遇到瓶颈了，交换即可\n            } else {\n                break;\n            }\n        }\n        swap(nums[pivot], nums[hi]);\n        return hi;\n    }\n    \n    void qsort(vector<int>& nums, int l, int r) {\n        if (l >= r) return;   \n        int p = partition(nums, l, r);\n        qsort(nums, l, p-1);\n        qsort(nums, p+1, r);\n    }\n        \npublic:\n    vector<int> sortArray(vector<int>& nums) {\n        qsort(nums, 0, nums.size()-1);\n        return nums;\n    }\n};","compare_result":"11111111111","title_slug":"sort-an-array","has_notes":false,"flag_type":1}