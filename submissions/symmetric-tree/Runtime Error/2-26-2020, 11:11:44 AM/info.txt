{"id":307149652,"lang":"python","lang_name":"Python","time":"3 years, 6 months","timestamp":1582744304,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/307149652/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        return self.isMirror(root, root)\n    def isMirror(self, t1, t2):\n        if not t1 and not t2:\n            return True\n        elif not t1 or not t2:\n            return False\n        else:\n            return t1.val == t2.val and self.isMirror(t1.left, t2.right) and self.isMirror(t1.right, t2.left)\n    \nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        queue = collections.deque()\n        queue.append([root, root])\n        while queue:\n            t1 = queue.popleft()\n            t2 = queue.popleft()\n            if not t1 and not t2:\n                return True\n            if not t1 or not t2:\n                return False\n            if t1.val != t2.val:\n                return False\n            queue.append(t1.left)\n            queue.append(t2.right)\n            queue.append(t1.right)\n            queue.append(t2.left)\n        return True","compare_result":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"symmetric-tree","has_notes":false,"flag_type":1}