{"id":311830509,"lang":"python","lang_name":"Python","time":"3 years, 5 months","timestamp":1584029364,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/311830509/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        方法一：Recursion\n        \"\"\"\n        return self.isMirror(root, root)\n    def isMirror(self, t1, t2):\n        if not t1 and not t2:\n            return True\n        if not t1 or not t2:\n            return False\n        return t1.val == t2.val and self.isMirror(t1.left, t2.right) and self.isMirror(t1.right, t2.left)\n\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        方法二：Iteration\n        \"\"\"\n        queue = collections.deque([(root, root)])\n        while queue:\n            t1, t2 = queue.popleft()\n            if not t1 and not t2:\n                return True\n            if not t1 or not t2:\n                return False\n            if t1.val != t2.val:\n                return False\n            queue.append((t1.left, t2.right))\n            queue.append((t1.right, t2.left))\n        return True\n    ","compare_result":"111111111111111111111111111111111110111111110001111011011011110001110111101011111110000010110100101101101101011010110010111001111111111101000010111110011111011011100111111100101100001100110010011","title_slug":"symmetric-tree","has_notes":false,"flag_type":1}