{"id":292550315,"lang":"python3","lang_name":"Python3","time":"3 years, 8 months","timestamp":1578542306,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/292550315/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n# Recursive:\n# class Solution:\n#     def isSymmetric(self, root: TreeNode) -> bool:\n#         return self.isMirror(root, root)\n#     def isMirror(self, t1: TreeNode, t2: TreeNode) -> bool:\n#         if not t1 and not t2:\n#             return True\n#         elif not t1 or not t2:\n#             return False\n#         return t1.val == t2.val and self.isMirror(t1.left, t2.right) and self.isMirror(t2.left, t1.right)\n    \n# Iterative:\nfrom collections import deque\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        queue = deque([root, root])\n        while queue:\n            t1 = queue.popleft()\n            t2 = queue.popleft()\n            print(\"t1:\", t1)\n            print(\"t2:\", t2)\n            if not t1 and not t2:\n                pass\n            if not t1 or not t2:\n                return False\n            if t1.val != t2.val:\n                return False\n            queue.append(t1.left)\n            queue.append(t2.right)\n            queue.append(t1.right)\n            queue.append(t2.left)\n        return True","compare_result":"011100111010101111101101010101100011001111011110111111111101101111011000110110001111111101001111011110010110110111101101011110001001110010111101000011100110101100011000100111110011110011001101111","title_slug":"symmetric-tree","has_notes":false,"flag_type":1}