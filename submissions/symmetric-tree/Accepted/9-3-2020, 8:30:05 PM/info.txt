{"id":390753952,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1599190205,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/390753952/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"16.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\n// recursion\n// class Solution {\n//     private:\n//         bool isMirror(TreeNode* t1, TreeNode* t2) {\n//             if (!t1 && !t2) return true;\n//             if (!t1 || !t2) return false;\n//             return (t1->val == t2->val) && isMirror(t1->left, t2->right) && isMirror(t1->right, t2->left); \n//         }\n//     public:\n//         bool isSymmetric(TreeNode* root) {\n//             if (!root) return true;\n//             return isMirror(root->left, root->right);\n//         }\n// };\n\n// iteration\nclass Solution {\n    public:\n        bool isSymmetric(TreeNode* root) {\n            if (!root) return true;\n            queue<pair<TreeNode*, TreeNode*>> q;\n            q.emplace(root->left, root->right);\n            while (!q.empty()) {\n                auto [t1, t2] = q.front();\n                q.pop();\n                if (!t1 && !t2) continue;\n                if ((!t1 || !t2) || (t1->val != t2 ->val)) return false;\n                q.emplace(t1->left, t2->right);\n                q.emplace(t1->right, t2->left);\n            }\n            return true;\n        }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree","has_notes":false,"flag_type":1}