{"id":390749313,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1599189458,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/390749313/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"16.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n\n    private:\n        bool isMirror(TreeNode* t1, TreeNode* t2) {\n            if (!t1 && !t2) return true;\n            if (!t1 || !t2) return false;\n            return (t1->val == t2->val) && isMirror(t1->left, t2->right) && isMirror(t1->right, t2->left); \n        }\n    \n    public:\n        bool isSymmetric(TreeNode* root) {\n            if (!root) return true;\n            return isMirror(root->left, root->right);\n        }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree","has_notes":false,"flag_type":1}