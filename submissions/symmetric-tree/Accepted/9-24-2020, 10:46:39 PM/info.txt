{"id":400438245,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1601012799,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/400438245/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"14.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n# Recursive:\nclass Solution:\n    def isSymmetric(self, root: TreeNode) -> bool:\n        if not root: \n            return True\n        return self.isMirror(root.left, root.right)\n    \n    def isMirror(self, t1: TreeNode, t2: TreeNode) -> bool:\n        if not t1 and not t2:\n            return True\n        if not t1 or not t2:\n            return False\n        \n        l = self.isMirror(t1.left, t2.right)\n        r = self.isMirror(t2.left, t1.right)\n        \n        return t1.val == t2.val and l and r \n    \n# Iterative:\n# from collections import deque\n# class Solution:\n#     def isSymmetric(self, root: TreeNode) -> bool:\n#         if not root: return True\n#         queue = deque([root.left, root.right])\n#         while queue:\n#             t1 = queue.popleft()\n#             t2 = queue.popleft()\n#             if not t1 and not t2:\n#                 continue\n#             if not t1 or not t2:\n#                 return False\n#             if t1.val != t2.val:\n#                 return False\n#             queue.append(t1.left)\n#             queue.append(t2.right)\n#             queue.append(t1.right)\n#             queue.append(t2.left)\n#         return True","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree","has_notes":false,"flag_type":1}