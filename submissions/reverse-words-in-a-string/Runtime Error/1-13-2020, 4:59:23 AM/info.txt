{"id":293816901,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578920363,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/293816901/","is_pending":"Not Pending","title":"Reverse Words in a String","memory":"N/A","code":"class Solution:\n    def reverseWords(self, s: str) -> str:\n        \"\"\"\n        这类题可归类为子部分顺序翻转\n        做法是全局reverse + 部分reverse\n        方法1: build-in\n        注意join的用法：(a: str).join(b: List), \n        a将成为b各个子部分之间连接的关节\n        \"\"\"\n        return \"\".join(reversed(s.split()))\n    \n\nclass Solution:\n    def reverseWords(self, s: str) -> str:\n        \"\"\"\n        方法2: 全局翻转 + 部分翻转\n        \"\"\"\n        # Step1: trim the spaces\n        def trim(s: str):\n            lo, hi = 0, len(s) - 1\n            while lo <= hi and s[lo] == ' ':\n                lo += 1\n            while lo <= hi and s[hi] == ' ':\n                hi -= 1\n            \n            output = []\n            while lo <= hi:\n                if s[lo] != ' ':\n                    output.append(s[lo])\n                elif output[-1] != ' ':  # 这一步极其巧妙\n                    output.append(s[lo])\n                lo += 1\n            return output\n        \n        # Step2: reverse function \n        def reverse(l: list, left: int, right: int):\n            while left < right:\n                l[left], l[right] = l[right], l[left]\n                left, right = left + 1, right - 1\n                \n        # Step3: reverse each word\n        def reverse_each_word(l: list) -> None:\n            \"\"\"\n            双指针\n            \"\"\"\n            lo, hi = 0, 0\n            n = len(l)\n            \n            while lo < n:\n                while hi < n and l[hi] != ' ':\n                    hi += 1\n                reverse(l, lo, hi - 1)\n                lo = hi + 1  # 需要+1是因为有个空格\n                hi += 1\n            \n        l = trim(s)\n        reverse(l, 0, len(l) - 1)\n        reverse_each_word(l)\n        return \"\".join(l)\n    \nclass Solution:\n    def reverseWords(self, s: str) -> str:\n        \"\"\"\n        方法三: 用deque\n        原因: 主要是因为可以appendleft\n        \"\"\"\n        lo, hi = 0, len(s) - 1\n        \n        while lo <= hi and s[lo] == ' ':\n            lo += 1\n        while lo <= hi and s[hi] == ' ':\n            hi -= 1\n        \n        end = lo\n        queue, word = collections.deque(), []\n        while end <= hi:\n            if s[end] != ' ':\n                word.append(s[end])\n            elif word[-1] != ' ': \n                queue.appendleft(\"\".join(word))\n                word = []\n                lo = end + 1\n            end += 1\n        queue.appendleft(\"\".join(word))\n        return \" \".join(queue)","compare_result":"1100000000000000000000000","title_slug":"reverse-words-in-a-string","has_notes":false,"flag_type":1}