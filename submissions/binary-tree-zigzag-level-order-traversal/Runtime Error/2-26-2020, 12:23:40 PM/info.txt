{"id":307166759,"lang":"python3","lang_name":"Python3","time":"3 years, 6 months","timestamp":1582748620,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/307166759/","is_pending":"Not Pending","title":"Binary Tree Zigzag Level Order Traversal","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:\n        \"\"\"\n        注：这里使用recursion的做法应该是完全不可行的\n        必须一次性把下一层的所有结点都装进deque才行\n        \"\"\"\n        res, level = [], 0\n        queue = collections.deque([root])\n        isreverse = False\n        while queue:\n            if len(res) < level + 1:\n                res.append([])\n            for _ in range(len(queue)):\n                root = queue.popleft()\n                res[level].append(root.val)\n                if root.left:\n                    queue.append(root.left)\n                if root.right:\n                    queue.append(root.right)\n            if isreverse:\n                res[level] = res[level][::-1]\n            level += 1\n            isreverse = not isreverse\n        return res","compare_result":"100000000000000000000000000000000","title_slug":"binary-tree-zigzag-level-order-traversal","has_notes":false,"flag_type":1}