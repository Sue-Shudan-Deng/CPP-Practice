{"id":391129348,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1599267806,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/391129348/","is_pending":"Not Pending","title":"Reverse Linked List","memory":"8.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\n\n// recursion\n// class Solution {\n// public:\n//     ListNode* reverseList(ListNode* head) {\n//         if (!head || !head->next) return head;\n//         ListNode* reversed_head = reverseList(head->next);\n//         head->next->next = head;\n//         head->next = nullptr;\n//         return reversed_head;\n//     }\n// };\n\n// iteration\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode *pre = nullptr;\n        ListNode *cur = head;\n        ListNode *nxt = nullptr;\n        while (cur) {\n            nxt = cur->next;\n            cur->next = pre;\n            pre = cur;\n            cur = nxt;\n        }\n        return pre;\n    }\n};","compare_result":"111111111111111111111111111","title_slug":"reverse-linked-list","has_notes":false,"flag_type":1}