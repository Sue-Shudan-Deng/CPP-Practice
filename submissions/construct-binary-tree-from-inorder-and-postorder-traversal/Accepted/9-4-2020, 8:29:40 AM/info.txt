{"id":390958857,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1599233380,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/390958857/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"26.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    \nprivate:\n    map<int, int> m;\n    int size = 0;\n    TreeNode* buildNode(int left_index, int right_index, vector<int>& postorder) {\n        if (left_index > right_index) return nullptr;\n        int cur = postorder.back();\n        postorder.pop_back();\n        TreeNode* root = new TreeNode(cur);\n        int root_index = m.at(cur);\n        root->right = buildNode(root_index+1, right_index, postorder);\n        root->left = buildNode(left_index, root_index-1, postorder);\n        return root;\n    }\n    \npublic:\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\n        size = inorder.size();\n        for (int i=0; i < size; ++i) {\n            m.emplace(inorder.at(i), i);\n        }\n        // for (auto &i : m) cout << i.first << \" \" << i.second << endl;\n        return buildNode(0, size-1, postorder);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false,"flag_type":1}