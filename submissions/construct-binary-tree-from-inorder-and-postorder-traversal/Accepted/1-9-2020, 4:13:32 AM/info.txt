{"id":292652128,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578572012,"status":10,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/292652128/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"17 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n# Recursion:\nclass Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> TreeNode:\n        def helper(left_index, right_index):\n            if left_index > right_index:\n                return None\n            # 注：答案的解法压根没刻意分割postorder\n            root_val = postorder.pop()\n            root = TreeNode(root_val)\n            root_index = mapping[root_val]\n            # 关键是先从右边开始\n            root.right = helper(root_index + 1, right_index)\n            root.left = helper(left_index, root_index - 1)\n            return root\n            \n        mapping = {v:k for k,v in enumerate(inorder)}\n        return helper(0, len(postorder) - 1)","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false,"flag_type":1}