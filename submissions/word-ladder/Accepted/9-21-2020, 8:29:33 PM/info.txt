{"id":399010089,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1600745373,"status":10,"status_display":"Accepted","runtime":"564 ms","url":"/submissions/detail/399010089/","is_pending":"Not Pending","title":"Word Ladder","memory":"38.8 MB","code":"class Solution {\npublic:\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n        map<string, vector<string>> all_comb;\n        map<string, bool> visited;\n        int n = beginWord.size();\n        for (auto w : wordList) {\n            for (int i = 0; i < n; ++i) {\n                all_comb[w.substr(0, i) + \"*\" + w.substr(i+1, n-i-1)].push_back(w);\n            }\n            visited[w] = false;\n        }\n        deque<pair<string, int>> q = {{beginWord, 1}};\n        \n        while (!q.empty()) {\n            auto [w, step] = q.front();\n            q.pop_front();\n            visited[w] = true;\n            for (int i = 0; i < n; ++i) {\n                for (auto next_w : all_comb[w.substr(0, i) + \"*\" + w.substr(i+1, n-i-1)]) {\n                    if (next_w == endWord) {\n                        return step + 1;\n                    }\n                    if (!visited[next_w]) {\n                        q.emplace_back(next_w, step + 1);\n                    }   \n                }\n                all_comb.erase(w.substr(0, i) + \"*\" + w.substr(i+1, n-i-1));\n            }\n        }\n        return 0;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111","title_slug":"word-ladder","has_notes":false,"flag_type":1}