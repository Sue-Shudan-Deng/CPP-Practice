{"id":307195285,"lang":"python3","lang_name":"Python3","time":"3 years, 6 months","timestamp":1582756191,"status":10,"status_display":"Accepted","runtime":"140 ms","url":"/submissions/detail/307195285/","is_pending":"Not Pending","title":"Word Ladder","memory":"16.2 MB","code":"class Solution:\n    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:\n        if not beginWord or not endWord or not wordList or endWord not in wordList:\n            return 0\n        all_combo = collections.defaultdict(list)\n        L = len(beginWord)\n        for word in wordList:\n            for i in range(L):\n                all_combo[word[:i] + '*' + word[i+1:]].append(word)\n        # if wordList has 6 words and each word has 3 letters, then\n        # the size of all_combo is 6*3 = 18\n        visited, step = {beginWord: True}, 1\n        queue = collections.deque([(beginWord, step)])\n        while queue:\n            word, step = queue.popleft()\n            for i in range(L):\n                for w in all_combo[word[:i] + '*' + word[i+1:]]:\n                    if w == endWord:\n                        return step + 1\n                    if w == word or visited.get(w, False):\n                        continue\n                    if not visited.get(w, False):\n                        visited[w] = True\n                        queue.append((w, step + 1))\n                all_combo[word[:i] + '*' + word[i+1:]] = []\n        return 0","compare_result":"1111111111111111111111111111111111111111","title_slug":"word-ladder","has_notes":false,"flag_type":1}