{"id":395807257,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1600126178,"status":10,"status_display":"Accepted","runtime":"192 ms","url":"/submissions/detail/395807257/","is_pending":"Not Pending","title":"Insert into a Binary Search Tree","memory":"57.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    \n// iteration:\npublic:\n    TreeNode* insertIntoBST(TreeNode* root, int val) {\n        if (!root) {\n            return new TreeNode(val);\n        }\n        TreeNode* oldroot(root);\n        TreeNode* hot;\n        while (root && root->val != val) {\n            hot = root;\n            root = (val < root->val ? root->left : root->right);\n        }\n        if (val < hot->val) {\n            hot->left = new TreeNode(val);\n        } else {\n            hot->right = new TreeNode(val);\n        }\n        return oldroot;\n    }\n};\n\n// recurison:\n// public TreeNode insertIntoBST(TreeNode root, int val) {\n//     if (root == null) {\n//         return new TreeNode(val);   // return a new node if root is null\n//     }\n//     if (root.val < val) {           // insert to the right subtree if val > root->val\n//         root.right = insertIntoBST(root.right, val);\n//     } else {                        // insert to the left subtree if val <= root->val\n//         root.left = insertIntoBST(root.left, val);\n//     }\n//     return root;\n// }","compare_result":"11111111111111111111111111111111111","title_slug":"insert-into-a-binary-search-tree","has_notes":false,"flag_type":1}