{"id":396186086,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1600191252,"status":10,"status_display":"Accepted","runtime":"332 ms","url":"/submissions/detail/396186086/","is_pending":"Not Pending","title":"Design HashMap","memory":"45.4 MB","code":"#define MAX_LEN 771\nclass MyHashMap {\n    \nprivate:\n    vector<pair<int, int>> s[MAX_LEN];\n    int getIndex(int key) {\n        return key % MAX_LEN;\n    }\n    int getPos(int key, int idx) {\n        for (int i = 0; i < s[idx].size(); ++i) {\n            if (s[idx][i].first == key) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    \npublic:\n    /** Initialize your data structure here. */\n    MyHashMap() {\n        \n    }\n    \n    /** value will always be non-negative. */\n    void put(int key, int value) {\n        int idx = getIndex(key);\n        int pos = getPos(key, idx);\n        if (pos == -1) {\n            s[idx].emplace_back(key, value);\n        } else {\n            s[idx][pos] = pair<int, int>{key, value};\n        }\n    }\n    \n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    int get(int key) {\n        int idx = getIndex(key);\n        int pos = getPos(key, idx);\n        if (pos == -1) {\n            return pos;\n        }\n        return s[idx][pos].second;\n    }\n    \n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    void remove(int key) {\n        int idx = getIndex(key);\n        int pos = getPos(key, idx);\n        if (pos >= 0) {\n            s[idx].erase(s[idx].begin() + pos);\n        }\n    }\n};\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * MyHashMap* obj = new MyHashMap();\n * obj->put(key,value);\n * int param_2 = obj->get(key);\n * obj->remove(key);\n */","compare_result":"111111111111111111111111111111111","title_slug":"design-hashmap","has_notes":false,"flag_type":1}