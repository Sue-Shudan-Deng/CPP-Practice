{"id":417596013,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1604718029,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/417596013/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"14.2 MB","code":"class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        \n        phone = {'2': ['a', 'b', 'c'],\n         '3': ['d', 'e', 'f'],\n         '4': ['g', 'h', 'i'],\n         '5': ['j', 'k', 'l'],\n         '6': ['m', 'n', 'o'],\n         '7': ['p', 'q', 'r', 's'],\n         '8': ['t', 'u', 'v'],\n         '9': ['w', 'x', 'y', 'z']}\n        \n        ans = []\n        def backtrace(next_digit = digits, cur = \"\"):\n            if next_digit == \"\":\n                ans.append(cur[:])\n                return\n\n            for i in phone[next_digit[0]]:\n                backtrace(next_digit[1:], cur + i)\n                \n        backtrace()\n        return ans if digits != \"\" else []","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false,"flag_type":1}