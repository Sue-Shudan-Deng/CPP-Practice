{"id":418958591,"lang":"python3","lang_name":"Python3","time":"2 years, 9 months","timestamp":1605046866,"status":10,"status_display":"Accepted","runtime":"728 ms","url":"/submissions/detail/418958591/","is_pending":"Not Pending","title":"01 Matrix","memory":"17.2 MB","code":"class Solution:\n    def updateMatrix(self, matrix: List[List[int]]) -> List[List[int]]:\n        \"\"\"\n        这里的方法是从0开始BFS\n        \"\"\" \n        row = len(matrix)\n        col = len(matrix[0])\n        queue = collections.deque()\n        dist = [[float(\"inf\") for _ in range(col)] for _ in range(row)]  # 相当于初始化为 not visited\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        \n        for r in range(row):\n            for c in range(col):\n                if matrix[r][c] == 0:\n                    dist[r][c] = 0\n                    queue.append((r,c))\n        \n        while queue:\n            r, c = queue.popleft()\n            for d in directions:\n                new_r = r + d[0]\n                new_c = c + d[1]\n                if not (new_r < 0 or new_r > row-1 or new_c < 0 or new_c > col-1):\n                    if dist[new_r][new_c] > dist[r][c] + 1:  # unvisited\n                        dist[new_r][new_c] = dist[r][c] + 1\n                        queue.append((new_r, new_c))\n                \n        return dist\n            ","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"01-matrix","has_notes":false,"flag_type":1}