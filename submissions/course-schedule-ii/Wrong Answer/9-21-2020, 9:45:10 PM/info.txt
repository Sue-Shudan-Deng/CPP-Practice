{"id":399040673,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600749910,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/399040673/","is_pending":"Not Pending","title":"Course Schedule II","memory":"N/A","code":"class Solution:\n    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:\n        graph = collections.defaultdict(list)\n        status = [\"unk\" for _ in range(numCourses)]\n        for p, q in prerequisites:\n            graph[q].append(p)\n            \n        def dfs(node, ans):\n            \"\"\"\n            whether or not can form a circle if we start from this node\n            \"\"\"\n            if status[node] == \"visited\":\n                return True  # True means OK\n            if status[node] == \"visiting\":\n                return False # False means CYCLE\n            # 所以某种意义上跟backtrack也没任何区别\n            # set\n            status[node] = \"visiting\"\n            ans.append(node)\n            for nei in graph[node]:\n                if not dfs(nei, ans):\n                    return False\n            # clear\n            status[node] = \"visited\"\n            return True\n            \n        ans = []\n        for node in range(numCourses):\n            if not dfs(node, ans):\n                return []\n        return ans","compare_result":"10110111111011011111111110111000100111010001","title_slug":"course-schedule-ii","has_notes":false,"flag_type":1}