{"id":390998776,"lang":"python3","lang_name":"Python3","time":"3 years","timestamp":1599241001,"status":10,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/390998776/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"24.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        # 如果在该树中找p, q\n        # 一个都没找到：返回none\n        # 只找到一个：返回找到的这个值所在的节点\n        # 找到两个，返回lca; 特别的，如果恰好一个在左边一个在右边(即split),则返回root node\n        if root is None:\n            return None\n        if root is p or root is q:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left and right:\n            return root\n        return left if left else right","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree","has_notes":false,"flag_type":1}