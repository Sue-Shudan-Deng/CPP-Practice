{"id":395903844,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600142299,"status":10,"status_display":"Accepted","runtime":"144 ms","url":"/submissions/detail/395903844/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"27 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n\n        def search(root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n            \"\"\"\n            这里我们从root开始搜索\n            如果只能在左边搜到，搜索左子树，反之搜索右子树\n            如果两边都恰好能搜到，只有可能这个root恰好位于两个节点的LCA处，否则绝对不可能\n            \"\"\"\n            if not root or root == p or root == q:\n                return root\n            left = search(root.left, p, q)\n            right = search(root.right, p, q)\n            if left and right:\n                return root\n            return left if left else right\n        \n        return search(root, p, q)","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree","has_notes":false,"flag_type":1}