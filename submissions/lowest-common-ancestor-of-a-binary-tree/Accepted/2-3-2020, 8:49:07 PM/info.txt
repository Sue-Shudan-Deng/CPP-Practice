{"id":300073650,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1580791747,"status":10,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/300073650/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"23.1 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        if root is None:\n            return None\n        if root is p or root is q:\n            return root\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n        if left and right:\n            return root\n        return left if left else right","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree","has_notes":false,"flag_type":1}