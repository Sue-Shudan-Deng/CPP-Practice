{"id":418941914,"lang":"python3","lang_name":"Python3","time":"2 years, 9 months","timestamp":1605042916,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/418941914/","is_pending":"Not Pending","title":"Video Stitching","memory":"N/A","code":"class Solution:\n    def videoStitching(self, clips: List[List[int]], T: int) -> int:\n        \"\"\"\n        method 1: Jump Game II\n        \"\"\"\n#         clips.sort(key=lambda x:x[0])\n#         clips_map = collections.defaultdict(int)\n#         for s, e in clips:\n#             if s != e:\n#                 clips_map[s] = max(clips_map[s], e)\n#         if not clips_map[0]:\n#             return -1\n#         l, r, flag, step = 0, 0, 0, 0\n#         while l <= r:\n#             new_r = 0\n#             for k in range(l, r + 1):\n#                 new_r = max(new_r, clips_map[k])\n#             l = r\n#             r = new_r\n#             step += 1\n#             if new_r >= T:\n#                 flag = 1\n#                 break\n                \n#         return step if flag else -1\n    \n        \"\"\"\n        method 2: 1235. Maximum Profit in Job Scheduling\n        \"\"\"\n        clips.sort(key=lambda x:x[1])\n        endtimes = [0] + [i[1] for i in clips]\n        if not clips[-1][1] >= T:\n            return -1\n        n, res = len(clips), -1\n        dp = [float(\"inf\") for _ in range(n + 1)]\n        dp[0] = 0\n        for i in range(1, n + 1):\n            s, e = clips[i-1]\n            pi = bisect.bisect_left(endtimes, s)\n            for j in range(i-1, pi-1, -1):\n                dp[i] = min(dp[i], dp[j] + 1)\n            if e >= T:\n                res = max(res, dp[i])\n        return res","compare_result":"1111000000000000000000000000000111111111111000000000","title_slug":"video-stitching","has_notes":false,"flag_type":1}