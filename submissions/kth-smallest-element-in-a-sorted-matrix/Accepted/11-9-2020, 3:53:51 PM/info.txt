{"id":418617086,"lang":"python3","lang_name":"Python3","time":"2 years, 9 months","timestamp":1604966031,"status":10,"status_display":"Accepted","runtime":"152 ms","url":"/submissions/detail/418617086/","is_pending":"Not Pending","title":"Kth Smallest Element in a Sorted Matrix","memory":"19.8 MB","code":"class Solution:\n    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:\n        \n        # def upper_bound(row, k):\n        #     l, r = 0, len(row)\n        #     while l < r:\n        #         m = l + (r - l) // 2\n        #         if row[m] > k:\n        #             r = m\n        #         else:\n        #             l = m + 1\n        #     \"\"\"\n        #     本应该return下标l - 1，但要计算个数，所以还是l\n        #     \"\"\"\n        #     return l\n        \n        l, r, n = matrix[0][0], matrix[-1][-1], len(matrix)\n        while l < r:\n            m = l + (r - l) // 2\n            total = 0\n            for row in matrix:\n                # total += upper_bound(row, m)\n                total += bisect.bisect(row, m)\n            \"\"\"\n            注意这里之所以选择upper bound是因为需要包含m\n            \"\"\"\n            if total >= k:\n                r = m\n            else:\n                l = m + 1\n        return l","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kth-smallest-element-in-a-sorted-matrix","has_notes":false,"flag_type":1}