{"id":417273177,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1604632713,"status":10,"status_display":"Accepted","runtime":"712 ms","url":"/submissions/detail/417273177/","is_pending":"Not Pending","title":"Path Sum III","memory":"15.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    # method 1: 560 number of subarray sum equal k  \n#     def pathSum(self, root: TreeNode, k: int) -> int:\n#         cnt = 0\n#         h = collections.defaultdict(int)\n        \n#         def dfs(root, cursum, h):\n#             nonlocal cnt\n#             if not root:\n#                 return\n#             cursum += root.val\n#             if cursum == k:\n#                 cnt += 1\n#             cnt += h[cursum - k]\n#             h[cursum] += 1 # add this node into consideration\n#             dfs(root.left, cursum, h)\n#             dfs(root.right, cursum, h)\n#             h[cursum] -= 1 # remove this node\n            \n#         dfs(root, 0, h)\n#         return cnt\n    \n    # method 2: Path sum I with modification, https://www.youtube.com/watch?v=EE8S0pAi_dM\n    def pathSum(self, root: TreeNode, k: int) -> int:\n        if not root:\n            return 0\n        def dfs(root, rest):\n            # start from an arbitrary root, count the number of sum k\n            if not root:\n                return 0\n            rest -= root.val\n            tmp = 1 if rest == 0 else 0\n            return tmp + dfs(root.left, rest) + dfs(root.right, rest)\n            \n        return dfs(root, k) + self.pathSum(root.left, k) + self.pathSum(root.right, k)\n        ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-sum-iii","has_notes":false,"flag_type":1}