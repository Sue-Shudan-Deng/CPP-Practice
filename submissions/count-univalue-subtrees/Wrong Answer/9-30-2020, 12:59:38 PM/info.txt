{"id":402811178,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1601495978,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/402811178/","is_pending":"Not Pending","title":"Count Univalue Subtrees","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int countUnivalSubtrees(TreeNode* root) {\n        if (!root) {\n            return 0;\n        }\n        if (!root->left && !root->right) {\n            return 1;\n        }\n        int left = countUnivalSubtrees(root->left);\n        int right = countUnivalSubtrees(root->right);\n        bool flag;\n        if (!root->right) {\n            flag = root->left->val == root->val ? 1 : 0;\n        }\n        else if (!root->left) {\n            flag = root->right->val == root->val ? 1 : 0;\n        } else {\n            flag = root->left->val == root->val && root->right->val == root->val ? 1 : 0;\n        }\n        return left + right + flag;\n    }\n};","compare_result":"11111111111111111001111111111111111111111111111111111111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111011111111011111111111111110110011","title_slug":"count-univalue-subtrees","has_notes":false,"flag_type":1}