{"id":402821699,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1601498001,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/402821699/","is_pending":"Not Pending","title":"Count Univalue Subtrees","memory":"16.7 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    \nprivate:\n    bool countUnivalSubtreesBool(TreeNode* root, int& count) {\n        if (!root) {\n            return false;\n        }\n        if (!root->left && !root->right) {\n            ++count;\n            return true;\n        }\n        bool left = countUnivalSubtreesBool(root->left, count);\n        bool right = countUnivalSubtreesBool(root->right, count);\n        bool flag;\n        if (!root->right) {\n            flag = left && root->left->val == root->val;\n        } else if (!root->left) {\n            flag = right && root->right->val == root->val;\n        } else {\n            flag = left && right && root->left->val == root->val && root->right->val == root->val;\n        }\n        if (flag) {\n            ++count;\n        }\n        return flag;\n    }\n    \npublic:\n    int countUnivalSubtrees(TreeNode* root) {\n        int count = 0;\n        bool res = countUnivalSubtreesBool(root, count);\n        return count;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-univalue-subtrees","has_notes":false,"flag_type":1}