{"id":292578497,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578548330,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/292578497/","is_pending":"Not Pending","title":"Count Univalue Subtrees","memory":"12.9 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\n# DFS: 成立条件: 左右子树分别是univaltree并且左右子树的最上方结点等于根结点\nclass Solution:\n    def countUnivalSubtrees(self, root: TreeNode) -> int:\n        self.count = 0\n        self.isunival(root)\n        return self.count\n        \n    def isunival(self, root: TreeNode) -> bool:\n        if not root:\n            return False\n        if not root.left and not root.right:\n            self.count += 1\n            return True\n        flag = True\n        if root.left:\n            flag &= (self.isunival(root.left) and root.left.val == root.val)\n        if root.right:\n            flag &= (self.isunival(root.right) and root.right.val == root.val)\n        if flag:\n            self.count += 1\n            return True\n        else:\n            return False","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-univalue-subtrees","has_notes":false,"flag_type":1}