{"id":390784503,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1599195013,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/390784503/","is_pending":"Not Pending","title":"Count Univalue Subtrees","memory":"16.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    \nprivate:\n    int count = 0;\n    bool isUnival(TreeNode* root) {\n        if (!root) return false;\n        else if (!root->left && !root->right) {\n            count ++;\n            return true;\n        } else {\n            bool flag = true;\n            if (root->left) flag &= (isUnival(root->left) && (root->left->val == root->val));\n            if (root->right) flag &= (isUnival(root->right) && (root->right->val == root->val));\n            if (flag) {\n                count ++;\n                return true;\n            } else {\n                return false;\n            }\n        }        \n    } \n    \npublic:\n    int countUnivalSubtrees(TreeNode* root) {\n        bool dummy = isUnival(root);\n        return count;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-univalue-subtrees","has_notes":false,"flag_type":1}