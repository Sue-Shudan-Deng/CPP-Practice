{"id":395244280,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600029410,"status":10,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/395244280/","is_pending":"Not Pending","title":"Flatten a Multilevel Doubly Linked List","memory":"14.5 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val, prev, next, child):\n        self.val = val\n        self.prev = prev\n        self.next = next\n        self.child = child\n\"\"\"\n\nclass Solution(object):\n\n    def flatten(self, head):\n        if not head:\n            return head\n\n        # pseudo head to ensure the `prev` pointer is never none\n        pseudoHead = Node(None, None, head, None)\n        self.flatten_dfs(pseudoHead, head)\n\n        # detach the pseudo head from the real head\n        pseudoHead.next.prev = None\n        return pseudoHead.next\n\n\n    def flatten_dfs(self, prev, curr):\n        \"\"\" return the tail of the flatten list \"\"\"\n        if not curr:\n            return prev\n\n        curr.prev = prev\n        prev.next = curr\n\n        # the curr.next would be tempered in the recursive function\n        tempNext = curr.next\n        tail = self.flatten_dfs(curr, curr.child) # 处理上下关系，tail指向新增的东西的尾部\n        curr.child = None\n        return self.flatten_dfs(tail, tempNext) # 处理左右关系","compare_result":"1111111111111111111111","title_slug":"flatten-a-multilevel-doubly-linked-list","has_notes":false,"flag_type":1}