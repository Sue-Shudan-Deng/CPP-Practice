{"id":396181202,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600190472,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/396181202/","is_pending":"Not Pending","title":"Design HashSet","memory":"N/A","code":"class MyHashSet:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.keyRange = 771\n        self.bucketArray = [Bucket() for i in range(self.keyRange)]\n        \n    def _hash(self, key: int) -> int:\n        return key % self.keyRange\n\n    def add(self, key: int) -> None:\n        bucketIndex = self._hash(key)\n        self.bucketArray[bucketIndex].insert(key)\n\n    def remove(self, key: int) -> None:\n        bucketIndex = self._hash(key)\n        self.bucketArray[bucketIndex].delete(key)\n\n    def contains(self, key: int) -> bool:\n        \"\"\"\n        Returns true if this set contains the specified element\n        \"\"\"\n        bucketIndex = self._hash(key)\n        return self.bucketArray[bucketIndex].exists(key)\n        \nclass Bucket:\n    def __init__(self):\n        self.set = BSTree()\n        \n    def insert(self, value: int):\n        self.set.root = self.set.insertBST(self.set.root, value)\n        \n    def delete(self, value: int):\n        self.set.root = self.set.deleteBST(self.set.root, value)\n\n    def exists(self, value: int) -> bool:\n        return self.set.searchBST(self.set.root, value) is not None\n    \nclass TreeNode:\n    def __init__(self, value):\n        self.val = value\n        self.left = None\n        self.right = None\n    \nclass BSTree:\n    def __init__(self):\n        self.root = None\n        \n    def searchBST(self, root: TreeNode, val: int) -> TreeNode:\n        if not root or root.val == val:\n            return root\n        if val < root.val:\n            return self.searchBST(root.left, val)\n        else:\n            return self.searchBST(root.right, val)\n        \n    def insertBST(self, root: TreeNode, val: int) -> TreeNode:\n        if not root:\n            return TreeNode(val)\n        if val < root.val:\n            root.left = self.insertBST(root.left, val)\n        elif val == root.val:\n            return root  # 这里注意！！！！！！！非常巧妙，有效规避了key相同的情况\n        else:\n            root.right = self.insertBST(root.right, val)\n        return root\n        \n    def successor(self, root: TreeNode) -> TreeNode:\n        root = root.right\n        while root.left:\n            root = root.left\n        return root\n        \n    def deleteBST(self, root: TreeNode, key: int) -> TreeNode:\n        if not root:\n            return root\n        \n        if root.val == key:\n            if not root.left:\n                root = self.deleteBST(root.right, key)\n            elif not root.right:\n                root = self.deleteBST(root.left, key)\n            else:\n                succ = self.successor(root)\n                root.val = succ.val\n                root.right = self.deleteBST(root.right, succ.val)\n            return root\n        \n        if val < root.val:\n            root.left = self.deleteBST(root.left, val)\n        else:\n            root.right = self.deleteBST(root.right, val)\n        return root\n\n# Your MyHashSet object will be instantiated and called as such:\n# obj = MyHashSet()\n# obj.add(key)\n# obj.remove(key)\n# param_3 = obj.contains(key)","compare_result":"1111111111111000000000000000","title_slug":"design-hashset","has_notes":false,"flag_type":1}