{"id":419270421,"lang":"python3","lang_name":"Python3","time":"2 years, 9 months","timestamp":1605121400,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/419270421/","is_pending":"Not Pending","title":"Graph Valid Tree","memory":"N/A","code":"class Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        graph = collections.defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n            \n        # topological sorting\n        visited, visiting = set(), set()\n        \n        def dfs(node):\n            if node in visited:\n                return True\n            if node in visiting:\n                return False\n            \n            visiting.add(node)\n            for nei in graph[node]:\n                if not dfs(nei):\n                    return False\n            \n            visiting.remove(node)\n            visited.add(node)\n            return True\n        \n        for i in range(n):\n            if not dfs(i):\n                return False\n            \n        return True","compare_result":"01011111110100001000011111100111111111111101","title_slug":"graph-valid-tree","has_notes":false,"flag_type":1}