{"id":301038856,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1581069265,"status":10,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/301038856/","is_pending":"Not Pending","title":"Matchsticks to Square","memory":"12.7 MB","code":"class Solution:\n    def makesquare(self, nums: List[int]) -> bool:\n        \n        def dfs(idx, groupid, tmpsum, visited):\n            \"\"\"\n            Assume we can only search in this group \n            \"\"\"\n            if groupid == 4:\n                return True\n            if tmpsum == avg:\n                # switch to the next group\n                return dfs(0, groupid + 1, 0, visited)\n            if tmpsum > avg:\n                return False\n            for i in range(idx, len(nums)):\n                # If nums[i] has been visited before (same value), \n                # there is no reason to visit it twice\n                if visited[i] == True:\n                    continue\n                if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                    continue\n                visited[i] = True\n                if dfs(i + 1, groupid, tmpsum + nums[i], visited):\n                    return True\n                visited[i] = False\n            return False\n        \n        if not nums:\n            return False\n        nums = sorted(nums)\n        summ = sum(nums)\n        avg = summ // 4\n        if summ != avg * 4:\n            return False\n        print(\"OK\")\n        visited = [False for _ in range(len(nums))]\n        return dfs(0, 1, 0, visited)\n            ","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"matchsticks-to-square","has_notes":false,"flag_type":1}