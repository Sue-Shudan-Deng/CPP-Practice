{"id":398439313,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1600632645,"status":10,"status_display":"Accepted","runtime":"128 ms","url":"/submissions/detail/398439313/","is_pending":"Not Pending","title":"Minimum Window Substring","memory":"7.9 MB","code":"class Solution {\npublic:\n    string minWindow(string s, string t) {\n        map<char, int> counter;\n        for (auto i : t) {\n            if (!counter.count(i)) {\n                counter[i] = 0;\n            }\n            ++counter[i];\n        }\n        int l = 0, r = 0, formed = 0;\n        int n = s.size();\n        map<char, int> cur;\n        tuple<int, int, int> ans{INT_MAX, l, r}; \n        char k;\n        while (r < n) {\n            k = s[r];\n            ++cur[k];\n            if (counter.count(k) && cur[k] == counter[k]) {\n                ++formed;\n            }\n            while (l <= r && formed == counter.size()) {\n                if (r-l+1 < get<0>(ans)) {\n                    ans = make_tuple(r-l+1, l, r);\n                }\n                k = s[l];\n                --cur[k];\n                if (counter.count(k) && cur[k] < counter[k]) {\n                    --formed;\n                }\n                ++l;\n            }\n            ++r;\n        }\n        return get<0>(ans) < INT_MAX ? s.substr(get<1>(ans), get<0>(ans)) : \"\";\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-substring","has_notes":false,"flag_type":1}