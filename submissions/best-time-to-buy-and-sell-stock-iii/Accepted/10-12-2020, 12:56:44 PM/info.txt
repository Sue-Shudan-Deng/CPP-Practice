{"id":407920728,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1602532604,"status":10,"status_display":"Accepted","runtime":"1232 ms","url":"/submissions/detail/407920728/","is_pending":"Not Pending","title":"Best Time to Buy and Sell Stock III","memory":"27.7 MB","code":"class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n    #     \"\"\"\n    #     method1: 思路参见buy-and-sell-stock-i and dicussion\n    #     https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/discuss/39608/A-clean-DP-solution-which-generalizes-to-k-transactions\n    #     \"\"\"\n    #     # K-dim DP         不用                    用\n    #     # dp[k][i] = max(dp[k][i-1], max(dp[k-1][j]+prices[i]-prices[j] for j in range(i-1)))\n    #     #          = max(dp[k][i-1], prices[i] + max(dp[k-1][j]-prices[j]))\n    #     n, K = len(prices), 2\n    #     dp = [[0 for _ in range(n+1)] for _ in range(K+1)]\n    #     for k in range(1, K+1):\n    #         tmp = float(\"-inf\")\n    #         for i in range(1, n+1):\n    #             dp[k][i] = max(dp[k][i-1], prices[i-1] + tmp)\n    #             tmp = max(tmp, dp[k-1][i] - prices[i-1])\n    #     return dp[K][-1]\n    \n        \"\"\"\n        method1: space complexity optimized version\n        \"\"\"\n        n, K = len(prices), 2\n        dp = [0 for _ in range(n+1)]\n        for k in range(K):\n            tmp = float(\"-inf\")\n            for i in range(1, n+1):\n                last = dp[i]\n                dp[i] = max(dp[i-1], prices[i-1] + tmp)\n                tmp = max(tmp, last - prices[i-1])\n        return dp[-1]\n    \n#     def maxProfit(self, prices: List[int]) -> int:\n#         \"\"\"\n#         method2: bidirectional DP (solution) 太巧妙了\n#         \"\"\"\n#         n = len(prices)\n#         dp_forward = [0 for _ in range(n+1)]\n#         dp_backward = [0 for _ in range(n+1)]\n#         tmp_l, tmp_r = float(\"-inf\"), float(\"-inf\")\n#         for l in range(1, n+1):\n#             dp_forward[l] = max(dp_forward[l-1], prices[l-1] + tmp_l)\n#             tmp_l = max(tmp_l, -prices[l-1])\n#             r = n-l\n#             dp_backward[r] = max(dp_backward[r+1], -prices[r] + tmp_r)\n#             tmp_r = max(tmp_r, prices[r])\n            \n#         ans = 0\n#         for i in range(1, n+1):\n#             ans = max(ans, dp_forward[i] + dp_backward[i])\n#         return ans\n        ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"best-time-to-buy-and-sell-stock-iii","has_notes":false,"flag_type":1}