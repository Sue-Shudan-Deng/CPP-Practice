{"id":294017180,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578975189,"status":10,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/294017180/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"16.2 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        \"\"\"\n        方法一: 用hash table\n        \"\"\"\n        nodes = set()\n        while head:\n            if not head in nodes:\n                nodes.add(head)\n            else:\n                return True\n            head = head.next\n        return False\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        \"\"\"\n        方法二: 用快慢指针\n        慢指针每次走一格，快指针每次走两格\n        只要有环，快指针一定会追上慢指针\n        \"\"\"\n        if not head:\n            return False\n        slow, fast = head, head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True","compare_result":"11111111111111111","title_slug":"linked-list-cycle","has_notes":false,"flag_type":1}