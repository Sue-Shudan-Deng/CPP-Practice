{"id":417760024,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1604765209,"status":10,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/417760024/","is_pending":"Not Pending","title":"Linked List Cycle","memory":"17 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n# class Solution:\n#     def hasCycle(self, head: ListNode) -> bool:\n#         \"\"\"\n#         方法一: 用hash table\n#         \"\"\"\n#         nodes = set()\n#         while head:\n#             if not head in nodes:\n#                 nodes.add(head)\n#             else:\n#                 return True\n#             head = head.next\n#         return False\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        \"\"\"\n        方法二: 用快慢指针\n        慢指针每次走一格，快指针每次走两格\n        只要有环，快指针一定会追上慢指针\n        \"\"\"\n        if not head:\n            return False\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False","compare_result":"11111111111111111","title_slug":"linked-list-cycle","has_notes":false,"flag_type":1}