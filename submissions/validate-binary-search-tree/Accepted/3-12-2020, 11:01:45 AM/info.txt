{"id":311853320,"lang":"python","lang_name":"Python","time":"3 years, 5 months","timestamp":1584036105,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/311853320/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"16.2 MB","code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        Recursion\n        \"\"\"\n        def helper(root, lower=float(\"-inf\"), upper=float(\"inf\")):\n            if not root:\n                return True\n            if root.val <= lower or root.val >= upper:\n                return False\n            return helper(root.left, lower, root.val) and helper(root.right, root.val, upper)\n        return helper(root)\n    \nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        Iteration + inorder\n        \"\"\"\n        if not root:\n            return True\n        stack, inorder = [], float(\"-inf\")\n        while stack or root:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            if root.val <= inorder:\n                return False\n            inorder = root.val\n            root = root.right\n        return True","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"validate-binary-search-tree","has_notes":false,"flag_type":1}