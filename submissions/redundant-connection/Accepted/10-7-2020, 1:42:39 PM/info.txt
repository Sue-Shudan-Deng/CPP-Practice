{"id":405849714,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1602103359,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/405849714/","is_pending":"Not Pending","title":"Redundant Connection","memory":"9 MB","code":"class Solution {\nprivate:\n    int find(int node, vector<int>& parent) {\n        while (node != parent[node]) {\n            parent[node] = parent[parent[node]];\n            node = parent[node];\n        }\n        return parent[node];\n    }\n    \npublic:\n    vector<int> findRedundantConnection(vector<vector<int>>& edges) {\n        int n = edges.size();\n        vector<int> parent(n + 1, 0);\n        vector<int> size(n + 1, 0);\n        \n        for (const auto& edge : edges) {\n            int u = edge[0];\n            int v = edge[1];\n            if (!parent[u]) {\n                parent[u] = u;\n            }\n            if (!parent[v]) {\n                parent[v] = v;\n            }\n            int pu = find(u, parent);\n            int pv = find(v, parent);\n            if (pu == pv) {\n                return edge;\n            }\n            if (size[pu] < size[pv]) {\n                swap(pu, pv);\n            }\n            parent[pv] = pu;\n            size[pu] += size[pv];\n        }\n        return {};\n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection","has_notes":false,"flag_type":1}