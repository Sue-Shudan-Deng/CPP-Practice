{"id":405830543,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1602099870,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/405830543/","is_pending":"Not Pending","title":"Redundant Connection","memory":"14.4 MB","code":"class UnionFindSet:\n    def __init__(self, n):\n        self.parent = [i for i in range(n + 1)]\n        self.rank = [1 for _ in range(n + 1)]\n        \n    def find(self, x):\n        if x != self.parent[x]:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n    \n    def union(self, x, y):\n        px, py = self.find(x), self.find(y)\n        if px == py:\n            return False\n        if self.rank[x] > self.rank[y]:\n            self.parent[py] = px\n        elif self.rank[x] < self.rank[y]:\n            self.parent[px] = py\n        else:\n            self.parent[py] = px\n            self.rank[px] += 1 \n        return True\n\nclass Solution:\n    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n        s = UnionFindSet(len(edges))\n        for x, y in edges:\n            if not s.union(x, y):\n                return [x, y]","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection","has_notes":false,"flag_type":1}