{"id":399383887,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600812249,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/399383887/","is_pending":"Not Pending","title":"Redundant Connection","memory":"13.9 MB","code":"class UnionFindSet:\n    def __init__(self, n):\n        self.parent = [i for i in range(n+1)]\n        self.rank = [1 for _ in range(n+1)]\n    \n    def find(self, x):\n        if x != self.parent[x]:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n    \n    def union(self, x, y):\n        rx, ry = self.find(x), self.find(y)\n        if rx == ry:\n            return False\n        if self.rank[rx] < self.rank[ry]:\n            self.parent[rx] = ry\n        elif self.rank[ry] < self.rank[rx]:\n            self.parent[ry] = rx\n        else:\n            self.parent[ry] = rx\n            self.rank[rx] += 1\n        return True\n\nclass Solution:\n    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:\n        s = UnionFindSet(len(edges))\n        for edge in edges:\n            if not s.union(*edge):\n                return edge","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection","has_notes":false,"flag_type":1}