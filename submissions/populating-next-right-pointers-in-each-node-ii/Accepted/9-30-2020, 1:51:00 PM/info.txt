{"id":402826970,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1601499060,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/402826970/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node II","memory":"17.6 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\n\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n        Node* oldroot = root;\n        \n        while (root) {\n            // 外层循环控制有多少层\n            Node* sentinel = new Node(0); \n            Node* cur = sentinel;\n            while (root) {\n                // 内层循环控制层内部的遍历\n                if (root->left) {\n                    cur->next = root->left;\n                    cur = cur->next;\n                }\n                if (root->right) {\n                    cur->next = root->right;\n                    cur = cur->next;\n                }\n                root = root->next;\n            }\n            root = sentinel->next;\n        }\n        return oldroot;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node-ii","has_notes":false,"flag_type":1}