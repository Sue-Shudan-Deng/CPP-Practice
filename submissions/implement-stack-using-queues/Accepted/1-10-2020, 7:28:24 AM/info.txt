{"id":292970563,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578670104,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/292970563/","is_pending":"Not Pending","title":"Implement Stack using Queues","memory":"12.6 MB","code":"from collections import deque\nclass MyStack:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.queue = deque()\n        \n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x onto stack.\n        \"\"\"\n        self.queue.appendleft(x)\n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element on top of the stack and returns that element.\n        \"\"\"\n        return self.queue.popleft()\n\n    def top(self) -> int:\n        \"\"\"\n        Get the top element.\n        \"\"\"\n        return self.queue[0]\n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the stack is empty.\n        \"\"\"\n        return len(self.queue) == 0\n\n\n# Your MyStack object will be instantiated and called as such:\n# obj = MyStack()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.empty()","compare_result":"1111111111111111","title_slug":"implement-stack-using-queues","has_notes":false,"flag_type":1}