{"id":408341377,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1602617579,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/408341377/","is_pending":"Not Pending","title":"Jump Game II","memory":"16 MB","code":"class Solution:\n    def jump(self, nums: List[int]) -> int:\n        \"\"\"\n        method 1: move backward, DP, O(n^2), TLE\n        \"\"\"\n        # n = len(nums)\n        # dp = [float(\"inf\") for _ in range(n)]\n        # dp[-1] = 0\n        # for i in range(n-2, -1, -1):\n        #     if i + nums[i] >= n:\n        #         dp[i] = 1\n        #     elif nums[i] > 0:\n        #         for j in range(i + 1, i + nums[i] + 1):\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        # return 0 if dp[0] == float(\"inf\") else dp[0]\n    \n        \"\"\"\n        method 2: move forard, Greedy\n        \"\"\"\n        n, step, l, r, new_r = len(nums), 0, 0, 0, 0\n        # 如果初始已包含终点，返回0\n        if nums[0] == 0 or len(nums) == 1:\n            return 0\n        # 否则，至少+1\n        while l <= r:\n            for i in range(l, r + 1):\n                new_r = max(new_r, i + nums[i])\n                if new_r >= n - 1:\n                    return step + 1\n            l = r + 1\n            r = new_r\n            step += 1\n        return step","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"jump-game-ii","has_notes":false,"flag_type":1}