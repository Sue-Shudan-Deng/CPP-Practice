{"id":396873008,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1600316577,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/396873008/","is_pending":"Not Pending","title":"Odd Even Jump","memory":"N/A","code":"class Solution {\npublic:\n    int oddEvenJumps(vector<int>& A) {\n        int n = A.size();\n        vector<vector<int>> dp(n, vector<int>(2, 0));\n        dp[n-1][0] = 1;\n        dp[n-1][1] = 1;\n        map<int, int> m;\n        m[A[n-1]] = n-1;\n        int ans = 1;\n        \n        for (int i = n-2; i >= 0; --i) {\n            auto up_jump = m.lower_bound(A[i]);\n            if (up_jump != m.end()) {\n                dp[i][0] = dp[up_jump->second][1];\n                // 我去，iterator作为指针还可以这么用，牛逼\n            }\n            \n            auto down_jump = m.upper_bound(A[i]);\n            if (down_jump != m.end()) {\n                dp[i][1] = dp[prev(down_jump)->second][0];\n            }\n            \n            if (dp[i][0] == 0) {\n                ++ans;\n            }\n            m[A[i]] = i;\n        }\n        return ans;\n    }\n};","compare_result":"1000000001111100000000010010000000000010000000000000000000000000","title_slug":"odd-even-jump","has_notes":false,"flag_type":1}