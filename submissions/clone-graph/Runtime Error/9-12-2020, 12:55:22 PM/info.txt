{"id":394733527,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1599940522,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/394733527/","is_pending":"Not Pending","title":"Clone Graph","memory":"N/A","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    \n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    \n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    \n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\n    \nprivate:\n    map<Node*, Node*> visited;\n    \npublic:\n    Node* cloneGraph(Node* node) {\n        if (visited.find(node) != visited.end()) {\n            return (*visited.find(node)).second;\n        }\n        Node* cloned = new Node(node->val);\n        visited.emplace(node, cloned);\n        for (auto i : node->neighbors) {\n            if (visited.find(node) != visited.end()) {\n                cloned->neighbors.push_back(cloneGraph(i));   \n            }\n        }\n        return cloned;\n    }\n};","compare_result":"110000000000000000000","title_slug":"clone-graph","has_notes":false,"flag_type":1}