{"id":292857198,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578629957,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/292857198/","is_pending":"Not Pending","title":"Clone Graph","memory":"N/A","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val, neighbors):\n        self.val = val\n        self.neighbors = neighbors\n\"\"\"\n# # DFS\n# class Solution:\n#     def __init__(self):\n#         self.visited = dict()\n        \n#     def cloneGraph(self, node: 'Node') -> 'Node':\n#         \"\"\"\n#         1. 找到图中所有点\n#         2. 复制图中所有点，一一对应\n#         3. 复制点对应的边\n#         \"\"\"\n#         # edge case\n#         if not node:\n#             return node\n#         # 1.已经找到过这个点\n#         if self.visited.get(node):\n#             return self.visited[node]\n#         # 2.先复制结点，再复制neighbors\n#         else:\n#             new_node = Node(node.val, [])\n#             self.visited[node] = new_node\n#             if node.neighbors:\n#                 new_node.neighbors = [self.cloneGraph(nei) for nei in node.neighbors]\n#         return new_node\n    \n# BFS\nfrom collections import deque\nclass Solution:\n    def __init__(self):\n        self.visited = dict()\n        \n    def cloneGraph(self, node: 'Node') -> 'Node':\n        \"\"\"\n        1. 找到图中所有点\n        2. 复制图中所有点，一一对应\n        3. 复制点对应的边\n        \"\"\"\n        if not node:\n            return node\n        queue = deque([node])\n        while queue:\n            old_node = queue.popleft()\n            new_node = Node(old_node.val, [])\n            self.visited[old_node] = new_node\n            for nei in old_node.neighbors:\n                if nei not in self.visited:\n                    new_visit = Node(nei.val, [])\n                    queue.append(new_visit)\n                self.visited[old_node].neighbors.append(new_visit)\n                    \n        return self.visited[node]\n","compare_result":"01000000000000000000","title_slug":"clone-graph","has_notes":false,"flag_type":1}