{"id":407908079,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1602530418,"status":10,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/407908079/","is_pending":"Not Pending","title":"Target Sum","memory":"14.3 MB","code":"# 方法一：参见视频讲解，重点是理解杨辉三角以及如何用来迭代\n# https://www.youtube.com/watch?v=r6Wz4W1TbuI&t=1239s\n# class Solution:\n#     def findTargetSumWays(self, nums: List[int], S: int) -> int:\n        \n#         n = len(nums)\n#         summ = sum(nums)\n#         if summ < S:\n#             return 0\n         \n#         # 这里的offset是必要的，为了使得二维数组的第二维index合法\n#         offset = summ  \n#         # 注意这样初始化才合法\n#         ways = [[0 for _ in range(summ + offset + 1)] for _ in range(n+1)]\n#         # 参考杨辉三角，相当于把ways[0][0] = 1\n#         ways[0][offset] = 1\n        \n#         for i in range(n):\n#             for j in range(nums[i], summ + offset + 1 - nums[i]):\n#                 if ways[i][j]:\n#                     ways[i + 1][j - nums[i]] += ways[i][j]\n#                     ways[i + 1][j + nums[i]] += ways[i][j]\n                    \n#         return ways[n][S+offset]\nclass Solution:\n    def findTargetSumWays(self, nums: List[int], S: int) -> int:\n        \"\"\"\n        method 2: bounded knapsack\n        https://www.youtube.com/watch?v=zks6mN06xdQ 重点还是理解21min的图\n        \"\"\"\n        n = len(nums)\n        summ = sum(nums)\n        if summ < S or (summ + S) % 2:   # 必须被2整除\n            return 0\n        \n        target = (summ + S) // 2\n        dp = [0 for _ in range(target + 1)]\n        dp[0] = 1\n        for num in nums:\n            for j in range(target, num - 1, -1):\n                dp[j] += dp[j - num]\n        return dp[target]","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"target-sum","has_notes":false,"flag_type":1}