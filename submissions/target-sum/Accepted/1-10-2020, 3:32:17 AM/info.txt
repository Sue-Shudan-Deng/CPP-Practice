{"id":292941909,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578655937,"status":10,"status_display":"Accepted","runtime":"348 ms","url":"/submissions/detail/292941909/","is_pending":"Not Pending","title":"Target Sum","memory":"12.9 MB","code":"# 参见视频讲解，重点是理解杨辉三角以及如何用来迭代\n# https://www.youtube.com/watch?v=r6Wz4W1TbuI&t=1239s\nclass Solution:\n    def findTargetSumWays(self, nums: List[int], S: int) -> int:\n        \n        n = len(nums)\n        summ = sum(nums)\n        if summ < S:\n            return 0\n         \n        # 这里的offset是必要的，为了使得二维数组的第二维index合法\n        offset = summ  \n        # 注意这样初始化才合法\n        ways = [[0 for _ in range(summ + offset + 1)] for _ in range(n+1)]\n        # 参考杨辉三角，相当于把ways[0][0] = 1\n        ways[0][offset] = 1\n        \n        for i in range(n):\n            for j in range(nums[i], summ + offset + 1 - nums[i]):\n                if ways[i][j]:\n                    ways[i + 1][j - nums[i]] += ways[i][j]\n                    ways[i + 1][j + nums[i]] += ways[i][j]\n                    \n        return ways[n][S+offset]","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"target-sum","has_notes":false,"flag_type":1}