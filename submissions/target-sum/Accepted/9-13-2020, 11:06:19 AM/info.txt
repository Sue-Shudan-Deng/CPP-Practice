{"id":395182244,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1600020379,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/395182244/","is_pending":"Not Pending","title":"Target Sum","memory":"9.6 MB","code":"class Solution {\n    \npublic:\n    int findTargetSumWays(vector<int>& nums, int S) {\n        long summ = accumulate(nums.begin(), nums.end(), 0);\n        long target = S + summ;\n        if ((S > 0 && S > summ) || (S < 0 && S < -summ) || (target % 2 == 1)) {\n            return 0;\n        }\n        target /= 2;\n        \n        // Version 1: naive DP\n\n//         dp = vector<vector<int>>(nums.size()+1, vector<int>(target+1, 0));\n        \n//         for (int i = 0; i <= nums.size(); ++i) {\n//             dp[i][0] = 1;\n//         }\n        \n//         for (int i = 1; i <= nums.size(); ++i) {\n//             copy(dp[i-1].begin(), dp[i-1].end(), dp[i].begin());\n//             for (int j = nums[i-1]; j <= target; ++j) {\n//                 dp[i][j] += dp[i-1][j-nums[i-1]];\n//             }\n//         }\n//         int maxnum = 0;\n//         for (int i = 0; i <= nums.size(); ++i) {\n//             maxnum = max(maxnum, dp[i][target]);\n//         }\n        \n        // Version 2: space-efficient DP\n        vector<int> dp(target+1, 0);\n        dp[0] = 1;\n        for (int i = 0; i < nums.size(); ++i) {\n            for (int j = target; j >= nums[i]; --j) {\n                dp[j] += dp[j-nums[i]];\n            }\n        }\n        return dp[target];\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"target-sum","has_notes":false,"flag_type":1}