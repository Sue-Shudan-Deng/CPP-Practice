{"id":400700163,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1601067843,"status":10,"status_display":"Accepted","runtime":"204 ms","url":"/submissions/detail/400700163/","is_pending":"Not Pending","title":"Accounts Merge","memory":"26.5 MB","code":"class Solution:\n    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:\n        em_to_name = {}\n        graph = collections.defaultdict(set)\n        for acc in accounts:\n            n, name, email = len(acc), acc[0], acc[1]\n            for i in range(1, n):\n                graph[email].add(acc[i])\n                graph[acc[i]].add(email)\n                em_to_name[acc[i]] = name\n                      \n        visited, res = set(), []\n        ans = 0\n        \n        def dfs(node, visited, ans):\n            if node in visited:\n                return\n            visited.add(node)\n            ans.append(node)\n            for nei in graph[node]:\n                dfs(nei, visited, ans)\n            \n        for node in graph:\n            if not node in visited:\n                ans = []\n                dfs(node, visited, ans)\n                res.append([em_to_name[node]] + sorted(ans))\n                \n        return res","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"accounts-merge","has_notes":false,"flag_type":1}