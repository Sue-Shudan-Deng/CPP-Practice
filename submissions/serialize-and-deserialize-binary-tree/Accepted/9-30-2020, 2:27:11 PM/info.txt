{"id":402837703,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1601501231,"status":10,"status_display":"Accepted","runtime":"372 ms","url":"/submissions/detail/402837703/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"35.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\n    \nprivate:\n    void rserialize(TreeNode* root, string& cur) {\n        if (!root) {\n            cur += \"None,\";\n            return;\n        }\n        cur += to_string(root->val) + \",\";\n        rserialize(root->left, cur);\n        rserialize(root->right, cur);\n    }\n    \n    TreeNode* rdeserialize(deque<string>& cur) {\n        if (cur.front() == \"None\") {\n            cur.pop_front();\n            return nullptr;\n        }\n        TreeNode* root = new TreeNode(stoi(cur.front()));\n        cur.pop_front();\n        root->left = rdeserialize(cur);\n        root->right = rdeserialize(cur);\n        return root;\n    }\n    \npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        string cur = \"\";\n        rserialize(root, cur);\n        return cur.substr(0, cur.size() - 1);\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string s) {\n        size_t pos = 0;\n        deque<string> cur;\n        string delim = \",\";\n        while (s.find(delim) != string::npos) {\n            pos = s.find(delim);\n            cur.push_back(s.substr(0, pos));\n            s.erase(0, pos + delim.size());\n        }\n        cur.push_back(s);\n        return rdeserialize(cur);\n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree","has_notes":false,"flag_type":1}