{"id":391014177,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1599243709,"status":10,"status_display":"Accepted","runtime":"68 ms","url":"/submissions/detail/391014177/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"34 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\n// preorder recursion\nprivate:\n    void reserialize(TreeNode* root, string& s) {\n        if (!root) {\n            s += \"None,\";\n            return;\n        }\n        s += (to_string(root->val) + \",\");\n        reserialize(root->left, s);\n        reserialize(root->right, s);\n    }\n    \n    TreeNode* redeserialize(deque<string>& q) {\n        string s = q.front();\n        q.pop_front();\n        if (s == \"None\") {\n           return nullptr;\n        }\n        \n        TreeNode* root = new TreeNode(stoi(s));\n        root->left = redeserialize(q);\n        root->right = redeserialize(q);\n        return root;\n    }\n    \npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        string s = \"\";\n        reserialize(root, s);\n        return s;\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        deque<string> q;\n        stringstream ss(data);\n        string token;\n        while (getline(ss, token, ',')) {\n            q.push_back(token);\n        }\n        // for (auto i: q) cout << i << \" \";\n        // cout << endl;\n        return redeserialize(q);\n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.deserialize(codec.serialize(root));","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree","has_notes":false,"flag_type":1}