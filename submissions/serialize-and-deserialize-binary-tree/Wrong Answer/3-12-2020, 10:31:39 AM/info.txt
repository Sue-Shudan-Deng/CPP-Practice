{"id":311847071,"lang":"python","lang_name":"Python","time":"3 years, 5 months","timestamp":1584034299,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/311847071/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        def rserialize(root, string = \"\"):\n            if not root:\n                return \"None,\"\n            string += str(root.val) + \",\"\n            string = rserialize(root.left, string)\n            string = rserialize(root.right, string)\n            return string\n        return rserialize(root)\n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        def rdeserialize(preorder):\n            if preorder[0] == \"None\":\n                preorder.pop(0)\n                return None\n            \n            root_val = preorder.pop(0)\n            root = TreeNode(root_val)\n            root.left = rdeserialize(preorder)\n            root.right = rdeserialize(preorder)\n            return root\n        \n        preorder = data.split(\",\")\n        return rdeserialize(preorder)\n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.deserialize(codec.serialize(root))","compare_result":"010000000000000000000000000000000000000000000000","title_slug":"serialize-and-deserialize-binary-tree","has_notes":false,"flag_type":1}