{"id":390742518,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1599188388,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/390742518/","is_pending":"Not Pending","title":"Maximum Depth of Binary Tree","memory":"18.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n// class Solution {\n// public:\n//     int maxDepth(TreeNode* root) {\n//         if (!root) return 0;\n//         return max(maxDepth(root->left), maxDepth(root->right)) + 1;\n//     }\n// };\n\nclass Solution {\npublic:\n    int maxDepth(TreeNode* root) {\n        int ret = 0, level = 1;\n        if (!root) return ret;\n        stack<pair<TreeNode*, int>> s;\n        s.emplace(root, level);\n        while (!s.empty()) {\n            auto [cur, level] = s.top();\n            s.pop();\n            ret = max(ret, level);\n            if (cur->right) s.emplace(cur->right, level + 1);\n            if (cur->left) s.emplace(cur->left, level + 1);\n        }\n        return ret;\n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"maximum-depth-of-binary-tree","has_notes":false,"flag_type":1}