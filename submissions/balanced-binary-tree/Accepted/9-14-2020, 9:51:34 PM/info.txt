{"id":395926788,"lang":"cpp","lang_name":"C++","time":"2 years, 11 months","timestamp":1600145494,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/395926788/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"22 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n  // Recursively obtain the height of a tree. An empty tree has -1 height\n  int height(TreeNode* root) { \n    // An empty tree has height -1\n    if (root == NULL) {\n      return -1;\n    }\n    return 1 + max(height(root->left), height(root->right));\n  }\npublic:\n  bool isBalanced(TreeNode* root) {\n    // An empty tree satisfies the definition of a balanced tree\n    if (root == NULL) {\n      return true;\n    }\n\n    // Check if subtrees have height within 1. If they do, check if the\n    // subtrees are balanced\n    return abs(height(root->left) - height(root->right)) <= 1 &&\n      isBalanced(root->left) &&\n      isBalanced(root->right);\n  }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}