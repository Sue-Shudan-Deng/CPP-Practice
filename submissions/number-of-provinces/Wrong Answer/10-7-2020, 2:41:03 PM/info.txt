{"id":405868074,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1602106863,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/405868074/","is_pending":"Not Pending","title":"Number of Provinces","memory":"N/A","code":"class Solution:\n    def findCircleNum(self, M: List[List[int]]) -> int:\n        \n        \"\"\"\n        难点应该在于理解题意，这里的是邻接矩阵并不是graph\n        \"\"\"\n        n = len(M) # number of students\n        parent = [i for i in range(n)]\n        size = [1 for _ in range(n)]\n        \n        def find(node):\n            while node != parent[node]:\n                parent[node] = parent[parent[node]]\n                ndoe = parent[node]\n            return parent[node]\n        \n        for i in range(n):\n            for j in range(i, n):\n                # do union op\n                if M[i][j] == 1:\n                    pu, pv = find(i), find(j)\n                    if pu == pv:\n                        continue\n                    if size[pu] > size[pv]:\n                        pu, pv = pv, pu\n                    parent[pu] = pv\n                    size[pv] += size[pu]\n\n        return len(collections.Counter(parent))","compare_result":"11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"number-of-provinces","has_notes":false,"flag_type":1}