{"id":419045113,"lang":"python3","lang_name":"Python3","time":"2 years, 9 months","timestamp":1605066798,"status":10,"status_display":"Accepted","runtime":"584 ms","url":"/submissions/detail/419045113/","is_pending":"Not Pending","title":"Permutations II","memory":"29.6 MB","code":"class Solution:\n    def permuteUnique(self, nums: List[int]) -> List[List[int]]:\n        ans, visited = [], set()\n        def backtrack(cur):\n            n = len(nums)\n            \n            if len(cur) == n:\n                ans.append(cur)\n            \n            for i in range(n):\n                if i in visited:\n                    continue\n                visited.add(i)\n                backtrack(cur + [nums[i]])\n                visited.remove(i)\n                \n        backtrack([])\n        return list(set([tuple(i) for i in ans]))","compare_result":"111111111111111111111111111111111","title_slug":"permutations-ii","has_notes":false,"flag_type":1}