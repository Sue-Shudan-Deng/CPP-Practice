{"id":398547112,"lang":"python3","lang_name":"Python3","time":"2Â years, 11Â months","timestamp":1600653626,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/398547112/","is_pending":"Not Pending","title":"Decode Ways","memory":"N/A","code":"class Solution:\n    def numDecodings(self, s: str) -> int:\n        \n        def valid(s: str):\n            if len(s) == 1:\n                return int(1 <= int(s) and int(s) <= 9)\n            if len(s) == 2:\n                return int(10 <= int(s) and int(s) <= 26)\n        \n        n = len(s)\n        if n == 1:\n            return valid(s)\n        if n == 2:\n            return (valid(s[0]) and valid(s[1])) + valid(s[:2])\n        \n        dp = [0 for _ in range(n)]\n        dp[0] = valid(s[0])\n        dp[1] = (valid(s[0]) and valid(s[1])) + valid(s[:2])\n        for i in range(2, n):\n            if valid(s[i]):\n                dp[i] += dp[i-1]\n            if valid(s[i-2:i]):\n                dp[i] += dp[i-2]\n            if not valid(s[i-2:i]) and not valid(s[i]):\n                dp[i] = 0\n        print(dp)\n        return dp[-1]","compare_result":"111111111111110011100100011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111011110111111101110111011111101111111111111111101010111110110100100111110100000011110010111011001111101111010111111111111100111010111101101110","title_slug":"decode-ways","has_notes":false,"flag_type":1}