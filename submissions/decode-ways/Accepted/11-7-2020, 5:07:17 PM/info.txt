{"id":417892560,"lang":"python3","lang_name":"Python3","time":"2Â years, 10Â months","timestamp":1604797637,"status":10,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/417892560/","is_pending":"Not Pending","title":"Decode Ways","memory":"14.2 MB","code":"class Solution:\n    def numDecodings(self, s: str) -> int:\n        \n        def valid(s: str):\n            if len(s) == 1:\n                return int(1 <= int(s) and int(s) <= 9)\n            if len(s) == 2:\n                return int(10 <= int(s) and int(s) <= 26)\n        \n        n = len(s)\n        if n == 1:\n            return valid(s)\n        if n == 2:\n            return (valid(s[0]) and valid(s[1])) + valid(s[:2])\n        \n        dp = [0 for _ in range(n)]\n        dp[0] = valid(s[0])\n        dp[1] = (valid(s[0]) and valid(s[1])) + valid(s[:2])\n        for i in range(2, n):\n            if valid(s[i]):\n                dp[i] += dp[i-1]\n            if valid(s[i-1:i+1]):\n                dp[i] += dp[i-2]\n            if not valid(s[i-1:i+1]) and not valid(s[i]):\n                dp[i] = 0\n        return dp[-1]","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"decode-ways","has_notes":false,"flag_type":1}