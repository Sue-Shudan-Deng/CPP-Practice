{"id":287784527,"lang":"python","lang_name":"Python","time":"3 years, 8 months","timestamp":1577037618,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/287784527/","is_pending":"Not Pending","title":"Longest Palindromic Substring","memory":"N/A","code":"class Solution(object):\n    def P(self, s):\n        if self.P_store.get(s) != None:\n            return self.P_store[s]\n        else:\n            if len(s) <= 2:\n                self.P_store[s] = s[0] == s[-1]\n                return self.P_store[s]\n            else:\n                self.P_store[s] = self.P(s[1:-1]) and s[0] == s[-1]\n                return self.P_store[s]\n\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        P = [[False] * len(s)] * len(s)\n        self.P_store = dict()\n        length = 0\n        if s == \"\":\n            return s\n        ans = s[0]\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                P[i][j] = self.P(s[i:j+1])\n                if P[i][j] and j - i > length:\n                    length = j - i\n                    ans = s[i:j+1] \n        return ans","compare_result":"1111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000","title_slug":"longest-palindromic-substring","has_notes":false,"flag_type":1}