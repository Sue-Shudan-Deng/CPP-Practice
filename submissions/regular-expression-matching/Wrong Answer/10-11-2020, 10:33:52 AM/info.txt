{"id":407421295,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1602437632,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/407421295/","is_pending":"Not Pending","title":"Regular Expression Matching","memory":"N/A","code":"class Solution:\n    def isMatch(self, s: str, p: str) -> bool:\n        ns, np = len(s), len(p)\n        dp = [[False for _ in range(np + 1)] for _ in range(ns + 1)]\n        dp[0][0] = True\n        if ns == 0 and np == 0:\n            return True\n        if np == 0 or p[0] == \"*\":\n            return False\n        \n        for j in range(1, np + 1):\n            if p[j-1] == \"*\":\n                dp[0][j] = dp[0][j] or dp[0][j-1] or dp[0][j-2]\n        \n        for i in range(1, ns + 1):\n            for j in range(1, np + 1):\n                if p[j-1] == \".\" or p[j-1] == s[i-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                if p[j-1] == \"*\" and p[j-2] != \"*\":\n                    # case 0: zero or one of preceding element\n                    dp[i][j] = dp[i][j-1] or dp[i][j-2]\n                    # case 1: multiple of preceding element\n                    if s[i-1] == s[i-2] and (p[j-2] == \".\" or s[i-2] == p[j-2]):\n                        dp[i][j] = dp[i][j] or dp[i-1][j-1] or dp[i-1][j]\n                    else:\n                        if p[j-2] == \".\":\n                            dp[i][j] = dp[i][j] or dp[i-1][j-1]\n        return dp[-1][-1]","compare_result":"11111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111101111011100101110110111011111011111111101111010111011111011111111111111011011101101110011100111111010011111101101101011011100110011111111111111110011100000101101111111111111101111101111100111110010","title_slug":"regular-expression-matching","has_notes":false,"flag_type":1}