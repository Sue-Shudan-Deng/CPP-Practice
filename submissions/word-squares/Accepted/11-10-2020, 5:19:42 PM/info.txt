{"id":419001975,"lang":"python3","lang_name":"Python3","time":"2 years, 9 months","timestamp":1605057582,"status":10,"status_display":"Accepted","runtime":"440 ms","url":"/submissions/detail/419001975/","is_pending":"Not Pending","title":"Word Squares","memory":"16.9 MB","code":"class Solution:\n    \"\"\"\n    Method 1: backtracking with hashmap \n    \"\"\"\n#     def wordSquares(self, words: List[str]) -> List[List[str]]:\n#         n, res = len(words[0]), []\n#         prefixHashTable = defaultdict(set)\n#         for word in words:\n#             for prefix in (word[:i] for i in range(1, len(word))):\n#                 prefixHashTable[prefix].add(word)\n        \n#         def getWordWithPrefix(prefix):\n#             \"\"\"\n#             O(n), will TLE, optimized with hashtable \n#             \"\"\"\n#             # for w in words:\n#             #     if w.startswith(prefix):\n#             #         yield w\n#             if prefix in prefixHashTable:\n#                 return prefixHashTable[prefix]\n#             else:\n#                 return set([])\n        \n#         def dfs(w, cur, res):\n#             if len(cur) == n:\n#                 res.append(copy.deepcopy(cur))\n#                 return\n#             prefix = \"\".join([i[len(cur)] for i in cur])\n#             for next_w in getWordWithPrefix(prefix):\n#                 cur.append(next_w)\n#                 dfs(next_w, cur, res)\n#                 cur.pop()\n        \n#         for w in words:\n#             dfs(w, [w], res)\n#         return res\n    \n    \"\"\"\n    Method 2: backtracking with trie\n    \"\"\"\n    def wordSquares(self, words: List[str]) -> List[List[str]]:\n        n, res = len(words[0]), []\n        trie = {}\n        for word in words:\n            node = trie\n            for c in word:\n                if not c in node:\n                    new_node = {}\n                    new_node['#'] = []\n                    node[c] = new_node\n                node = node[c]\n                node['#'].append(word)\n\n        def getWordWithPrefix(prefix):\n            node = trie\n            for w in prefix:\n                if not w in node:\n                    return []\n                node = node[w]\n            return node['#']\n        \n        def dfs(w, cur, res):\n            if len(cur) == n:\n                res.append(cur[:])\n                return\n            prefix = \"\".join([i[len(cur)] for i in cur])\n            for next_w in getWordWithPrefix(prefix):\n                dfs(next_w, cur + [next_w], res)\n        \n        for w in words:\n            dfs(w, [w], res)\n        return res","compare_result":"1111111111111111","title_slug":"word-squares","has_notes":false,"flag_type":1}