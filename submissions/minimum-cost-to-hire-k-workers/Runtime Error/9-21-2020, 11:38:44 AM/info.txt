{"id":398844700,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600713524,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/398844700/","is_pending":"Not Pending","title":"Minimum Cost to Hire K Workers","memory":"N/A","code":"class Solution:\n    def mincostToHireWorkers(self, quality: List[int], wage: List[int], K: int) -> float:\n        \"\"\"\n        maxheap + greedy, 参考lee215的算法\n        \"\"\"\n        n = len(quality)\n        comb = [(float(wage[i]) / quality[i], quality[i]) for i in range(n)]\n        comb.sort(key = lambda x: x[0])\n        maxheap, qsum, res = [], 0, float(\"inf\")\n        \n        for cur_ratio, q in comb:\n            heapq.heappush(maxheap, -q)\n            qsum += q # 只用管qsum因为最后的answer一定是用当前最大的ratio去计算的\n            if len(maxheap) > K:\n                old_q = -heapq.heappop(maxheap)\n                qsum -= old_q\n            if len(maxheap) == K:\n                res = min(res, qsum * cur_r)\n        \n        return res","compare_result":"0000000000000000000000000000000000000000000000","title_slug":"minimum-cost-to-hire-k-workers","has_notes":false,"flag_type":1}