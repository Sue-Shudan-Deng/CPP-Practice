{"id":390700136,"lang":"cpp","lang_name":"C++","time":"3Â years","timestamp":1599180576,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/390700136/","is_pending":"Not Pending","title":"Binary Tree Postorder Traversal","memory":"8.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> postorderTraversal(TreeNode* root) {\n        vector<int> ret;\n        if (!root) {\n            return ret;\n        } else {\n            stack<TreeNode*> stk;\n            stk.push(root);\n            while (!stk.empty()) {\n                TreeNode* curr = stk.top();\n                ret.push_back(curr->val);\n                stk.pop();\n                if (curr->left) stk.push(curr->left);\n                if (curr->right) stk.push(curr->right);\n            }\n            reverse(ret.begin(), ret.end());\n            return ret;\n        }\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-postorder-traversal","has_notes":false,"flag_type":1}