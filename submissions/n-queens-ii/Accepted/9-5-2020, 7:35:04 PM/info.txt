{"id":391605677,"lang":"cpp","lang_name":"C++","time":"2 years, 12 months","timestamp":1599359704,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/391605677/","is_pending":"Not Pending","title":"N-Queens II","memory":"6.9 MB","code":"class Solution {\n    \nprivate:\n    vector<vector<string>> sol_;\n    int res_;\n    vector<string> board;\n    vector<int> row_;\n    vector<int> diag1_;\n    vector<int> diag2_;\n    int size;\n    \n    bool available(int r, int c) {\n        return !row_[r] && !diag1_[r+c] && !diag2_[r-c+size-1];\n    }\n    \n    void updateBoard(int r, int c, int set) {\n        row_[r] = set;\n        diag1_[r+c] = set;\n        diag2_[r-c+size-1] = set;\n        board[r][c] = set ? 'Q' : '.';\n    }\n    \n    void nQueens(int c) {\n        if (c == size) {\n            sol_.push_back(board);\n            res_++;\n            return;\n        }\n        \n        for (int r = 0; r < size; ++r) {\n            if (!available(r, c)) continue;\n            updateBoard(r, c, 1);\n            nQueens(c+1);\n            updateBoard(r, c, 0);\n        }\n    }\n    \npublic:\n    int totalNQueens(int n) {\n        row_ = vector<int>(n, 0);\n        diag1_ = vector<int>(2*n-1, 0);\n        diag2_ = vector<int>(2*n-1, 0);\n        board = vector<string>(n, string(n, '.'));\n        size = n;\n        \n        nQueens(0);\n        // for (auto i : sol_) {\n        //     copy(i.begin(), i.end(), ostream_iterator<string>(cout, \"\\n\"));\n        //     cout << endl;\n        // }\n        return res_;\n    }\n};","compare_result":"111111111","title_slug":"n-queens-ii","has_notes":false,"flag_type":1}