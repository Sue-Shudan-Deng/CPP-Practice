{"id":417582600,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1604713889,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/417582600/","is_pending":"Not Pending","title":"N-Queens II","memory":"14.1 MB","code":"class Solution:\n    def totalNQueens(self, n: int) -> int:\n        col = [0] * n\n        diag1, diag2 = [0] * (2*n-1), [0] * (2*n-1)\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        \n        def isavaliable(r, c):\n            return not col[c] and not diag1[r+c] and not diag2[r-c+n-1]\n        \n        def updateBoard(r, c, flag):\n            col[c] = flag\n            diag1[r+c] = flag\n            diag2[r-c+n-1] = flag\n            board[r][c] = 'Q' if flag else '.'\n        \n        cnt = 0\n        def bt(r):\n            nonlocal cnt\n            if r == n:\n                cnt += 1\n                return\n            for c in range(n):\n                if isavaliable(r, c):\n                    updateBoard(r, c, True)\n                    bt(r+1)\n                    updateBoard(r, c, False)\n        bt(0)\n        return cnt","compare_result":"111111111","title_slug":"n-queens-ii","has_notes":false,"flag_type":1}