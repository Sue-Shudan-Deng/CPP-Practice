{"id":293404594,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578799928,"status":10,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/293404594/","is_pending":"Not Pending","title":"N-Queens II","memory":"12.9 MB","code":"class Solution:\n    def totalNQueens(self, n: int) -> int:\n        \n        row = [False for _ in range(n)]\n        diag1 = [False for _ in range(2*n-1)]\n        diag2 = [False for _ in range(2*n-1)]\n        \n        def is_not_under_attack(x, y):\n            return not row[y] and not diag1[x+y] and not diag2[x-y+n-1]\n        \n        def update_status(x, y, isput):\n            row[y] = isput\n            diag1[x+y] = isput\n            diag2[x-y+n-1] = isput\n        \n        def backtrack_nqueen(r, count):\n            for c in range(n):\n                # iterate through columns at the curent row.\n                if is_not_under_attack(r, c):\n                    # explore this partial candidate solution, and mark the attacking zone\n                    update_status(r, c, isput=True)\n                    if r+1 == n:\n                        # we reach the bottom, i.e. we find a solution!\n                        count += 1\n                    else:\n                        # we move on to the next row\n                        count = backtrack_nqueen(r+1, count)\n                    # backtrack, i.e. remove the queen and remove the attacking zone.\n                    update_status(r, c, isput=False)\n            return count\n        return backtrack_nqueen(0, 0)","compare_result":"111111111","title_slug":"n-queens-ii","has_notes":false,"flag_type":1}