{"id":417248485,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1604626967,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/417248485/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal II","memory":"14.8 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:\n        levels = []\n        if not root:\n            return levels\n        \n        def helper(node, level):\n            # start the current level\n            if len(levels) == level:\n                levels.append([])\n\n            # append the current node value\n            levels[level].append(node.val)\n\n            # process child nodes for the next level\n            if node.left:\n                helper(node.left, level + 1)\n            if node.right:\n                helper(node.right, level + 1)\n            \n        helper(root, 0)\n        return levels[::-1]\n        ","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal-ii","has_notes":false,"flag_type":1}