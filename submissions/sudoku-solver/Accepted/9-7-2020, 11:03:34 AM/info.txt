{"id":392399302,"lang":"cpp","lang_name":"C++","time":"2 years, 12 months","timestamp":1599501814,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/392399302/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"6.7 MB","code":"class Solution {\n\nprivate:\n    vector<vector<int>> row;\n    vector<vector<int>> col;\n    vector<vector<int>> box;\n    \n    void updateBoard(vector<vector<char>>& board, int i, int j, int ch, int sign) {\n        row[i][ch] = sign;\n        col[j][ch] = sign;\n        int n = (i / 3) * 3 + j / 3;\n        box[n][ch] = sign;\n        board[i][j] = sign ? ch + '0' : '.';\n    }\n    \n    \n    bool available(int i, int j, int ch) {\n        int n = (i / 3) * 3 + j / 3;\n        return !row[i][ch] && !col[j][ch] && !box[n][ch];\n    }\n    \n    bool backtrack(vector<vector<char>>& board, int i, int j) {\n        if (i > 8) return true;\n        \n        int ni = j == 8 ? i + 1 : i;\n        int nj = j == 8 ? 0 : j + 1;\n        \n        if (board[i][j] != '.') return backtrack(board, ni, nj); // directly go to next cell \n        \n        // for all possible ints\n        for (int ch = 1; ch < 10; ++ch) {\n            if (available(i, j, ch)) {\n                updateBoard(board, i, j, ch, 1);\n                if (backtrack(board, ni, nj)) return true; // force to quit\n                updateBoard(board, i, j, ch, 0);\n            }\n        }\n        return false;  // doesn't mean anything: just to quit the function\n    }\n    \n    \npublic:\n    void solveSudoku(vector<vector<char>>& board) {\n        // loop over the matrix\n        // for which row, if a char is there, put 1. The same for column and box\n        row = vector<vector<int>>(9, vector<int>(10, 0));\n        col = vector<vector<int>>(9, vector<int>(10, 0));\n        box = vector<vector<int>>(9, vector<int>(10, 0));\n        \n        for (int i = 0; i < 9; ++i) {\n            for (int j = 0; j < 9; ++j) {\n                if (board[i][j] != '.') {\n                    int ch = board[i][j] - '0';\n                    int n = (i / 3) * 3 + j / 3;\n                    row[i][ch] = 1;\n                    col[j][ch] = 1;\n                    box[n][ch] = 1;\n                }\n            }\n        }\n        backtrack(board, 0, 0);\n    }\n};","compare_result":"111111","title_slug":"sudoku-solver","has_notes":false,"flag_type":1}