{"id":407843667,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1602519847,"status":10,"status_display":"Accepted","runtime":"1500 ms","url":"/submissions/detail/407843667/","is_pending":"Not Pending","title":"Knight Dialer","memory":"16.1 MB","code":"class Solution:\n    def knightDialer(self, n: int) -> int:\n        mod = 10**9 + 7\n        # possible moves for each index i\n        moves = [[4,6],[6,8],[7,9],[4,8],[3,9,0],[],\n                     [1,7,0],[2,6],[1,3],[2,4]]\n        \n        dp = [[0 for _ in range(10)] for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for k, v in enumerate(moves):\n                if i == 1:\n                    dp[i][k] += 1\n                else:\n                    for nei in v:\n                        dp[i][k] = (dp[i][k] + dp[i-1][nei]) % mod\n                    \n        return sum(dp[-1]) % mod","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"knight-dialer","has_notes":false,"flag_type":1}