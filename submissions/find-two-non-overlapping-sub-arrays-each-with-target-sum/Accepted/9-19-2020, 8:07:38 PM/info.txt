{"id":398118955,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1600571258,"status":10,"status_display":"Accepted","runtime":"1652 ms","url":"/submissions/detail/398118955/","is_pending":"Not Pending","title":"Find Two Non-overlapping Sub-arrays Each With Target Sum","memory":"37.4 MB","code":"class Solution:\n    def minSumOfLengths(self, arr: List[int], target: int) -> int:\n        n = len(arr)\n        def minlen(arr: List[int], target: int) -> List[int]:\n            dp = [float(\"inf\") for _ in range(n+1)]\n            prefix = [0 for _ in range(n+1)]\n            for i in range(1, n+1):\n                prefix[i] = prefix[i-1] + arr[i-1]\n            m = {prefix[0] : 0}\n            \n            for i in range(1, n+1):\n                dp[i] = dp[i-1]\n                if prefix[i]-target in m:\n                    dp[i] = min(dp[i], i - m[prefix[i]-target])\n                m[prefix[i]] = i\n            return dp[1:]\n        \n        dp_forward = minlen(arr, target)\n        dp_backward = minlen(arr[::-1], target)[::-1]\n        \n#         print(dp_forward)\n#         print(dp_backward)\n        \n        ans = float(\"inf\")\n        for i in range(0, n-1):\n            ans = min(ans, dp_forward[i] + dp_backward[i+1])\n        return ans if ans != float(\"inf\") else -1","compare_result":"111111111111111111111111111111111111111111111111111111111111","title_slug":"find-two-non-overlapping-sub-arrays-each-with-target-sum","has_notes":false,"flag_type":1}