{"id":417318995,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1604642028,"status":10,"status_display":"Accepted","runtime":"320 ms","url":"/submissions/detail/417318995/","is_pending":"Not Pending","title":"Longest Univalue Path","memory":"17.7 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def longestUnivaluePath(self, root: TreeNode) -> int:\n        ans = 0\n        def countUnival(root):\n            nonlocal ans\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                ans = max(ans, 1)\n                return 1\n            l = countUnival(root.left)\n            r = countUnival(root.right)\n            if not root.left:\n                if root.right.val == root.val:\n                    ans = max(ans, r + 1)\n                    return r + 1\n            elif not root.right:\n                if root.left.val == root.val:\n                    ans = max(ans, l + 1)\n                    return l + 1\n            else:\n                if root.left.val == root.val and root.right.val != root.val:\n                    ans = max(ans, l + 1)\n                    return 1 + l\n                elif root.right.val == root.val and root.left.val != root.val:\n                    ans = max(ans, r + 1)\n                    return 1 + r\n                elif root.right.val == root.val and root.left.val == root.val:\n                    ans = max(ans, l + r + 1)\n                    return max(l, r) + 1\n            return 1\n        \n        countUnival(root)\n        return ans - 1 if root else 0","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-univalue-path","has_notes":false,"flag_type":1}