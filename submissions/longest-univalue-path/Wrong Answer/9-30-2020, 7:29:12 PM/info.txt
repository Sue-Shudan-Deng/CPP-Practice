{"id":402920994,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1601519352,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/402920994/","is_pending":"Not Pending","title":"Longest Univalue Path","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def __init__(self):\n        self.ans = 0\n\n    def longestUnivaluePath(self, root: TreeNode) -> int:\n        def isUniValue(root: TreeNode) -> bool:\n            if not root:\n                return False\n            if not root.left and not root.right:\n                return True\n            l = isUniValue(root.left)\n            r = isUniValue(root.right)\n            if not root.left:\n                return r and root.right.val == root.val\n            elif not root.right:\n                return l and root.left.val == root.val\n            else:\n                return l and r and root.right.val == root.val and root.val == root.left.val\n            \n        def dfs(root):\n            if not root:\n                return 0\n            l = dfs(root.left)\n            r = dfs(root.right)\n            flag = True\n            if root.left:\n                flag = flag and isUniValue(root.left) and root.val == root.left.val\n            if root.right:\n                flag = flag and isUniValue(root.right) and root.right.val == root.val\n            if flag:\n                self.ans = max(self.ans, l + r + 1)\n            return 1 + max(l, r)\n        \n        dfs(root)\n        return self.ans            ","compare_result":"10010000000000100000000111001000000000000000000000000010000000000000000","title_slug":"longest-univalue-path","has_notes":false,"flag_type":1}