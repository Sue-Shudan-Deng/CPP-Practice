{"id":417487964,"lang":"cpp","lang_name":"C++","time":"2 years, 10 months","timestamp":1604687942,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/417487964/","is_pending":"Not Pending","title":"Contains Duplicate III","memory":"15.6 MB","code":"class Solution {\npublic:\n    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {\n        if (k==0) {\n            return false;\n        }\n        set<long long> s; // maintain a sorted hashset of size at most k\n        for(int i = 0; i < nums.size(); ++i){\n            long long val = nums[i];\n            if(!s.empty()){\n                if (s.size() == k + 1) {\n                    s.erase(nums[i-k-1]);\n                }\n                auto higher = s.lower_bound(val);\n                // cout << \"set: \";\n                // for (auto i : s) cout << i << \" \";\n                // cout << endl;\n                // cout << \"higher: \" << *higher << \" val: \" << val << endl;\n                // cout << (higher == s.end()) << endl;\n                //higher points to smallest element bigger or equal to val\n                if (higher != s.end() && (*higher - val <= t)) {\n                    return true;\n                }\n                if (higher != s.begin()) {\n                    auto lower = --higher;\n                    // cout << \"set: \";\n                    // for (auto i : s) cout << i << \" \";\n                    // cout << endl;\n                    // cout << \"lower: \" << *lower << \" val: \" << val << endl;\n                    //now lower should point to biggest element smaller than val\n                    if (lower != s.end() && ((val - *lower) <= t)) {\n                        return true;\n                    }\n                }\n            }\n            s.insert(val);\n        }\n        return false;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate-iii","has_notes":false,"flag_type":1}