{"id":391205655,"lang":"cpp","lang_name":"C++","time":"2 years, 12 months","timestamp":1599285306,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/391205655/","is_pending":"Not Pending","title":"Unique Binary Search Trees II","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\n    \nprivate:\n    vector<TreeNode*> generateTrees(int left, int right) {\n        if (left > right) {\n            vector<TreeNode*> tmp{nullptr};\n            return tmp;\n        }\n        vector<TreeNode*> left_trees;\n        vector<TreeNode*> right_trees;\n        vector<TreeNode*> ret;\n        for (auto k=left; k<=right; ++k) {\n            left_trees = generateTrees(left, k-1);\n            right_trees = generateTrees(k+1, right);\n            for (auto i : left_trees) {\n                for (auto j : right_trees) {\n                    TreeNode* cur = new TreeNode(k);\n                    cur->left = i;\n                    cur->right = j;\n                    ret.push_back(cur);\n                }\n            }\n        }\n        return ret;\n    }\n    \npublic:\n    vector<TreeNode*> generateTrees(int n) {\n        vector<TreeNode*> tmp{nullptr};\n        return n ? generateTrees(1, n) : tmp;\n    }\n};","compare_result":"101111111","title_slug":"unique-binary-search-trees-ii","has_notes":false,"flag_type":1}