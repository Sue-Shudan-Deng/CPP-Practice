{"id":418915837,"lang":"python3","lang_name":"Python3","time":"2 years, 9 months","timestamp":1605037062,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/418915837/","is_pending":"Not Pending","title":"Number of Submatrices That Sum to Target","memory":"N/A","code":"class Solution:\n    def numSubmatrixSumTarget(self, matrix: List[List[int]], target: int) -> int:\n        row, col = len(matrix), len(matrix[0])\n        if not matrix or not matrix[0]:\n            return 0\n        \n        \"\"\"\n        如果行数远大于列数，矩阵应该转置\n        \"\"\"\n        \n        if row > col:\n            new_matrix = [[0 for _ in range(row)] for _ in range(col)]\n            for r in range(row):\n                for c in range(col):\n                    new_matrix[c][r] = matrix[r][c]\n            return self.numSubmatrixSumTarget(new_matrix, k)\n        \n        ans = 0\n        for r1 in range(row):\n            dp = [0 for _ in range(col)]\n            for r2 in range(r1, row):\n                # step 1 : build array\n                for c in range(col):\n                    dp[c] += matrix[r2][c]\n                # step 2: number of subarray sum up to target, 560\n                prefix = collections.defaultdict(int)\n                prefix[0] = 1\n                cnt, cur = 0, 0\n                for num in dp:\n                    cur += num\n                    cnt += prefix[cur - target]\n                    prefix[cur] += 1\n                ans += cnt\n                \n        return ans","compare_result":"1111111100000000000000000000000000000000","title_slug":"number-of-submatrices-that-sum-to-target","has_notes":false,"flag_type":1}