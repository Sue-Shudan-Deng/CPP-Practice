{"id":417571033,"lang":"cpp","lang_name":"C++","time":"2 years, 10 months","timestamp":1604710226,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/417571033/","is_pending":"Not Pending","title":"The Skyline Problem","memory":"15.1 MB","code":"class Solution {\npublic:\n    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {\n        typedef pair<int, int> Event; \n        // events,  x,   h\n        vector<Event> es;        \n        hs_.clear();\n        \n        for (const auto& b : buildings) {\n            es.emplace_back(b[0], b[2]);\n            es.emplace_back(b[1], -b[2]);\n        }\n        \n        // Sort events by x\n        sort(es.begin(), es.end(), [](const Event& e1, const Event& e2){\n            if (e1.first == e2.first) return e1.second > e2.second;\n            return e1.first < e2.first;\n        });\n        \n        vector<vector<int>> ans;\n        \n        // Process all the events\n        for (const auto& e: es) {            \n            int x = e.first;\n            bool entering = e.second > 0;\n            int h = abs(e.second);\n            \n            if (entering) {                \n                if (h > this->maxHeight()) \n                    ans.push_back({x, h});\n                hs_.insert(h);\n            } else {\n                hs_.erase(hs_.equal_range(h).first);\n                if (h > this->maxHeight())\n                    ans.push_back({x, this->maxHeight()});\n            }\n        }\n        return ans;\n    }\nprivate:\n    int maxHeight() const {\n        if (hs_.empty()) return 0;\n        return *hs_.rbegin();\n    }\n    multiset<int> hs_;\n};","compare_result":"111111111111111111111111111111111111","title_slug":"the-skyline-problem","has_notes":false,"flag_type":1}