{"id":408032979,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1602554744,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/408032979/","is_pending":"Not Pending","title":"Split Array Largest Sum","memory":"N/A","code":"class Solution:\n    \n    # method 1: DP: TLE\n    def splitArray(self, nums: List[int], m: int) -> int:\n        n = len(nums)\n        dp = [[float(\"inf\") for j in range(n+1)] for i in range(m+1)]\n        prefix = [0 for _ in range(n+1)]\n        for i in range(1, n+1):\n            prefix[i] = prefix[i-1] + nums[i-1]\n        dp[0][0] = 0\n        for k in range(1, m+1):\n            for i in range(1, n+1):\n                for j in range(i):\n                    dp[k][i] = min(dp[k][i], max(dp[k-1][j], (prefix[i]-prefix[j])))\n        return dp[-1][-1]\n    \n    # # method 2: Binary search\n    # def splitArray(self, nums: List[int], k: int) -> int:\n    #     l, r = max(nums), sum(nums)\n    #     ans = r\n    #     while l < r:\n    #         # calculate cnt\n    #         m = l + (r - l) // 2\n    #         summ = 0\n    #         cnt = 1\n    #         # how to calculate cnt\n    #         # 因为这里是最紧凑的计数方式，所以相当于算的是所有可能的subarray的总数的最大值\n    #         for n in nums:\n    #             if summ + n > m:\n    #                 cnt += 1\n    #                 summ = n\n    #             else:\n    #                 summ += n\n    #         if cnt <= k:\n    #             # 再往左走没有意义，因为cnt只会越来越小\n    #             ans = min(ans, m)\n    #             r = m\n    #         else:\n    #             l = m + 1\n    #     return ans","compare_result":"1111111111111111111111111110","title_slug":"split-array-largest-sum","has_notes":false,"flag_type":1}