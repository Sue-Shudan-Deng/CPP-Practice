{"id":292952799,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1578662444,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/292952799/","is_pending":"Not Pending","title":"Implement Queue using Stacks","memory":"12.6 MB","code":"class MyQueue:\n    \"\"\"\n    本题相当于queue由一反一正两个stack并排构成\n    push的时候，push到正的stack里面去\n    pop的时候，如果反的stack为空则把所有当前元素都划分到反的stack里面去，\n    如果反的stack非空则直接从反的stack里面pop出去\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.pos_stack = []\n        self.neg_stack = []\n\n    def push(self, x: int) -> None:\n        \"\"\"\n        Push element x to the back of queue.\n        \"\"\"\n        self.pos_stack.append(x)\n        \n\n    def pop(self) -> int:\n        \"\"\"\n        Removes the element from in front of queue and returns that element.\n        \"\"\"\n        if not self.neg_stack:\n            while self.pos_stack:\n                elm = self.pos_stack.pop()\n                self.neg_stack.append(elm)\n        \n        return self.neg_stack.pop()\n\n    def peek(self) -> int:\n        \"\"\"\n        Get the front element.\n        \"\"\"\n        return self.neg_stack[-1] if self.neg_stack else self.pos_stack[0]\n\n    def empty(self) -> bool:\n        \"\"\"\n        Returns whether the queue is empty.\n        \"\"\"\n        return not self.neg_stack and not self.pos_stack\n        \n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()","compare_result":"11111111111111111","title_slug":"implement-queue-using-stacks","has_notes":false,"flag_type":1}