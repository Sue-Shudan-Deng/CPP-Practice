{"id":418297281,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1604889243,"status":10,"status_display":"Accepted","runtime":"224 ms","url":"/submissions/detail/418297281/","is_pending":"Not Pending","title":"Jump Game III","memory":"20.7 MB","code":"class Solution:\n    def canReach(self, arr: List[int], start: int) -> bool:\n        \"\"\"\n        method 1: DFS, 但更应该用BFS\n        \"\"\"\n#         n, visited = len(arr), set()\n        \n#         def dfs(start):\n#             if arr[start] == 0:\n#                 return True\n#             tmp = False\n#             # add\n#             if start + arr[start] < n and not start + arr[start] in visited:\n#                 visited.add(start + arr[start])\n#                 tmp |= dfs(start + arr[start])\n#                 visited.remove(start + arr[start])\n#             if tmp:\n#                 return True\n                \n#             # minus\n#             if start - arr[start] >= 0 and not start - arr[start] in visited:\n#                 visited.add(start - arr[start])\n#                 tmp |= dfs(start - arr[start])\n#                 visited.remove(start - arr[start])\n#             return tmp\n        \n#         return dfs(start)\n\n        \"\"\"\n        method 2: BFS\n        \"\"\"\n        n, queue = len(arr), collections.deque()\n        visited = set()\n        queue.append(start)\n        while queue:\n            cur = queue.popleft()\n            if cur < 0 or cur >= len(arr) or cur in visited:\n                continue\n            if arr[cur] == 0:\n                return True\n            visited.add(cur)\n            queue.append(cur + arr[cur])\n            queue.append(cur - arr[cur])\n        return False","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"jump-game-iii","has_notes":false,"flag_type":1}