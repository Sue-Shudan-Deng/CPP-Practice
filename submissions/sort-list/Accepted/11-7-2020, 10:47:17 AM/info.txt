{"id":417799748,"lang":"python3","lang_name":"Python3","time":"2 years, 10 months","timestamp":1604774837,"status":10,"status_display":"Accepted","runtime":"544 ms","url":"/submissions/detail/417799748/","is_pending":"Not Pending","title":"Sort List","memory":"56.8 MB","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def sortList(self, head: ListNode) -> ListNode:\n        \"\"\"\n        merge sort (top down)\n        1. split  2. sort l1 and l2  3. merge l1 and l2  \n        \"\"\"\n        if not head or not head.next:\n            return head\n        def merge(l1, l2):\n            if not l1:\n                return l2\n            if not l2:\n                return l1\n            if l1.val < l2.val:\n                l1.next = merge(l1.next, l2)\n                return l1\n            else:\n                l2.next = merge(l1, l2.next)\n                return l2\n        # split \n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            \n        head2 = slow.next\n        slow.next = None\n        l1 = self.sortList(head)\n        l2 = self.sortList(head2)\n        return merge(l1, l2)","compare_result":"1111111111111111111111111111","title_slug":"sort-list","has_notes":false,"flag_type":1}