{"id":395217816,"lang":"cpp","lang_name":"C++","time":"2Â years, 11Â months","timestamp":1600025461,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/395217816/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\n    \nprivate:\n    ListNode* reverse(ListNode* head) {\n        ListNode* pre(nullptr);\n        ListNode* cur = head;\n        ListNode* nxt;\n        while (cur) {\n            nxt = cur->next;\n            cur->next = pre;\n            pre = cur;\n            cur = nxt;\n        }\n        return pre;\n    }\n    \n    ListNode* halfpoint(ListNode* head) {\n        if (!head || !head->next) {\n            return head;\n        }\n        ListNode* slow = head;\n        ListNode* fast = head->next;\n        \n        while (!fast && !fast->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n        return slow;\n    }\n    \npublic:\n    bool isPalindrome(ListNode* head) {\n        \n        if (!head) {\n            return true;\n        }\n        \n        ListNode* half = halfpoint(head);\n        ListNode* cur = reverse(half->next);\n        \n        while (cur) {\n            if (head->val != cur->val) {\n                return false;\n            }\n            head = head->next;\n            cur = cur->next;\n        }\n        return true;   \n    }\n};","compare_result":"11111111100000000000000000","title_slug":"palindrome-linked-list","has_notes":false,"flag_type":1}