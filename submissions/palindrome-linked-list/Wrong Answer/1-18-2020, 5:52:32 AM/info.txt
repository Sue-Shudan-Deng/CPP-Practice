{"id":295258491,"lang":"python3","lang_name":"Python3","time":"3 years, 7 months","timestamp":1579355552,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/295258491/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"N/A","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def isPalindrome(self, head: ListNode) -> bool:\n        \"\"\"\n        如果把list整个反转过来，那么必然会用多余的空间\n        因此，只反转一半的list是最好的。其次，反转之后\n        的后半个list需要反转回去，原来的list不能被更改了\n        \"\"\"\n        if not head or not head.next:\n            return False\n        \n        def reverse(node: ListNode) -> None:\n            if not node or not node.next:\n                return node\n            sentinel = ListNode(0)\n            sentinel.next = node\n            while node.next:\n                rest = node.next.next\n                new_head = node.next\n                node.next = rest\n                sentinel.next = new_head\n                new_head.next = node\n            return sentinel.next\n        \n        def endhalf(node: ListNode) -> ListNode:\n            slow, fast = node, node.next\n            while fast and fast.next:\n                slow = slow.next\n                fast = fast.next.next\n            return slow\n        \n        # Step1: 找到分割点：用2倍快慢指针\n        firsthalfend = endhalf(head)\n        # Step2: 反转后半部分\n        reversed_secondhalf = reverse(firsthalfend.next)\n        # Step3: 逐次判断\n        ptr1, ptr2 = head, reversed_secondhalf\n        while ptr1 and ptr2:\n            if ptr1.val != ptr2.val:\n                return False\n            ptr1, ptr2 = ptr1.next, ptr2.next\n        # Step4: 恢复第二部分次序\n        secondhalf = reverse(reversed_secondhalf)\n        firsthalfend.next = secondhalf\n        return True","compare_result":"10011111111111111111001101","title_slug":"palindrome-linked-list","has_notes":false,"flag_type":1}