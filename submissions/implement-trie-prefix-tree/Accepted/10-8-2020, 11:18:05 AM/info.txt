{"id":406240970,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1602181085,"status":10,"status_display":"Accepted","runtime":"136 ms","url":"/submissions/detail/406240970/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"27.3 MB","code":"\"\"\"\nPython的实现用hashmap, C++的实现用array + unique_ptr\n\"\"\"\n\nclass Trie:\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = {}\n        \n    def insert(self, word: str) -> None:\n        \"\"\"\n        Inserts a word into the trie.\n        \"\"\"\n        p = self.root\n        for c in word:\n            if not c in p:\n                p[c] = {}\n            p = p[c]\n        p['#'] = True\n\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Returns if the word is in the trie.\n        \"\"\"\n        p = self.find(word)\n        return p and '#' in p\n\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        \"\"\"\n        return self.find(prefix)\n        \n    def find(self, prefix):\n        p = self.root\n        for c in prefix:\n            if not c in p:\n                return None\n            p = p[c]\n        # 貌似这里的p不是None而是至少有一个p['#'] = True\n        return p\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}