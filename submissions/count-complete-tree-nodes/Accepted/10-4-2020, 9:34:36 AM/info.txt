{"id":404433030,"lang":"python3","lang_name":"Python3","time":"2 years, 11 months","timestamp":1601829276,"status":10,"status_display":"Accepted","runtime":"68 ms","url":"/submissions/detail/404433030/","is_pending":"Not Pending","title":"Count Complete Tree Nodes","memory":"21.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def compute_depth(self, node: TreeNode) -> int:\n        \"\"\"\n        Return tree depth in O(d) time.\n        \"\"\"\n        d = 0\n        while node.left:\n            node = node.left\n            d += 1\n        return d\n\n    def exists(self, idx: int, d: int, node: TreeNode) -> bool:\n        \"\"\"\n        Last level nodes are enumerated from 0 to 2**d - 1 (left -> right).\n        Return True if last level node idx exists. \n        Binary search with O(d) complexity.\n        \"\"\"\n        l, r = 0, 2**d - 1\n        for _ in range(d):\n            m = l + (r - l) // 2\n            if idx <= m:\n                node = node.left\n                r = m\n            else:\n                node = node.right\n                l = m + 1\n        return node is not None\n        \n    def countNodes(self, root: TreeNode) -> int:\n        # if the tree is empty\n        if not root:\n            return 0\n        \n        d = self.compute_depth(root)\n        # if the tree contains 1 node\n        if d == 0:\n            return 1\n        \n        # Last level nodes are enumerated from 0 to 2**d - 1 (left -> right).\n        # Perform binary search to check how many nodes exist.\n        l, r = 0, 2**d\n        while l < r:\n            m = l + (r - l) // 2\n            if not self.exists(m, d, root):\n                r = m\n            else:\n                l = m + 1\n        \n        # The tree contains 2**d - 1 nodes on the first (d - 1) levels\n        # and left nodes on the last level.\n        return (2**d - 1) + l","compare_result":"111111111111111111","title_slug":"count-complete-tree-nodes","has_notes":false,"flag_type":1}